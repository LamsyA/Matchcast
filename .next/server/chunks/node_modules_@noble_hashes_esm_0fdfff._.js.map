{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/_assert.ts"],"sourcesContent":["function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n// copied from utils\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n"],"names":[],"mappings":";;;;;;;;;;AAAA,SAAS,OAAO,CAAS;IACvB,IAAI,CAAC,OAAO,aAAa,CAAC,MAAM,IAAI,GAAG,MAAM,IAAI,MAAM,CAAA,+BAAA,EAAkC,EAAC,CAAE;AAC9F;AAEA,SAAS,KAAK,CAAU;IACtB,IAAI,OAAO,MAAM,WAAW,MAAM,IAAI,MAAM,CAAA,sBAAA,EAAyB,EAAC,CAAE;AAC1E;AAGM,SAAU,QAAQ,CAAU;IAChC,OACE,aAAa,cACZ,KAAK,QAAQ,OAAO,MAAM,YAAY,EAAE,WAAW,CAAC,IAAI,KAAK;AAElE;AAEA,SAAS,MAAM,CAAyB,EAAE,GAAG,OAAiB;IAC5D,IAAI,CAAC,QAAQ,IAAI,MAAM,IAAI,MAAM;IACjC,IAAI,QAAQ,MAAM,GAAG,KAAK,CAAC,QAAQ,QAAQ,CAAC,EAAE,MAAM,GAClD,MAAM,IAAI,MAAM,CAAA,8BAAA,EAAiC,QAAO,gBAAA,EAAmB,EAAE,MAAM,CAAA,CAAE;AACzF;AAQA,SAAS,KAAK,CAAO;IACnB,IAAI,OAAO,MAAM,cAAc,OAAO,EAAE,MAAM,KAAK,YACjD,MAAM,IAAI,MAAM;IAClB,OAAO,EAAE,SAAS;IAClB,OAAO,EAAE,QAAQ;AACnB;AAEA,SAAS,OAAO,QAAa,EAAE,gBAAgB,IAAI;IACjD,IAAI,SAAS,SAAS,EAAE,MAAM,IAAI,MAAM;IACxC,IAAI,iBAAiB,SAAS,QAAQ,EAAE,MAAM,IAAI,MAAM;AAC1D;AACA,SAAS,OAAO,GAAQ,EAAE,QAAa;IACrC,MAAM;IACN,MAAM,MAAM,SAAS,SAAS;IAC9B,IAAI,IAAI,MAAM,GAAG,KAAK;QACpB,MAAM,IAAI,MAAM,CAAA,sDAAA,EAAyD,IAAG,CAAE;IAChF;AACF;;AAIA,MAAM,SAAS;IAAE;IAAQ;IAAM;IAAO;IAAM;IAAQ;AAAM;uCAC3C"}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/_u64.ts"],"sourcesContent":["const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number) => l;\nconst rotr32L = (h: number, _l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/cryptoNode.ts"],"sourcesContent":["// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\nimport * as nc from 'node:crypto';\nexport const crypto =\n  nc && typeof nc === 'object' && 'webcrypto' in nc ? (nc.webcrypto as any) : undefined;\n"],"names":[],"mappings":"AAAA,oFAAoF;AACpF,4BAA4B;AAC5B,iDAAiD;AACjD,aAAa;;;;;;;AAEN,MAAM,SACX,qDAAM,OAAO,sDAAO,YAAY,eAAe,oDAAM,kDAAG,SAAiB,GAAG"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/utils.ts"],"sourcesContent":["/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/sha3.ts"],"sourcesContent":["import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n  isLE,\n  byteSwap32,\n} from './utils.js';\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n\n// Various per round constants calculations\nconst SHA3_PI: number[] = [];\nconst SHA3_ROTL: number[] = [];\nconst _SHA3_IOTA: bigint[] = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    if (!isLE) byteSwap32(this.state32);\n    keccakP(this.state32, this.rounds);\n    if (!isLE) byteSwap32(this.state32);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 590, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 595, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/_md.ts"],"sourcesContent":["import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Choice: a ? b : c\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 711, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 716, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/sha512.ts"],"sourcesContent":["import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1034, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1039, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/_blake.ts"],"sourcesContent":["import { number, exists, output } from './_assert.js';\nimport { Hash, Input, toBytes, u32, isLE, byteSwap32, byteSwapIfBE } from './utils.js';\n\n// Blake is based on ChaCha permutation.\n\n// For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].\n// prettier-ignore\nexport const SIGMA = /* @__PURE__ */ new Uint8Array([\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n]);\n\nexport type BlakeOpts = {\n  dkLen?: number;\n  key?: Input;\n  salt?: Input;\n  personalization?: Input;\n};\n\nexport abstract class BLAKE<T extends BLAKE<T>> extends Hash<T> {\n  protected abstract compress(msg: Uint32Array, offset: number, isLast: boolean): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected buffer: Uint8Array;\n  protected buffer32: Uint32Array;\n  protected length: number = 0;\n  protected pos: number = 0;\n  protected finished = false;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    opts: BlakeOpts = {},\n    keyLen: number,\n    saltLen: number,\n    persLen: number\n  ) {\n    super();\n    number(blockLen);\n    number(outputLen);\n    number(keyLen);\n    if (outputLen < 0 || outputLen > keyLen) throw new Error('outputLen bigger than keyLen');\n    if (opts.key !== undefined && (opts.key.length < 1 || opts.key.length > keyLen))\n      throw new Error(`key must be up 1..${keyLen} byte long or undefined`);\n    if (opts.salt !== undefined && opts.salt.length !== saltLen)\n      throw new Error(`salt must be ${saltLen} byte long or undefined`);\n    if (opts.personalization !== undefined && opts.personalization.length !== persLen)\n      throw new Error(`personalization must be ${persLen} byte long or undefined`);\n    this.buffer32 = u32((this.buffer = new Uint8Array(blockLen)));\n  }\n  update(data: Input) {\n    exists(this);\n    // Main difference with other hashes: there is flag for last block,\n    // so we cannot process current block before we know that there\n    // is the next one. This significantly complicates logic and reduces ability\n    // to do zero-copy processing\n    const { blockLen, buffer, buffer32 } = this;\n    data = toBytes(data);\n    const len = data.length;\n    const offset = data.byteOffset;\n    const buf = data.buffer;\n    for (let pos = 0; pos < len; ) {\n      // If buffer is full and we still have input (don't process last block, same as blake2s)\n      if (this.pos === blockLen) {\n        if (!isLE) byteSwap32(buffer32);\n        this.compress(buffer32, 0, false);\n        if (!isLE) byteSwap32(buffer32);\n        this.pos = 0;\n      }\n      const take = Math.min(blockLen - this.pos, len - pos);\n      const dataOffset = offset + pos;\n      // full block && aligned to 4 bytes && not last in input\n      if (take === blockLen && !(dataOffset % 4) && pos + take < len) {\n        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));\n        if (!isLE) byteSwap32(data32);\n        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {\n          this.length += blockLen;\n          this.compress(data32, pos32, false);\n        }\n        if (!isLE) byteSwap32(data32);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      this.length += take;\n      pos += take;\n    }\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    const { pos, buffer32 } = this;\n    this.finished = true;\n    // Padding\n    this.buffer.subarray(pos).fill(0);\n    if (!isLE) byteSwap32(buffer32);\n    this.compress(buffer32, 0, true);\n    if (!isLE) byteSwap32(buffer32);\n    const out32 = u32(out);\n    this.get().forEach((v, i) => (out32[i] = byteSwapIfBE(v)));\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    const { buffer, length, finished, destroyed, outputLen, pos } = this;\n    to ||= new (this.constructor as any)({ dkLen: outputLen }) as T;\n    to.set(...this.get());\n    to.length = length;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.outputLen = outputLen;\n    to.buffer.set(buffer);\n    to.pos = pos;\n    return to;\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;AAOO,MAAM,QAAQ,aAAA,GAAgB,IAAI,WAAW;IAClD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAI;IAAI;IAClD;IAAI;IAAI;IAAG;IAAG;IAAG;IAAI;IAAI;IAAG;IAAG;IAAI;IAAG;IAAG;IAAI;IAAG;IAAG;IACnD;IAAI;IAAG;IAAI;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAI;IAAG;IAAG;IAAG;IAAG;IAAG;IACnD;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAI;IAAG;IAAG;IAAG;IAAI;IAAG;IAAG;IAAI;IACnD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAG;IAAI;IAAI;IAAG;IAAG;IAAG;IAClD;IAAG;IAAI;IAAG;IAAI;IAAG;IAAI;IAAG;IAAG;IAAG;IAAI;IAAG;IAAG;IAAI;IAAI;IAAG;IACnD;IAAI;IAAG;IAAG;IAAI;IAAI;IAAI;IAAG;IAAI;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAClD;IAAI;IAAI;IAAG;IAAI;IAAI;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAG;IAAG;IAAG;IAAG;IAClD;IAAG;IAAI;IAAI;IAAG;IAAI;IAAG;IAAG;IAAG;IAAI;IAAG;IAAI;IAAG;IAAG;IAAG;IAAI;IACnD;IAAI;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAG;IAAI;IAAG;IAAI;IAAI;IACnD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAI;IAAI;IAClD;IAAI;IAAI;IAAG;IAAG;IAAG;IAAI;IAAI;IAAG;IAAG;IAAI;IAAG;IAAG;IAAI;IAAG;IAAG;CACpD;AASK,MAAgB,cAAkC,mJAAA,CAAA,OAAO;IAY7D,YACW,QAAgB,EAClB,SAAiB,EACxB,OAAkB,CAAA,CAAE,EACpB,MAAc,EACd,OAAe,EACf,OAAe,CAAA;QAEf,KAAK;QAPI,IAAA,CAAA,QAAQ,GAAR;QACF,IAAA,CAAA,SAAS,GAAT;QAPC,IAAA,CAAA,MAAM,GAAW;QACjB,IAAA,CAAA,GAAG,GAAW;QACd,IAAA,CAAA,QAAQ,GAAG;QACX,IAAA,CAAA,SAAS,GAAG;QAWpB,CAAA,GAAA,qJAAA,CAAA,SAAM,AAAN,EAAO;QACP,CAAA,GAAA,qJAAA,CAAA,SAAM,AAAN,EAAO;QACP,CAAA,GAAA,qJAAA,CAAA,SAAM,AAAN,EAAO;QACP,IAAI,YAAY,KAAK,YAAY,QAAQ,MAAM,IAAI,MAAM;QACzD,IAAI,KAAK,GAAG,KAAK,aAAa,CAAC,KAAK,GAAG,CAAC,MAAM,GAAG,KAAK,KAAK,GAAG,CAAC,MAAM,GAAG,MAAM,GAC5E,MAAM,IAAI,MAAM,CAAA,kBAAA,EAAqB,OAAM,uBAAA,CAAyB;QACtE,IAAI,KAAK,IAAI,KAAK,aAAa,KAAK,IAAI,CAAC,MAAM,KAAK,SAClD,MAAM,IAAI,MAAM,CAAA,aAAA,EAAgB,QAAO,uBAAA,CAAyB;QAClE,IAAI,KAAK,eAAe,KAAK,aAAa,KAAK,eAAe,CAAC,MAAM,KAAK,SACxE,MAAM,IAAI,MAAM,CAAA,wBAAA,EAA2B,QAAO,uBAAA,CAAyB;QAC7E,IAAI,CAAC,QAAQ,GAAG,CAAA,GAAA,mJAAA,CAAA,MAAG,AAAH,EAAK,IAAI,CAAC,MAAM,GAAG,IAAI,WAAW;IACpD;IACA,OAAO,IAAW,EAAA;QAChB,CAAA,GAAA,qJAAA,CAAA,SAAM,AAAN,EAAO,IAAI;QACX,mEAAmE;QACnE,+DAA+D;QAC/D,4EAA4E;QAC5E,6BAA6B;QAC7B,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI;QAC3C,OAAO,CAAA,GAAA,mJAAA,CAAA,UAAO,AAAP,EAAQ;QACf,MAAM,MAAM,KAAK,MAAM;QACvB,MAAM,SAAS,KAAK,UAAU;QAC9B,MAAM,MAAM,KAAK,MAAM;QACvB,IAAK,IAAI,MAAM,GAAG,MAAM,KAAO;YAC7B,wFAAwF;YACxF,IAAI,IAAI,CAAC,GAAG,KAAK,UAAU;gBACzB,IAAI,CAAC,mJAAA,CAAA,OAAI,EAAE,CAAA,GAAA,mJAAA,CAAA,aAAU,AAAV,EAAW;gBACtB,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG;gBAC3B,IAAI,CAAC,mJAAA,CAAA,OAAI,EAAE,CAAA,GAAA,mJAAA,CAAA,aAAU,AAAV,EAAW;gBACtB,IAAI,CAAC,GAAG,GAAG;YACb;YACA,MAAM,OAAO,KAAK,GAAG,CAAC,WAAW,IAAI,CAAC,GAAG,EAAE,MAAM;YACjD,MAAM,aAAa,SAAS;YAC5B,wDAAwD;YACxD,IAAI,SAAS,YAAY,CAAC,CAAC,aAAa,CAAC,KAAK,MAAM,OAAO,KAAK;gBAC9D,MAAM,SAAS,IAAI,YAAY,KAAK,YAAY,KAAK,KAAK,CAAC,CAAC,MAAM,GAAG,IAAI;gBACzE,IAAI,CAAC,mJAAA,CAAA,OAAI,EAAE,CAAA,GAAA,mJAAA,CAAA,aAAU,AAAV,EAAW;gBACtB,IAAK,IAAI,QAAQ,GAAG,MAAM,WAAW,KAAK,SAAS,SAAS,MAAM,EAAE,OAAO,SAAU;oBACnF,IAAI,CAAC,MAAM,IAAI;oBACf,IAAI,CAAC,QAAQ,CAAC,QAAQ,OAAO;gBAC/B;gBACA,IAAI,CAAC,mJAAA,CAAA,OAAI,EAAE,CAAA,GAAA,mJAAA,CAAA,aAAU,AAAV,EAAW;gBACtB;YACF;YACA,OAAO,GAAG,CAAC,KAAK,QAAQ,CAAC,KAAK,MAAM,OAAO,IAAI,CAAC,GAAG;YACnD,IAAI,CAAC,GAAG,IAAI;YACZ,IAAI,CAAC,MAAM,IAAI;YACf,OAAO;QACT;QACA,OAAO,IAAI;IACb;IACA,WAAW,GAAe,EAAA;QACxB,CAAA,GAAA,qJAAA,CAAA,SAAM,AAAN,EAAO,IAAI;QACX,CAAA,GAAA,qJAAA,CAAA,SAAM,AAAN,EAAO,KAAK,IAAI;QAChB,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI;QAC9B,IAAI,CAAC,QAAQ,GAAG;QAChB,UAAU;QACV,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC;QAC/B,IAAI,CAAC,mJAAA,CAAA,OAAI,EAAE,CAAA,GAAA,mJAAA,CAAA,aAAU,AAAV,EAAW;QACtB,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG;QAC3B,IAAI,CAAC,mJAAA,CAAA,OAAI,EAAE,CAAA,GAAA,mJAAA,CAAA,aAAU,AAAV,EAAW;QACtB,MAAM,QAAQ,CAAA,GAAA,mJAAA,CAAA,MAAG,AAAH,EAAI;QAClB,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,IAAO,KAAK,CAAC,EAAE,GAAG,CAAA,GAAA,mJAAA,CAAA,eAAY,AAAZ,EAAa;IACxD;IACA,SAAM;QACJ,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI;QAClC,IAAI,CAAC,UAAU,CAAC;QAChB,MAAM,MAAM,OAAO,KAAK,CAAC,GAAG;QAC5B,IAAI,CAAC,OAAO;QACZ,OAAO;IACT;IACA,WAAW,EAAM,EAAA;QACf,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,IAAI;QACpE,MAAE,CAAF,KAAO,IAAK,IAAI,CAAC,WAAmB,CAAC;YAAE,OAAO;QAAS,EAAQ;QAC/D,GAAG,GAAG,IAAI,IAAI,CAAC,GAAG;QAClB,GAAG,MAAM,GAAG;QACZ,GAAG,QAAQ,GAAG;QACd,GAAG,SAAS,GAAG;QACf,GAAG,SAAS,GAAG;QACf,GAAG,MAAM,CAAC,GAAG,CAAC;QACd,GAAG,GAAG,GAAG;QACT,OAAO;IACT"}},
    {"offset": {"line": 1334, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1339, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/blake2s.ts"],"sourcesContent":["import { BLAKE, BlakeOpts, SIGMA } from './_blake.js';\nimport { fromBig } from './_u64.js';\nimport { rotr, toBytes, wrapConstructorWithOpts, u32, byteSwapIfBE } from './utils.js';\n\n// Initial state: same as SHA256\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nexport const B2S_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Mixing function G splitted in two halfs\nfunction G1s(a: number, b: number, c: number, d: number, x: number) {\n  a = (a + b + x) | 0;\n  d = rotr(d ^ a, 16);\n  c = (c + d) | 0;\n  b = rotr(b ^ c, 12);\n  return { a, b, c, d };\n}\n\nfunction G2s(a: number, b: number, c: number, d: number, x: number) {\n  a = (a + b + x) | 0;\n  d = rotr(d ^ a, 8);\n  c = (c + d) | 0;\n  b = rotr(b ^ c, 7);\n  return { a, b, c, d };\n}\n\n// prettier-ignore\nexport function compress(s: Uint8Array, offset: number, msg: Uint32Array, rounds: number,\n  v0: number, v1: number,  v2: number,  v3: number,  v4: number,  v5: number,  v6: number,  v7: number,\n  v8: number, v9: number, v10: number, v11: number, v12: number, v13: number, v14: number, v15: number,\n) {\n  let j = 0;\n  for (let i = 0; i < rounds; i++) {\n    ({ a: v0, b: v4, c: v8, d: v12 } = G1s(v0, v4, v8, v12, msg[offset + s[j++]]));\n    ({ a: v0, b: v4, c: v8, d: v12 } = G2s(v0, v4, v8, v12, msg[offset + s[j++]]));\n    ({ a: v1, b: v5, c: v9, d: v13 } = G1s(v1, v5, v9, v13, msg[offset + s[j++]]));\n    ({ a: v1, b: v5, c: v9, d: v13 } = G2s(v1, v5, v9, v13, msg[offset + s[j++]]));\n    ({ a: v2, b: v6, c: v10, d: v14 } = G1s(v2, v6, v10, v14, msg[offset + s[j++]]));\n    ({ a: v2, b: v6, c: v10, d: v14 } = G2s(v2, v6, v10, v14, msg[offset + s[j++]]));\n    ({ a: v3, b: v7, c: v11, d: v15 } = G1s(v3, v7, v11, v15, msg[offset + s[j++]]));\n    ({ a: v3, b: v7, c: v11, d: v15 } = G2s(v3, v7, v11, v15, msg[offset + s[j++]]));\n\n    ({ a: v0, b: v5, c: v10, d: v15 } = G1s(v0, v5, v10, v15, msg[offset + s[j++]]));\n    ({ a: v0, b: v5, c: v10, d: v15 } = G2s(v0, v5, v10, v15, msg[offset + s[j++]]));\n    ({ a: v1, b: v6, c: v11, d: v12 } = G1s(v1, v6, v11, v12, msg[offset + s[j++]]));\n    ({ a: v1, b: v6, c: v11, d: v12 } = G2s(v1, v6, v11, v12, msg[offset + s[j++]]));\n    ({ a: v2, b: v7, c: v8, d: v13 } = G1s(v2, v7, v8, v13, msg[offset + s[j++]]));\n    ({ a: v2, b: v7, c: v8, d: v13 } = G2s(v2, v7, v8, v13, msg[offset + s[j++]]));\n    ({ a: v3, b: v4, c: v9, d: v14 } = G1s(v3, v4, v9, v14, msg[offset + s[j++]]));\n    ({ a: v3, b: v4, c: v9, d: v14 } = G2s(v3, v4, v9, v14, msg[offset + s[j++]]));\n  }\n  return { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 };\n}\n\nclass BLAKE2s extends BLAKE<BLAKE2s> {\n  // Internal state, same as SHA-256\n  private v0 = B2S_IV[0] | 0;\n  private v1 = B2S_IV[1] | 0;\n  private v2 = B2S_IV[2] | 0;\n  private v3 = B2S_IV[3] | 0;\n  private v4 = B2S_IV[4] | 0;\n  private v5 = B2S_IV[5] | 0;\n  private v6 = B2S_IV[6] | 0;\n  private v7 = B2S_IV[7] | 0;\n\n  constructor(opts: BlakeOpts = {}) {\n    super(64, opts.dkLen === undefined ? 32 : opts.dkLen, opts, 32, 8, 8);\n    const keyLength = opts.key ? opts.key.length : 0;\n    this.v0 ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);\n    if (opts.salt) {\n      const salt = u32(toBytes(opts.salt));\n      this.v4 ^= byteSwapIfBE(salt[0]);\n      this.v5 ^= byteSwapIfBE(salt[1]);\n    }\n    if (opts.personalization) {\n      const pers = u32(toBytes(opts.personalization));\n      this.v6 ^= byteSwapIfBE(pers[0]);\n      this.v7 ^= byteSwapIfBE(pers[1]);\n    }\n    if (opts.key) {\n      // Pad to blockLen and update\n      const tmp = new Uint8Array(this.blockLen);\n      tmp.set(toBytes(opts.key));\n      this.update(tmp);\n    }\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { v0, v1, v2, v3, v4, v5, v6, v7 } = this;\n    return [v0, v1, v2, v3, v4, v5, v6, v7];\n  }\n  // prettier-ignore\n  protected set(\n    v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number\n  ) {\n    this.v0 = v0 | 0;\n    this.v1 = v1 | 0;\n    this.v2 = v2 | 0;\n    this.v3 = v3 | 0;\n    this.v4 = v4 | 0;\n    this.v5 = v5 | 0;\n    this.v6 = v6 | 0;\n    this.v7 = v7 | 0;\n  }\n  protected compress(msg: Uint32Array, offset: number, isLast: boolean) {\n    const { h, l } = fromBig(BigInt(this.length));\n    // prettier-ignore\n    const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } =\n      compress(\n        SIGMA, offset, msg, 10,\n        this.v0, this.v1, this.v2, this.v3, this.v4, this.v5, this.v6, this.v7,\n        B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], l ^ B2S_IV[4], h ^ B2S_IV[5], isLast ? ~B2S_IV[6] : B2S_IV[6], B2S_IV[7]\n      );\n    this.v0 ^= v0 ^ v8;\n    this.v1 ^= v1 ^ v9;\n    this.v2 ^= v2 ^ v10;\n    this.v3 ^= v3 ^ v11;\n    this.v4 ^= v4 ^ v12;\n    this.v5 ^= v5 ^ v13;\n    this.v6 ^= v6 ^ v14;\n    this.v7 ^= v7 ^ v15;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.buffer32.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * BLAKE2s - optimized for 32-bit platforms. JS doesn't have uint64, so it's faster than BLAKE2b.\n * @param msg - message that would be hashed\n * @param opts - dkLen, key, salt, personalization\n */\nexport const blake2s = /* @__PURE__ */ wrapConstructorWithOpts<BLAKE2s, BlakeOpts>(\n  (opts) => new BLAKE2s(opts)\n);\n"],"names":[],"mappings":";;;;;;;;;;;;AAOO,MAAM,SAAS,aAAA,GAAgB,IAAI,YAAY;IACpD;IAAY;IAAY;IAAY;IAAY;IAAY;IAAY;IAAY;CACrF;AAED,0CAA0C;AAC1C,SAAS,IAAI,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;IAChE,IAAI,AAAC,IAAI,IAAI,IAAK;IAClB,IAAI,CAAA,GAAA,mJAAA,CAAA,OAAI,AAAJ,EAAK,IAAI,GAAG;IAChB,IAAI,AAAC,IAAI,IAAK;IACd,IAAI,CAAA,GAAA,mJAAA,CAAA,OAAI,AAAJ,EAAK,IAAI,GAAG;IAChB,OAAO;QAAE;QAAG;QAAG;QAAG;IAAC;AACrB;AAEA,SAAS,IAAI,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;IAChE,IAAI,AAAC,IAAI,IAAI,IAAK;IAClB,IAAI,CAAA,GAAA,mJAAA,CAAA,OAAI,AAAJ,EAAK,IAAI,GAAG;IAChB,IAAI,AAAC,IAAI,IAAK;IACd,IAAI,CAAA,GAAA,mJAAA,CAAA,OAAI,AAAJ,EAAK,IAAI,GAAG;IAChB,OAAO;QAAE;QAAG;QAAG;QAAG;IAAC;AACrB;AAGM,SAAU,SAAS,CAAa,EAAE,MAAc,EAAE,GAAgB,EAAE,MAAc,EACtF,EAAU,EAAE,EAAU,EAAG,EAAU,EAAG,EAAU,EAAG,EAAU,EAAG,EAAU,EAAG,EAAU,EAAG,EAAU,EACpG,EAAU,EAAE,EAAU,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW;IAEpG,IAAI,IAAI;IACR,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,IAAK;QAC/B,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC7E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC7E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC7E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC7E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC/E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC/E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC/E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAE/E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC/E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC/E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC/E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC/E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC7E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC7E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;QAC7E,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;IAC/E;IACA,OAAO;QAAE;QAAI;QAAI;QAAI;QAAI;QAAI;QAAI;QAAI;QAAI;QAAI;QAAI;QAAK;QAAK;QAAK;QAAK;QAAK;IAAG;AAC/E;AAEA,MAAM,gBAAgB,oJAAA,CAAA,QAAc;IAWlC,YAAY,OAAkB,CAAA,CAAE,CAAA;QAC9B,KAAK,CAAC,IAAI,KAAK,KAAK,KAAK,YAAY,KAAK,KAAK,KAAK,EAAE,MAAM,IAAI,GAAG;QAXrE,kCAAkC;QAC1B,IAAA,CAAA,EAAE,GAAG,MAAM,CAAC,EAAE,GAAG;QACjB,IAAA,CAAA,EAAE,GAAG,MAAM,CAAC,EAAE,GAAG;QACjB,IAAA,CAAA,EAAE,GAAG,MAAM,CAAC,EAAE,GAAG;QACjB,IAAA,CAAA,EAAE,GAAG,MAAM,CAAC,EAAE,GAAG;QACjB,IAAA,CAAA,EAAE,GAAG,MAAM,CAAC,EAAE,GAAG;QACjB,IAAA,CAAA,EAAE,GAAG,MAAM,CAAC,EAAE,GAAG;QACjB,IAAA,CAAA,EAAE,GAAG,MAAM,CAAC,EAAE,GAAG;QACjB,IAAA,CAAA,EAAE,GAAG,MAAM,CAAC,EAAE,GAAG;QAIvB,MAAM,YAAY,KAAK,GAAG,GAAG,KAAK,GAAG,CAAC,MAAM,GAAG;QAC/C,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,SAAS,GAAI,aAAa,IAAM,QAAQ,KAAO,QAAQ;QACvE,IAAI,KAAK,IAAI,EAAE;YACb,MAAM,OAAO,CAAA,GAAA,mJAAA,CAAA,MAAG,AAAH,EAAI,CAAA,GAAA,mJAAA,CAAA,UAAO,AAAP,EAAQ,KAAK,IAAI;YAClC,IAAI,CAAC,EAAE,IAAI,CAAA,GAAA,mJAAA,CAAA,eAAY,AAAZ,EAAa,IAAI,CAAC,EAAE;YAC/B,IAAI,CAAC,EAAE,IAAI,CAAA,GAAA,mJAAA,CAAA,eAAY,AAAZ,EAAa,IAAI,CAAC,EAAE;QACjC;QACA,IAAI,KAAK,eAAe,EAAE;YACxB,MAAM,OAAO,CAAA,GAAA,mJAAA,CAAA,MAAG,AAAH,EAAI,CAAA,GAAA,mJAAA,CAAA,UAAO,AAAP,EAAQ,KAAK,eAAe;YAC7C,IAAI,CAAC,EAAE,IAAI,CAAA,GAAA,mJAAA,CAAA,eAAY,AAAZ,EAAa,IAAI,CAAC,EAAE;YAC/B,IAAI,CAAC,EAAE,IAAI,CAAA,GAAA,mJAAA,CAAA,eAAY,AAAZ,EAAa,IAAI,CAAC,EAAE;QACjC;QACA,IAAI,KAAK,GAAG,EAAE;YACZ,6BAA6B;YAC7B,MAAM,MAAM,IAAI,WAAW,IAAI,CAAC,QAAQ;YACxC,IAAI,GAAG,CAAC,CAAA,GAAA,mJAAA,CAAA,UAAO,AAAP,EAAQ,KAAK,GAAG;YACxB,IAAI,CAAC,MAAM,CAAC;QACd;IACF;IACU,MAAG;QACX,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI;QAC/C,OAAO;YAAC;YAAI;YAAI;YAAI;YAAI;YAAI;YAAI;YAAI;SAAG;IACzC;IACA,kBAAkB;IACR,IACR,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAA;QAE9F,IAAI,CAAC,EAAE,GAAG,KAAK;QACf,IAAI,CAAC,EAAE,GAAG,KAAK;QACf,IAAI,CAAC,EAAE,GAAG,KAAK;QACf,IAAI,CAAC,EAAE,GAAG,KAAK;QACf,IAAI,CAAC,EAAE,GAAG,KAAK;QACf,IAAI,CAAC,EAAE,GAAG,KAAK;QACf,IAAI,CAAC,EAAE,GAAG,KAAK;QACf,IAAI,CAAC,EAAE,GAAG,KAAK;IACjB;IACU,SAAS,GAAgB,EAAE,MAAc,EAAE,MAAe,EAAA;QAClE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,kJAAA,CAAA,UAAO,AAAP,EAAQ,OAAO,IAAI,CAAC,MAAM;QAC3C,kBAAkB;QAClB,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAC5E,SACE,oJAAA,CAAA,QAAK,EAAE,QAAQ,KAAK,IACpB,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EACtE,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,IAAI,MAAM,CAAC,EAAE,EAAE,IAAI,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE;QAExH,IAAI,CAAC,EAAE,IAAI,KAAK;QAChB,IAAI,CAAC,EAAE,IAAI,KAAK;QAChB,IAAI,CAAC,EAAE,IAAI,KAAK;QAChB,IAAI,CAAC,EAAE,IAAI,KAAK;QAChB,IAAI,CAAC,EAAE,IAAI,KAAK;QAChB,IAAI,CAAC,EAAE,IAAI,KAAK;QAChB,IAAI,CAAC,EAAE,IAAI,KAAK;QAChB,IAAI,CAAC,EAAE,IAAI,KAAK;IAClB;IACA,UAAO;QACL,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QACnB,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IAChC;;AAQK,MAAM,UAAU,aAAA,GAAgB,CAAA,GAAA,mJAAA,CAAA,0BAAuB,AAAvB,EACrC,CAAC,OAAS,IAAI,QAAQ"}},
    {"offset": {"line": 1500, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1505, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/blake3.ts"],"sourcesContent":["import { bytes, exists, number, output } from './_assert.js';\nimport { fromBig } from './_u64.js';\nimport { BLAKE } from './_blake.js';\nimport { compress, B2S_IV } from './blake2s.js';\nimport {\n  Input,\n  u8,\n  u32,\n  toBytes,\n  HashXOF,\n  wrapXOFConstructorWithOpts,\n  isLE,\n  byteSwap32,\n} from './utils.js';\n\n// Blake3 is single-option Blake2 with reduced security (round count).\n\n// Flag bitset\nconst enum B3_Flags {\n  CHUNK_START = 1 << 0,\n  CHUNK_END = 1 << 1,\n  PARENT = 1 << 2,\n  ROOT = 1 << 3,\n  KEYED_HASH = 1 << 4,\n  DERIVE_KEY_CONTEXT = 1 << 5,\n  DERIVE_KEY_MATERIAL = 1 << 6,\n}\n\nconst SIGMA: Uint8Array = /* @__PURE__ */ (() => {\n  const Id = Array.from({ length: 16 }, (_, i) => i);\n  const permute = (arr: number[]) =>\n    [2, 6, 3, 10, 7, 0, 4, 13, 1, 11, 12, 5, 9, 14, 15, 8].map((i) => arr[i]);\n  const res: number[] = [];\n  for (let i = 0, v = Id; i < 7; i++, v = permute(v)) res.push(...v);\n  return Uint8Array.from(res);\n})();\n\n// - key: is 256-bit key\n// - context: string should be hardcoded, globally unique, and application - specific.\n//   A good default format for the context string is \"[application] [commit timestamp] [purpose]\"\n// - Only one of 'key' (keyed mode) or 'context' (derive key mode) can be used at same time\nexport type Blake3Opts = { dkLen?: number; key?: Input; context?: Input };\n\n// Why is this so slow? It should be 6x faster than blake2b.\n// - There is only 30% reduction in number of rounds from blake2s\n// - This function uses tree mode to achive parallelisation via SIMD and threading,\n//   however in JS we don't have threads and SIMD, so we get only overhead from tree structure\n// - It is possible to speed it up via Web Workers, hovewer it will make code singnificantly more\n//   complicated, which we are trying to avoid, since this library is intended to be used\n//   for cryptographic purposes. Also, parallelization happens only on chunk level (1024 bytes),\n//   which won't really benefit small inputs.\nclass BLAKE3 extends BLAKE<BLAKE3> implements HashXOF<BLAKE3> {\n  private IV: Uint32Array;\n  private flags = 0 | 0;\n  private state: Uint32Array;\n  private chunkPos = 0; // Position of current block in chunk\n  private chunksDone = 0; // How many chunks we already have\n  private stack: Uint32Array[] = [];\n  // Output\n  private posOut = 0;\n  private bufferOut32 = new Uint32Array(16);\n  private bufferOut: Uint8Array;\n  private chunkOut = 0; // index of output chunk\n  private enableXOF = true;\n\n  constructor(opts: Blake3Opts = {}, flags = 0) {\n    super(64, opts.dkLen === undefined ? 32 : opts.dkLen, {}, Number.MAX_SAFE_INTEGER, 0, 0);\n    this.outputLen = opts.dkLen === undefined ? 32 : opts.dkLen;\n    number(this.outputLen);\n    if (opts.key !== undefined && opts.context !== undefined)\n      throw new Error('Blake3: only key or context can be specified at same time');\n    else if (opts.key !== undefined) {\n      const key = toBytes(opts.key).slice();\n      if (key.length !== 32) throw new Error('Blake3: key should be 32 byte');\n      this.IV = u32(key);\n      if (!isLE) byteSwap32(this.IV);\n      this.flags = flags | B3_Flags.KEYED_HASH;\n    } else if (opts.context !== undefined) {\n      const context_key = new BLAKE3({ dkLen: 32 }, B3_Flags.DERIVE_KEY_CONTEXT)\n        .update(opts.context)\n        .digest();\n      this.IV = u32(context_key);\n      if (!isLE) byteSwap32(this.IV);\n      this.flags = flags | B3_Flags.DERIVE_KEY_MATERIAL;\n    } else {\n      this.IV = B2S_IV.slice();\n      this.flags = flags;\n    }\n    this.state = this.IV.slice();\n    this.bufferOut = u8(this.bufferOut32);\n  }\n  // Unused\n  protected get() {\n    return [];\n  }\n  protected set() {}\n  private b2Compress(counter: number, flags: number, buf: Uint32Array, bufPos: number = 0) {\n    const { state: s, pos } = this;\n    const { h, l } = fromBig(BigInt(counter), true);\n    // prettier-ignore\n    const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } =\n      compress(\n        SIGMA, bufPos, buf, 7,\n        s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7],\n        B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], h, l, pos, flags\n      );\n    s[0] = v0 ^ v8;\n    s[1] = v1 ^ v9;\n    s[2] = v2 ^ v10;\n    s[3] = v3 ^ v11;\n    s[4] = v4 ^ v12;\n    s[5] = v5 ^ v13;\n    s[6] = v6 ^ v14;\n    s[7] = v7 ^ v15;\n  }\n  protected compress(buf: Uint32Array, bufPos: number = 0, isLast: boolean = false) {\n    // Compress last block\n    let flags = this.flags;\n    if (!this.chunkPos) flags |= B3_Flags.CHUNK_START;\n    if (this.chunkPos === 15 || isLast) flags |= B3_Flags.CHUNK_END;\n    if (!isLast) this.pos = this.blockLen;\n    this.b2Compress(this.chunksDone, flags, buf, bufPos);\n    this.chunkPos += 1;\n    // If current block is last in chunk (16 blocks), then compress chunks\n    if (this.chunkPos === 16 || isLast) {\n      let chunk = this.state;\n      this.state = this.IV.slice();\n      // If not the last one, compress only when there are trailing zeros in chunk counter\n      // chunks used as binary tree where current stack is path. Zero means current leaf is finished and can be compressed.\n      // 1 (001) - leaf not finished (just push current chunk to stack)\n      // 2 (010) - leaf finished at depth=1 (merge with last elm on stack and push back)\n      // 3 (011) - last leaf not finished\n      // 4 (100) - leafs finished at depth=1 and depth=2\n      for (let last, chunks = this.chunksDone + 1; isLast || !(chunks & 1); chunks >>= 1) {\n        if (!(last = this.stack.pop())) break;\n        this.buffer32.set(last, 0);\n        this.buffer32.set(chunk, 8);\n        this.pos = this.blockLen;\n        this.b2Compress(0, this.flags | B3_Flags.PARENT, this.buffer32, 0);\n        chunk = this.state;\n        this.state = this.IV.slice();\n      }\n      this.chunksDone++;\n      this.chunkPos = 0;\n      this.stack.push(chunk);\n    }\n    this.pos = 0;\n  }\n  _cloneInto(to?: BLAKE3): BLAKE3 {\n    to = super._cloneInto(to) as BLAKE3;\n    const { IV, flags, state, chunkPos, posOut, chunkOut, stack, chunksDone } = this;\n    to.state.set(state.slice());\n    to.stack = stack.map((i) => Uint32Array.from(i));\n    to.IV.set(IV);\n    to.flags = flags;\n    to.chunkPos = chunkPos;\n    to.chunksDone = chunksDone;\n    to.posOut = posOut;\n    to.chunkOut = chunkOut;\n    to.enableXOF = this.enableXOF;\n    to.bufferOut32.set(this.bufferOut32);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n    this.buffer32.fill(0);\n    this.IV.fill(0);\n    this.bufferOut32.fill(0);\n    for (let i of this.stack) i.fill(0);\n  }\n  // Same as b2Compress, but doesn't modify state and returns 16 u32 array (instead of 8)\n  private b2CompressOut() {\n    const { state: s, pos, flags, buffer32, bufferOut32: out32 } = this;\n    const { h, l } = fromBig(BigInt(this.chunkOut++));\n    if (!isLE) byteSwap32(buffer32);\n    // prettier-ignore\n    const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } =\n      compress(\n        SIGMA, 0, buffer32, 7,\n        s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7],\n        B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], l, h, pos, flags\n      );\n    out32[0] = v0 ^ v8;\n    out32[1] = v1 ^ v9;\n    out32[2] = v2 ^ v10;\n    out32[3] = v3 ^ v11;\n    out32[4] = v4 ^ v12;\n    out32[5] = v5 ^ v13;\n    out32[6] = v6 ^ v14;\n    out32[7] = v7 ^ v15;\n    out32[8] = s[0] ^ v8;\n    out32[9] = s[1] ^ v9;\n    out32[10] = s[2] ^ v10;\n    out32[11] = s[3] ^ v11;\n    out32[12] = s[4] ^ v12;\n    out32[13] = s[5] ^ v13;\n    out32[14] = s[6] ^ v14;\n    out32[15] = s[7] ^ v15;\n    if (!isLE) {\n      byteSwap32(buffer32);\n      byteSwap32(out32);\n    }\n    this.posOut = 0;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    // Padding\n    this.buffer.fill(0, this.pos);\n    // Process last chunk\n    let flags = this.flags | B3_Flags.ROOT;\n    if (this.stack.length) {\n      flags |= B3_Flags.PARENT;\n      if (!isLE) byteSwap32(this.buffer32);\n      this.compress(this.buffer32, 0, true);\n      if (!isLE) byteSwap32(this.buffer32);\n      this.chunksDone = 0;\n      this.pos = this.blockLen;\n    } else {\n      flags |= (!this.chunkPos ? B3_Flags.CHUNK_START : 0) | B3_Flags.CHUNK_END;\n    }\n    this.flags = flags;\n    this.b2CompressOut();\n  }\n  private writeInto(out: Uint8Array) {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const { blockLen, bufferOut } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.b2CompressOut();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    if (!this.enableXOF) throw new Error('XOF is not possible after digest call');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.enableXOF = false;\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n}\n\n/**\n * BLAKE3 hash function.\n * @param msg - message that would be hashed\n * @param opts - dkLen, key, context\n */\nexport const blake3 = /* @__PURE__ */ wrapXOFConstructorWithOpts<BLAKE3, Blake3Opts>(\n  (opts) => new BLAKE3(opts)\n);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1747, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1752, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/hmac.ts"],"sourcesContent":["import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1825, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1830, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/ripemd160.ts"],"sourcesContent":["import { HashMD } from './_md.js';\nimport { rotl, wrapConstructor } from './utils.js';\n\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = /* @__PURE__ */ new Uint8Array(new Array(16).fill(0).map((_, i) => i));\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++) for (let j of [idxL, idxR]) j.push(j[i].map((k) => Rho[k]));\n\nconst shifts = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = /* @__PURE__ */ new Uint32Array([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr = /* @__PURE__ */ new Uint32Array([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  else if (group === 1) return (x & y) | (~x & z);\n  else if (group === 2) return (x | ~y) ^ z;\n  else if (group === 3) return (x & z) | (y & ~z);\n  else return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst R_BUF = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number) {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) R_BUF[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean() {\n    R_BUF.fill(0);\n  }\n  destroy() {\n    this.destroyed = true;\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\n"],"names":[],"mappings":";;;;;;;;;AAGA,0DAA0D;AAC1D,6EAA6E;AAC7E,MAAM,MAAM,aAAA,GAAgB,IAAI,WAAW;IAAC;IAAG;IAAG;IAAI;IAAG;IAAI;IAAG;IAAI;IAAG;IAAI;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;CAAE;AACjG,MAAM,KAAK,aAAA,GAAgB,IAAI,WAAW,IAAI,MAAM,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAM;AAC9E,MAAM,KAAK,aAAA,GAAgB,GAAG,GAAG,CAAC,CAAC,IAAM,CAAC,IAAI,IAAI,CAAC,IAAI;AACvD,IAAI,OAAO;IAAC;CAAG;AACf,IAAI,OAAO;IAAC;CAAG;AACf,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK,KAAK,IAAI,KAAK;IAAC;IAAM;CAAK,CAAE,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAM,GAAG,CAAC,EAAE;AAErF,MAAM,SAAS,aAAA,GAAgB;IAC7B;QAAC;QAAI;QAAI;QAAI;QAAI;QAAG;QAAG;QAAG;QAAG;QAAI;QAAI;QAAI;QAAI;QAAG;QAAG;QAAG;KAAE;IACxD;QAAC;QAAI;QAAI;QAAI;QAAI;QAAG;QAAG;QAAG;QAAG;QAAI;QAAI;QAAI;QAAI;QAAG;QAAG;QAAG;KAAE;IACxD;QAAC;QAAI;QAAI;QAAI;QAAI;QAAG;QAAG;QAAG;QAAG;QAAI;QAAI;QAAI;QAAI;QAAG;QAAG;QAAG;KAAE;IACxD;QAAC;QAAI;QAAI;QAAI;QAAI;QAAG;QAAG;QAAG;QAAG;QAAI;QAAI;QAAI;QAAI;QAAG;QAAG;QAAG;KAAE;IACxD;QAAC;QAAI;QAAI;QAAI;QAAI;QAAG;QAAG;QAAG;QAAG;QAAI;QAAI;QAAI;QAAI;QAAG;QAAG;QAAG;KAAE;CACzD,CAAC,GAAG,CAAC,CAAC,IAAM,IAAI,WAAW;AAC5B,MAAM,UAAU,aAAA,GAAgB,KAAK,GAAG,CAAC,CAAC,KAAK,IAAM,IAAI,GAAG,CAAC,CAAC,IAAM,MAAM,CAAC,EAAE,CAAC,EAAE;AAChF,MAAM,UAAU,aAAA,GAAgB,KAAK,GAAG,CAAC,CAAC,KAAK,IAAM,IAAI,GAAG,CAAC,CAAC,IAAM,MAAM,CAAC,EAAE,CAAC,EAAE;AAChF,MAAM,KAAK,aAAA,GAAgB,IAAI,YAAY;IACzC;IAAY;IAAY;IAAY;IAAY;CACjD;AACD,MAAM,KAAK,aAAA,GAAgB,IAAI,YAAY;IACzC;IAAY;IAAY;IAAY;IAAY;CACjD;AACD,2BAA2B;AAC3B,SAAS,EAAE,KAAa,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;IACvD,IAAI,UAAU,GAAG,OAAO,IAAI,IAAI;SAC3B,IAAI,UAAU,GAAG,OAAO,AAAC,IAAI,IAAM,CAAC,IAAI;SACxC,IAAI,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI;SACnC,IAAI,UAAU,GAAG,OAAO,AAAC,IAAI,IAAM,IAAI,CAAC;SACxC,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;AACzB;AACA,4DAA4D;AAC5D,MAAM,QAAQ,aAAA,GAAgB,IAAI,YAAY;AACxC,MAAO,kBAAkB,iJAAA,CAAA,SAAiB;IAO9C,aAAA;QACE,KAAK,CAAC,IAAI,IAAI,GAAG;QAPX,IAAA,CAAA,EAAE,GAAG,aAAa;QAClB,IAAA,CAAA,EAAE,GAAG,aAAa;QAClB,IAAA,CAAA,EAAE,GAAG,aAAa;QAClB,IAAA,CAAA,EAAE,GAAG,aAAa;QAClB,IAAA,CAAA,EAAE,GAAG,aAAa;IAI1B;IACU,MAAG;QACX,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI;QACnC,OAAO;YAAC;YAAI;YAAI;YAAI;YAAI;SAAG;IAC7B;IACU,IAAI,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAA;QACtE,IAAI,CAAC,EAAE,GAAG,KAAK;QACf,IAAI,CAAC,EAAE,GAAG,KAAK;QACf,IAAI,CAAC,EAAE,GAAG,KAAK;QACf,IAAI,CAAC,EAAE,GAAG,KAAK;QACf,IAAI,CAAC,EAAE,GAAG,KAAK;IACjB;IACU,QAAQ,IAAc,EAAE,MAAc,EAAA;QAC9C,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,KAAK,UAAU,EAAG,KAAK,CAAC,EAAE,GAAG,KAAK,SAAS,CAAC,QAAQ;QAC5E,kBAAkB;QAClB,IAAI,KAAK,IAAI,CAAC,EAAE,GAAG,GAAG,KAAK,IACvB,KAAK,IAAI,CAAC,EAAE,GAAG,GAAG,KAAK,IACvB,KAAK,IAAI,CAAC,EAAE,GAAG,GAAG,KAAK,IACvB,KAAK,IAAI,CAAC,EAAE,GAAG,GAAG,KAAK,IACvB,KAAK,IAAI,CAAC,EAAE,GAAG,GAAG,KAAK;QAE3B,0DAA0D;QAC1D,gEAAgE;QAChE,IAAK,IAAI,QAAQ,GAAG,QAAQ,GAAG,QAAS;YACtC,MAAM,SAAS,IAAI;YACnB,MAAM,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,MAAM,EAAE,kBAAkB;YAC1D,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC,MAAM,EAAE,kBAAkB;YAC5D,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE,KAAK,OAAO,CAAC,MAAM,EAAE,kBAAkB;YAClE,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;gBAC3B,MAAM,KAAK,AAAC,CAAA,GAAA,mJAAA,CAAA,OAAI,AAAJ,EAAK,KAAK,EAAE,OAAO,IAAI,IAAI,MAAM,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,IAAI,KAAM;gBAChF,KAAK,IAAI,KAAK,IAAI,KAAK,CAAA,GAAA,mJAAA,CAAA,OAAI,AAAJ,EAAK,IAAI,MAAM,GAAG,KAAK,IAAI,KAAK,IAAI,kBAAkB;YAC/E;YACA,yBAAyB;YACzB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;gBAC3B,MAAM,KAAK,AAAC,CAAA,GAAA,mJAAA,CAAA,OAAI,AAAJ,EAAK,KAAK,EAAE,QAAQ,IAAI,IAAI,MAAM,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,IAAI,KAAM;gBACjF,KAAK,IAAI,KAAK,IAAI,KAAK,CAAA,GAAA,mJAAA,CAAA,OAAI,AAAJ,EAAK,IAAI,MAAM,GAAG,KAAK,IAAI,KAAK,IAAI,kBAAkB;YAC/E;QACF;QACA,qDAAqD;QACrD,IAAI,CAAC,GAAG,CACN,AAAC,IAAI,CAAC,EAAE,GAAG,KAAK,KAAM,GACtB,AAAC,IAAI,CAAC,EAAE,GAAG,KAAK,KAAM,GACtB,AAAC,IAAI,CAAC,EAAE,GAAG,KAAK,KAAM,GACtB,AAAC,IAAI,CAAC,EAAE,GAAG,KAAK,KAAM,GACtB,AAAC,IAAI,CAAC,EAAE,GAAG,KAAK,KAAM;IAE1B;IACU,aAAU;QAClB,MAAM,IAAI,CAAC;IACb;IACA,UAAO;QACL,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;IACvB;;AAOK,MAAM,YAAY,aAAA,GAAgB,CAAA,GAAA,mJAAA,CAAA,kBAAe,AAAf,EAAgB,IAAM,IAAI"}},
    {"offset": {"line": 2049, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2054, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/sha256.ts"],"sourcesContent":["import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2250, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2255, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@noble/hashes/src/pbkdf2.ts"],"sourcesContent":["import { hash as assertHash, number as assertNumber } from './_assert.js';\nimport { hmac } from './hmac.js';\nimport { Hash, CHash, Input, createView, toBytes, checkOpts, asyncLoop } from './utils.js';\n\n// PBKDF (RFC 2898)\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: Input, _salt: Input, _opts: Pbkdf2Opt) {\n  assertHash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  assertNumber(c);\n  assertNumber(dkLen);\n  assertNumber(asyncTick);\n  if (c < 1) throw new Error('PBKDF2: iterations (c) should be >= 1');\n  const password = toBytes(_password);\n  const salt = toBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  u.fill(0);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nexport function pbkdf2(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\nexport async function pbkdf2Async(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, () => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2347, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}