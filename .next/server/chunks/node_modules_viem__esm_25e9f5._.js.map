{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/abi/formatAbiItem.ts"],"sourcesContent":["import type { AbiParameter } from 'abitype'\n\nimport {\n  InvalidDefinitionTypeError,\n  type InvalidDefinitionTypeErrorType,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { AbiItem } from '../../types/contract.js'\n\nexport type FormatAbiItemErrorType =\n  | FormatAbiParamsErrorType\n  | InvalidDefinitionTypeErrorType\n  | ErrorType\n\nexport function formatAbiItem(\n  abiItem: AbiItem,\n  { includeName = false }: { includeName?: boolean | undefined } = {},\n) {\n  if (\n    abiItem.type !== 'function' &&\n    abiItem.type !== 'event' &&\n    abiItem.type !== 'error'\n  )\n    throw new InvalidDefinitionTypeError(abiItem.type)\n\n  return `${abiItem.name}(${formatAbiParams(abiItem.inputs, { includeName })})`\n}\n\nexport type FormatAbiParamsErrorType = ErrorType\n\nexport function formatAbiParams(\n  params: readonly AbiParameter[] | undefined,\n  { includeName = false }: { includeName?: boolean | undefined } = {},\n): string {\n  if (!params) return ''\n  return params\n    .map((param) => formatAbiParam(param, { includeName }))\n    .join(includeName ? ', ' : ',')\n}\n\nexport type FormatAbiParamErrorType = ErrorType\n\nfunction formatAbiParam(\n  param: AbiParameter,\n  { includeName }: { includeName: boolean },\n): string {\n  if (param.type.startsWith('tuple')) {\n    return `(${formatAbiParams(\n      (param as unknown as { components: AbiParameter[] }).components,\n      { includeName },\n    )})${param.type.slice('tuple'.length)}`\n  }\n  return param.type + (includeName && param.name ? ` ${param.name}` : '')\n}\n"],"names":[],"mappings":";;;;;;;AAcM,SAAU,cACd,OAAgB,EAChB,EAAE,cAAc,KAAK,EAAA,GAA4C,CAAA,CAAE;IAEnE,IACE,QAAQ,IAAI,KAAK,cACjB,QAAQ,IAAI,KAAK,WACjB,QAAQ,IAAI,KAAK,SAEjB,MAAM,IAAI,+IAAA,CAAA,6BAA0B,CAAC,QAAQ,IAAI;IAEnD,OAAO,CAAA,EAAG,QAAQ,IAAI,CAAA,CAAA,EAAI,gBAAgB,QAAQ,MAAM,EAAE;QAAE;IAAW,GAAG,CAAA,CAAG;AAC/E;AAIM,SAAU,gBACd,MAA2C,EAC3C,EAAE,cAAc,KAAK,EAAA,GAA4C,CAAA,CAAE;IAEnE,IAAI,CAAC,QAAQ,OAAO;IACpB,OAAO,OACJ,GAAG,CAAC,CAAC,QAAU,eAAe,OAAO;YAAE;QAAW,IAClD,IAAI,CAAC,cAAc,OAAO;AAC/B;AAIA,SAAS,eACP,KAAmB,EACnB,EAAE,WAAW,EAA4B;IAEzC,IAAI,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU;QAClC,OAAO,CAAA,CAAA,EAAI,gBACR,MAAoD,UAAU,EAC/D;YAAE;QAAW,GACd,CAAA,EAAI,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,MAAM,EAAC,CAAE;IACzC;IACA,OAAO,MAAM,IAAI,GAAG,CAAC,eAAe,MAAM,IAAI,GAAG,CAAA,CAAA,EAAI,MAAM,IAAI,CAAA,CAAE,GAAG,EAAE;AACxE"}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/data/isHex.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\n\nexport type IsHexErrorType = ErrorType\n\nexport function isHex(\n  value: unknown,\n  { strict = true }: { strict?: boolean | undefined } = {},\n): value is Hex {\n  if (!value) return false\n  if (typeof value !== 'string') return false\n  return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith('0x')\n}\n"],"names":[],"mappings":";;;AAKM,SAAU,MACd,KAAc,EACd,EAAE,SAAS,IAAI,EAAA,GAAuC,CAAA,CAAE;IAExD,IAAI,CAAC,OAAO,OAAO;IACnB,IAAI,OAAO,UAAU,UAAU,OAAO;IACtC,OAAO,SAAS,mBAAmB,IAAI,CAAC,SAAS,MAAM,UAAU,CAAC;AACpE"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/data/size.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport { type IsHexErrorType, isHex } from './isHex.js'\n\nexport type SizeErrorType = IsHexErrorType | ErrorType\n\n/**\n * @description Retrieves the size of the value (in bytes).\n *\n * @param value The value (hex or byte array) to retrieve the size of.\n * @returns The size of the value (in bytes).\n */\nexport function size(value: Hex | ByteArray) {\n  if (isHex(value, { strict: false })) return Math.ceil((value.length - 2) / 2)\n  return value.length\n}\n"],"names":[],"mappings":";;;;;;AAaM,SAAU,KAAK,KAAsB;IACzC,IAAI,CAAA,GAAA,wJAAA,CAAA,QAAK,AAAL,EAAM,OAAO;QAAE,QAAQ;IAAK,IAAK,OAAO,KAAK,IAAI,CAAC,CAAC,MAAM,MAAM,GAAG,CAAC,IAAI;IAC3E,OAAO,MAAM,MAAM;AACrB"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/errors/version.ts"],"sourcesContent":["export const version = '2.17.3'\n"],"names":[],"mappings":";;;AAAO,MAAM,UAAU"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/errors/utils.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport { version } from './version.js'\n\nexport type ErrorType<name extends string = 'Error'> = Error & { name: name }\n\nexport const getContractAddress = (address: Address) => address\nexport const getUrl = (url: string) => url\nexport const getVersion = () => `viem@${version}`\n"],"names":[],"mappings":";;;;;;;;AAMO,MAAM,qBAAqB,CAAC,UAAqB;AACjD,MAAM,SAAS,CAAC,MAAgB;AAChC,MAAM,aAAa,IAAM,CAAA,KAAA,EAAQ,mJAAA,CAAA,UAAO,CAAA,CAAE"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/errors/base.ts"],"sourcesContent":["import { getVersion } from './utils.js'\n\ntype BaseErrorParameters = {\n  cause?: BaseError | Error | undefined\n  details?: string | undefined\n  docsBaseUrl?: string | undefined\n  docsPath?: string | undefined\n  docsSlug?: string | undefined\n  metaMessages?: string[] | undefined\n}\n\nexport type BaseErrorType = BaseError & { name: 'ViemError' }\nexport class BaseError extends Error {\n  details: string\n  docsPath?: string | undefined\n  metaMessages?: string[] | undefined\n  shortMessage: string\n\n  override name = 'ViemError'\n  version = getVersion()\n\n  constructor(shortMessage: string, args: BaseErrorParameters = {}) {\n    super()\n\n    const details =\n      args.cause instanceof BaseError\n        ? args.cause.details\n        : args.cause?.message\n          ? args.cause.message\n          : args.details!\n    const docsPath =\n      args.cause instanceof BaseError\n        ? args.cause.docsPath || args.docsPath\n        : args.docsPath\n\n    this.message = [\n      shortMessage || 'An error occurred.',\n      '',\n      ...(args.metaMessages ? [...args.metaMessages, ''] : []),\n      ...(docsPath\n        ? [\n            `Docs: ${args.docsBaseUrl ?? 'https://viem.sh'}${docsPath}${\n              args.docsSlug ? `#${args.docsSlug}` : ''\n            }`,\n          ]\n        : []),\n      ...(details ? [`Details: ${details}`] : []),\n      `Version: ${this.version}`,\n    ].join('\\n')\n\n    if (args.cause) this.cause = args.cause\n    this.details = details\n    this.docsPath = docsPath\n    this.metaMessages = args.metaMessages\n    this.shortMessage = shortMessage\n  }\n\n  walk(): Error\n  walk(fn: (err: unknown) => boolean): Error | null\n  walk(fn?: any): any {\n    return walk(this, fn)\n  }\n}\n\nfunction walk(\n  err: unknown,\n  fn?: ((err: unknown) => boolean) | undefined,\n): unknown {\n  if (fn?.(err)) return err\n  if (err && typeof err === 'object' && 'cause' in err)\n    return walk(err.cause, fn)\n  return fn ? null : err\n}\n"],"names":[],"mappings":";;;;;;AAYM,MAAO,kBAAkB;IAS7B,YAAY,YAAoB,EAAE,OAA4B,CAAA,CAAE,CAAA;QAC9D,KAAK;QATP,OAAA,cAAA,CAAA,IAAA,EAAA,WAAA;;;;;;QACA,OAAA,cAAA,CAAA,IAAA,EAAA,YAAA;;;;;;QACA,OAAA,cAAA,CAAA,IAAA,EAAA,gBAAA;;;;;;QACA,OAAA,cAAA,CAAA,IAAA,EAAA,gBAAA;;;;;;QAES,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;QAChB,OAAA,cAAA,CAAA,IAAA,EAAA,WAAA;;;;mBAAU,CAAA,GAAA,iJAAA,CAAA,aAAU,AAAV;;QAKR,MAAM,UACJ,KAAK,KAAK,YAAY,YAClB,KAAK,KAAK,CAAC,OAAO,GAClB,KAAK,KAAK,EAAE,UACV,KAAK,KAAK,CAAC,OAAO,GAClB,KAAK,OAAQ;QACrB,MAAM,WACJ,KAAK,KAAK,YAAY,YAClB,KAAK,KAAK,CAAC,QAAQ,IAAI,KAAK,QAAQ,GACpC,KAAK,QAAQ;QAEnB,IAAI,CAAC,OAAO,GAAG;YACb,gBAAgB;YAChB;eACI,KAAK,YAAY,GAAG;mBAAI,KAAK,YAAY;gBAAE;aAAG,GAAG,EAAE;eACnD,WACA;gBACE,CAAA,MAAA,EAAS,KAAK,WAAW,IAAI,kBAAiB,EAAG,SAAQ,EACvD,KAAK,QAAQ,GAAG,CAAA,CAAA,EAAI,KAAK,QAAQ,CAAA,CAAE,GAAG,GACxC,CAAE;aACH,GACD,EAAE;eACF,UAAU;gBAAC,CAAA,SAAA,EAAY,QAAO,CAAE;aAAC,GAAG,EAAE;YAC1C,CAAA,SAAA,EAAY,IAAI,CAAC,OAAO,CAAA,CAAE;SAC3B,CAAC,IAAI,CAAC;QAEP,IAAI,KAAK,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,KAAK,KAAK;QACvC,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,YAAY,GAAG,KAAK,YAAY;QACrC,IAAI,CAAC,YAAY,GAAG;IACtB;IAIA,KAAK,EAAQ,EAAA;QACX,OAAO,KAAK,IAAI,EAAE;IACpB;;AAGF,SAAS,KACP,GAAY,EACZ,EAA4C;IAE5C,IAAI,KAAK,MAAM,OAAO;IACtB,IAAI,OAAO,OAAO,QAAQ,YAAY,WAAW,KAC/C,OAAO,KAAK,IAAI,KAAK,EAAE;IACzB,OAAO,KAAK,OAAO;AACrB"}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/errors/abi.ts"],"sourcesContent":["import type { Abi, AbiEvent, AbiParameter } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { formatAbiItem, formatAbiParams } from '../utils/abi/formatAbiItem.js'\nimport { size } from '../utils/data/size.js'\n\nimport { BaseError } from './base.js'\n\nexport type AbiConstructorNotFoundErrorType = AbiConstructorNotFoundError & {\n  name: 'AbiConstructorNotFoundError'\n}\nexport class AbiConstructorNotFoundError extends BaseError {\n  override name = 'AbiConstructorNotFoundError'\n  constructor({ docsPath }: { docsPath: string }) {\n    super(\n      [\n        'A constructor was not found on the ABI.',\n        'Make sure you are using the correct ABI and that the constructor exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiConstructorParamsNotFoundErrorType =\n  AbiConstructorParamsNotFoundError & {\n    name: 'AbiConstructorParamsNotFoundError'\n  }\n\nexport class AbiConstructorParamsNotFoundError extends BaseError {\n  override name = 'AbiConstructorParamsNotFoundError'\n  constructor({ docsPath }: { docsPath: string }) {\n    super(\n      [\n        'Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.',\n        'Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiDecodingDataSizeInvalidErrorType =\n  AbiDecodingDataSizeInvalidError & {\n    name: 'AbiDecodingDataSizeInvalidError'\n  }\nexport class AbiDecodingDataSizeInvalidError extends BaseError {\n  override name = 'AbiDecodingDataSizeInvalidError'\n  constructor({ data, size }: { data: Hex; size: number }) {\n    super(\n      [\n        `Data size of ${size} bytes is invalid.`,\n        'Size must be in increments of 32 bytes (size % 32 === 0).',\n      ].join('\\n'),\n      { metaMessages: [`Data: ${data} (${size} bytes)`] },\n    )\n  }\n}\n\nexport type AbiDecodingDataSizeTooSmallErrorType =\n  AbiDecodingDataSizeTooSmallError & {\n    name: 'AbiDecodingDataSizeTooSmallError'\n  }\nexport class AbiDecodingDataSizeTooSmallError extends BaseError {\n  override name = 'AbiDecodingDataSizeTooSmallError'\n\n  data: Hex\n  params: readonly AbiParameter[]\n  size: number\n\n  constructor({\n    data,\n    params,\n    size,\n  }: { data: Hex; params: readonly AbiParameter[]; size: number }) {\n    super(\n      [`Data size of ${size} bytes is too small for given parameters.`].join(\n        '\\n',\n      ),\n      {\n        metaMessages: [\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\n          `Data:   ${data} (${size} bytes)`,\n        ],\n      },\n    )\n\n    this.data = data\n    this.params = params\n    this.size = size\n  }\n}\n\nexport type AbiDecodingZeroDataErrorType = AbiDecodingZeroDataError & {\n  name: 'AbiDecodingZeroDataError'\n}\nexport class AbiDecodingZeroDataError extends BaseError {\n  override name = 'AbiDecodingZeroDataError'\n  constructor() {\n    super('Cannot decode zero data (\"0x\") with ABI parameters.')\n  }\n}\n\nexport type AbiEncodingArrayLengthMismatchErrorType =\n  AbiEncodingArrayLengthMismatchError & {\n    name: 'AbiEncodingArrayLengthMismatchError'\n  }\nexport class AbiEncodingArrayLengthMismatchError extends BaseError {\n  override name = 'AbiEncodingArrayLengthMismatchError'\n  constructor({\n    expectedLength,\n    givenLength,\n    type,\n  }: { expectedLength: number; givenLength: number; type: string }) {\n    super(\n      [\n        `ABI encoding array length mismatch for type ${type}.`,\n        `Expected length: ${expectedLength}`,\n        `Given length: ${givenLength}`,\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type AbiEncodingBytesSizeMismatchErrorType =\n  AbiEncodingBytesSizeMismatchError & {\n    name: 'AbiEncodingBytesSizeMismatchError'\n  }\nexport class AbiEncodingBytesSizeMismatchError extends BaseError {\n  override name = 'AbiEncodingBytesSizeMismatchError'\n  constructor({ expectedSize, value }: { expectedSize: number; value: Hex }) {\n    super(\n      `Size of bytes \"${value}\" (bytes${size(\n        value,\n      )}) does not match expected size (bytes${expectedSize}).`,\n    )\n  }\n}\n\nexport type AbiEncodingLengthMismatchErrorType =\n  AbiEncodingLengthMismatchError & {\n    name: 'AbiEncodingLengthMismatchError'\n  }\nexport class AbiEncodingLengthMismatchError extends BaseError {\n  override name = 'AbiEncodingLengthMismatchError'\n  constructor({\n    expectedLength,\n    givenLength,\n  }: { expectedLength: number; givenLength: number }) {\n    super(\n      [\n        'ABI encoding params/values length mismatch.',\n        `Expected length (params): ${expectedLength}`,\n        `Given length (values): ${givenLength}`,\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type AbiErrorInputsNotFoundErrorType = AbiErrorInputsNotFoundError & {\n  name: 'AbiErrorInputsNotFoundError'\n}\nexport class AbiErrorInputsNotFoundError extends BaseError {\n  override name = 'AbiErrorInputsNotFoundError'\n  constructor(errorName: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Arguments (\\`args\\`) were provided to \"${errorName}\", but \"${errorName}\" on the ABI does not contain any parameters (\\`inputs\\`).`,\n        'Cannot encode error result without knowing what the parameter types are.',\n        'Make sure you are using the correct ABI and that the inputs exist on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiErrorNotFoundErrorType = AbiErrorNotFoundError & {\n  name: 'AbiErrorNotFoundError'\n}\nexport class AbiErrorNotFoundError extends BaseError {\n  override name = 'AbiErrorNotFoundError'\n  constructor(\n    errorName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Error ${errorName ? `\"${errorName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiErrorSignatureNotFoundErrorType =\n  AbiErrorSignatureNotFoundError & {\n    name: 'AbiErrorSignatureNotFoundError'\n  }\nexport class AbiErrorSignatureNotFoundError extends BaseError {\n  override name = 'AbiErrorSignatureNotFoundError'\n\n  signature: Hex\n\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded error signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n        `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n    this.signature = signature\n  }\n}\n\nexport type AbiEventSignatureEmptyTopicsErrorType =\n  AbiEventSignatureEmptyTopicsError & {\n    name: 'AbiEventSignatureEmptyTopicsError'\n  }\nexport class AbiEventSignatureEmptyTopicsError extends BaseError {\n  override name = 'AbiEventSignatureEmptyTopicsError'\n  constructor({ docsPath }: { docsPath: string }) {\n    super('Cannot extract event signature from empty topics.', {\n      docsPath,\n    })\n  }\n}\n\nexport type AbiEventSignatureNotFoundErrorType =\n  AbiEventSignatureNotFoundError & {\n    name: 'AbiEventSignatureNotFoundError'\n  }\nexport class AbiEventSignatureNotFoundError extends BaseError {\n  override name = 'AbiEventSignatureNotFoundError'\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded event signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the event exists on it.',\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiEventNotFoundErrorType = AbiEventNotFoundError & {\n  name: 'AbiEventNotFoundError'\n}\nexport class AbiEventNotFoundError extends BaseError {\n  override name = 'AbiEventNotFoundError'\n  constructor(\n    eventName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Event ${eventName ? `\"${eventName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the event exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiFunctionNotFoundErrorType = AbiFunctionNotFoundError & {\n  name: 'AbiFunctionNotFoundError'\n}\nexport class AbiFunctionNotFoundError extends BaseError {\n  override name = 'AbiFunctionNotFoundError'\n  constructor(\n    functionName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Function ${functionName ? `\"${functionName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the function exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiFunctionOutputsNotFoundErrorType =\n  AbiFunctionOutputsNotFoundError & {\n    name: 'AbiFunctionOutputsNotFoundError'\n  }\nexport class AbiFunctionOutputsNotFoundError extends BaseError {\n  override name = 'AbiFunctionOutputsNotFoundError'\n  constructor(functionName: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Function \"${functionName}\" does not contain any \\`outputs\\` on ABI.`,\n        'Cannot decode function result without knowing what the parameter types are.',\n        'Make sure you are using the correct ABI and that the function exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiFunctionSignatureNotFoundErrorType =\n  AbiFunctionSignatureNotFoundError & {\n    name: 'AbiFunctionSignatureNotFoundError'\n  }\nexport class AbiFunctionSignatureNotFoundError extends BaseError {\n  override name = 'AbiFunctionSignatureNotFoundError'\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded function signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the function exists on it.',\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n      },\n    )\n  }\n}\n\nexport type AbiItemAmbiguityErrorType = AbiItemAmbiguityError & {\n  name: 'AbiItemAmbiguityError'\n}\nexport class AbiItemAmbiguityError extends BaseError {\n  override name = 'AbiItemAmbiguityError'\n  constructor(\n    x: { abiItem: Abi[number]; type: string },\n    y: { abiItem: Abi[number]; type: string },\n  ) {\n    super('Found ambiguous types in overloaded ABI items.', {\n      metaMessages: [\n        `\\`${x.type}\\` in \\`${formatAbiItem(x.abiItem)}\\`, and`,\n        `\\`${y.type}\\` in \\`${formatAbiItem(y.abiItem)}\\``,\n        '',\n        'These types encode differently and cannot be distinguished at runtime.',\n        'Remove one of the ambiguous items in the ABI.',\n      ],\n    })\n  }\n}\n\nexport type BytesSizeMismatchErrorType = BytesSizeMismatchError & {\n  name: 'BytesSizeMismatchError'\n}\nexport class BytesSizeMismatchError extends BaseError {\n  override name = 'BytesSizeMismatchError'\n  constructor({\n    expectedSize,\n    givenSize,\n  }: { expectedSize: number; givenSize: number }) {\n    super(`Expected bytes${expectedSize}, got bytes${givenSize}.`)\n  }\n}\n\nexport type DecodeLogDataMismatchErrorType = DecodeLogDataMismatch & {\n  name: 'DecodeLogDataMismatch'\n}\nexport class DecodeLogDataMismatch extends BaseError {\n  override name = 'DecodeLogDataMismatch'\n\n  abiItem: AbiEvent\n  data: Hex\n  params: readonly AbiParameter[]\n  size: number\n\n  constructor({\n    abiItem,\n    data,\n    params,\n    size,\n  }: {\n    abiItem: AbiEvent\n    data: Hex\n    params: readonly AbiParameter[]\n    size: number\n  }) {\n    super(\n      [\n        `Data size of ${size} bytes is too small for non-indexed event parameters.`,\n      ].join('\\n'),\n      {\n        metaMessages: [\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\n          `Data:   ${data} (${size} bytes)`,\n        ],\n      },\n    )\n\n    this.abiItem = abiItem\n    this.data = data\n    this.params = params\n    this.size = size\n  }\n}\n\nexport type DecodeLogTopicsMismatchErrorType = DecodeLogTopicsMismatch & {\n  name: 'DecodeLogTopicsMismatch'\n}\nexport class DecodeLogTopicsMismatch extends BaseError {\n  override name = 'DecodeLogTopicsMismatch'\n\n  abiItem: AbiEvent\n\n  constructor({\n    abiItem,\n    param,\n  }: {\n    abiItem: AbiEvent\n    param: AbiParameter & { indexed: boolean }\n  }) {\n    super(\n      [\n        `Expected a topic for indexed event parameter${\n          param.name ? ` \"${param.name}\"` : ''\n        } on event \"${formatAbiItem(abiItem, { includeName: true })}\".`,\n      ].join('\\n'),\n    )\n\n    this.abiItem = abiItem\n  }\n}\n\nexport type InvalidAbiEncodingTypeErrorType = InvalidAbiEncodingTypeError & {\n  name: 'InvalidAbiEncodingTypeError'\n}\nexport class InvalidAbiEncodingTypeError extends BaseError {\n  override name = 'InvalidAbiEncodingType'\n  constructor(type: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Type \"${type}\" is not a valid encoding type.`,\n        'Please provide a valid ABI type.',\n      ].join('\\n'),\n      { docsPath },\n    )\n  }\n}\n\nexport type InvalidAbiDecodingTypeErrorType = InvalidAbiDecodingTypeError & {\n  name: 'InvalidAbiDecodingTypeError'\n}\nexport class InvalidAbiDecodingTypeError extends BaseError {\n  override name = 'InvalidAbiDecodingType'\n  constructor(type: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Type \"${type}\" is not a valid decoding type.`,\n        'Please provide a valid ABI type.',\n      ].join('\\n'),\n      { docsPath },\n    )\n  }\n}\n\nexport type InvalidArrayErrorType = InvalidArrayError & {\n  name: 'InvalidArrayError'\n}\nexport class InvalidArrayError extends BaseError {\n  override name = 'InvalidArrayError'\n  constructor(value: unknown) {\n    super([`Value \"${value}\" is not a valid array.`].join('\\n'))\n  }\n}\n\nexport type InvalidDefinitionTypeErrorType = InvalidDefinitionTypeError & {\n  name: 'InvalidDefinitionTypeError'\n}\nexport class InvalidDefinitionTypeError extends BaseError {\n  override name = 'InvalidDefinitionTypeError'\n  constructor(type: string) {\n    super(\n      [\n        `\"${type}\" is not a valid definition type.`,\n        'Valid types: \"function\", \"event\", \"error\"',\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type UnsupportedPackedAbiTypeErrorType = UnsupportedPackedAbiType & {\n  name: 'UnsupportedPackedAbiType'\n}\nexport class UnsupportedPackedAbiType extends BaseError {\n  override name = 'UnsupportedPackedAbiType'\n  constructor(type: unknown) {\n    super(`Type \"${type}\" is not supported for packed encoding.`)\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 675, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 680, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/data/concat.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nexport type ConcatReturnType<TValue extends Hex | ByteArray> =\n  TValue extends Hex ? Hex : ByteArray\n\nexport type ConcatErrorType =\n  | ConcatBytesErrorType\n  | ConcatHexErrorType\n  | ErrorType\n\nexport function concat<TValue extends Hex | ByteArray>(\n  values: readonly TValue[],\n): ConcatReturnType<TValue> {\n  if (typeof values[0] === 'string')\n    return concatHex(values as readonly Hex[]) as ConcatReturnType<TValue>\n  return concatBytes(values as readonly ByteArray[]) as ConcatReturnType<TValue>\n}\n\nexport type ConcatBytesErrorType = ErrorType\n\nexport function concatBytes(values: readonly ByteArray[]): ByteArray {\n  let length = 0\n  for (const arr of values) {\n    length += arr.length\n  }\n  const result = new Uint8Array(length)\n  let offset = 0\n  for (const arr of values) {\n    result.set(arr, offset)\n    offset += arr.length\n  }\n  return result\n}\n\nexport type ConcatHexErrorType = ErrorType\n\nexport function concatHex(values: readonly Hex[]): Hex {\n  return `0x${(values as Hex[]).reduce(\n    (acc, x) => acc + x.replace('0x', ''),\n    '',\n  )}`\n}\n"],"names":[],"mappings":";;;;;AAWM,SAAU,OACd,MAAyB;IAEzB,IAAI,OAAO,MAAM,CAAC,EAAE,KAAK,UACvB,OAAO,UAAU;IACnB,OAAO,YAAY;AACrB;AAIM,SAAU,YAAY,MAA4B;IACtD,IAAI,SAAS;IACb,KAAK,MAAM,OAAO,OAAQ;QACxB,UAAU,IAAI,MAAM;IACtB;IACA,MAAM,SAAS,IAAI,WAAW;IAC9B,IAAI,SAAS;IACb,KAAK,MAAM,OAAO,OAAQ;QACxB,OAAO,GAAG,CAAC,KAAK;QAChB,UAAU,IAAI,MAAM;IACtB;IACA,OAAO;AACT;AAIM,SAAU,UAAU,MAAsB;IAC9C,OAAO,CAAA,EAAA,EAAM,OAAiB,MAAM,CAClC,CAAC,KAAK,IAAM,MAAM,EAAE,OAAO,CAAC,MAAM,KAClC,IACD,CAAE;AACL"}},
    {"offset": {"line": 705, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 710, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/errors/address.ts"],"sourcesContent":["import { BaseError } from './base.js'\n\nexport type InvalidAddressErrorType = InvalidAddressError & {\n  name: 'InvalidAddressError'\n}\nexport class InvalidAddressError extends BaseError {\n  override name = 'InvalidAddressError'\n  constructor({ address }: { address: string }) {\n    super(`Address \"${address}\" is invalid.`, {\n      metaMessages: [\n        '- Address must be a hex value of 20 bytes (40 hex characters).',\n        '- Address must match its checksum counterpart.',\n      ],\n    })\n  }\n}\n"],"names":[],"mappings":";;;;;;AAKM,MAAO,4BAA4B,gJAAA,CAAA,YAAS;IAEhD,YAAY,EAAE,OAAO,EAAuB,CAAA;QAC1C,KAAK,CAAC,CAAA,SAAA,EAAY,QAAO,aAAA,CAAe,EAAE;YACxC,cAAc;gBACZ;gBACA;aACD;;QANI,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAQhB"}},
    {"offset": {"line": 732, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 737, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/lru.ts"],"sourcesContent":["/**\n * Map with a LRU (Least recently used) policy.\n *\n * @link https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */\nexport class LruMap<value = unknown> extends Map<string, value> {\n  maxSize: number\n\n  constructor(size: number) {\n    super()\n    this.maxSize = size\n  }\n\n  override set(key: string, value: value) {\n    super.set(key, value)\n    if (this.maxSize && this.size > this.maxSize)\n      this.delete(this.keys().next().value)\n    return this\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;AAKM,MAAO,eAAgC;IAG3C,YAAY,IAAY,CAAA;QACtB,KAAK;QAHP,OAAA,cAAA,CAAA,IAAA,EAAA,WAAA;;;;;;QAIE,IAAI,CAAC,OAAO,GAAG;IACjB;IAES,IAAI,GAAW,EAAE,KAAY,EAAA;QACpC,KAAK,CAAC,IAAI,KAAK;QACf,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,EAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,KAAK;QACtC,OAAO,IAAI;IACb"}},
    {"offset": {"line": 761, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 766, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/errors/data.ts"],"sourcesContent":["import { BaseError } from './base.js'\n\nexport type SliceOffsetOutOfBoundsErrorType = SliceOffsetOutOfBoundsError & {\n  name: 'SliceOffsetOutOfBoundsError'\n}\nexport class SliceOffsetOutOfBoundsError extends BaseError {\n  override name = 'SliceOffsetOutOfBoundsError'\n  constructor({\n    offset,\n    position,\n    size,\n  }: { offset: number; position: 'start' | 'end'; size: number }) {\n    super(\n      `Slice ${\n        position === 'start' ? 'starting' : 'ending'\n      } at offset \"${offset}\" is out-of-bounds (size: ${size}).`,\n    )\n  }\n}\n\nexport type SizeExceedsPaddingSizeErrorType = SizeExceedsPaddingSizeError & {\n  name: 'SizeExceedsPaddingSizeError'\n}\nexport class SizeExceedsPaddingSizeError extends BaseError {\n  override name = 'SizeExceedsPaddingSizeError'\n  constructor({\n    size,\n    targetSize,\n    type,\n  }: {\n    size: number\n    targetSize: number\n    type: 'hex' | 'bytes'\n  }) {\n    super(\n      `${type.charAt(0).toUpperCase()}${type\n        .slice(1)\n        .toLowerCase()} size (${size}) exceeds padding size (${targetSize}).`,\n    )\n  }\n}\n\nexport type InvalidBytesLengthErrorType = InvalidBytesLengthError & {\n  name: 'InvalidBytesLengthError'\n}\nexport class InvalidBytesLengthError extends BaseError {\n  override name = 'InvalidBytesLengthError'\n  constructor({\n    size,\n    targetSize,\n    type,\n  }: {\n    size: number\n    targetSize: number\n    type: 'hex' | 'bytes'\n  }) {\n    super(\n      `${type.charAt(0).toUpperCase()}${type\n        .slice(1)\n        .toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size} ${type} long.`,\n    )\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAKM,MAAO,oCAAoC,gJAAA,CAAA,YAAS;IAExD,YAAY,EACV,MAAM,EACN,QAAQ,EACR,IAAI,EACwD,CAAA;QAC5D,KAAK,CACH,CAAA,MAAA,EACE,aAAa,UAAU,aAAa,SACtC,YAAA,EAAe,OAAM,0BAAA,EAA6B,KAAI,EAAA,CAAI;QATrD,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAWhB;;AAMI,MAAO,oCAAoC,gJAAA,CAAA,YAAS;IAExD,YAAY,EACV,IAAI,EACJ,UAAU,EACV,IAAI,EAKL,CAAA;QACC,KAAK,CACH,CAAA,EAAG,KAAK,MAAM,CAAC,GAAG,WAAW,GAAE,EAAG,KAC/B,KAAK,CAAC,GACN,WAAW,GAAE,OAAA,EAAU,KAAI,wBAAA,EAA2B,WAAU,EAAA,CAAI;QAblE,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAehB;;AAMI,MAAO,gCAAgC,gJAAA,CAAA,YAAS;IAEpD,YAAY,EACV,IAAI,EACJ,UAAU,EACV,IAAI,EAKL,CAAA;QACC,KAAK,CACH,CAAA,EAAG,KAAK,MAAM,CAAC,GAAG,WAAW,GAAE,EAAG,KAC/B,KAAK,CAAC,GACN,WAAW,GAAE,mBAAA,EAAsB,WAAU,CAAA,EAAI,KAAI,cAAA,EAAiB,KAAI,CAAA,EAAI,KAAI,MAAA,CAAQ;QAbxF,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAehB"}},
    {"offset": {"line": 807, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 812, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/data/pad.ts"],"sourcesContent":["import {\n  SizeExceedsPaddingSizeError,\n  type SizeExceedsPaddingSizeErrorType,\n} from '../../errors/data.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\ntype PadOptions = {\n  dir?: 'left' | 'right' | undefined\n  size?: number | null | undefined\n}\nexport type PadReturnType<TValue extends ByteArray | Hex> = TValue extends Hex\n  ? Hex\n  : ByteArray\n\nexport type PadErrorType = PadHexErrorType | PadBytesErrorType | ErrorType\n\nexport function pad<TValue extends ByteArray | Hex>(\n  hexOrBytes: TValue,\n  { dir, size = 32 }: PadOptions = {},\n): PadReturnType<TValue> {\n  if (typeof hexOrBytes === 'string')\n    return padHex(hexOrBytes, { dir, size }) as PadReturnType<TValue>\n  return padBytes(hexOrBytes, { dir, size }) as PadReturnType<TValue>\n}\n\nexport type PadHexErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\n\nexport function padHex(hex_: Hex, { dir, size = 32 }: PadOptions = {}) {\n  if (size === null) return hex_\n  const hex = hex_.replace('0x', '')\n  if (hex.length > size * 2)\n    throw new SizeExceedsPaddingSizeError({\n      size: Math.ceil(hex.length / 2),\n      targetSize: size,\n      type: 'hex',\n    })\n\n  return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](\n    size * 2,\n    '0',\n  )}` as Hex\n}\n\nexport type PadBytesErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\n\nexport function padBytes(\n  bytes: ByteArray,\n  { dir, size = 32 }: PadOptions = {},\n) {\n  if (size === null) return bytes\n  if (bytes.length > size)\n    throw new SizeExceedsPaddingSizeError({\n      size: bytes.length,\n      targetSize: size,\n      type: 'bytes',\n    })\n  const paddedBytes = new Uint8Array(size)\n  for (let i = 0; i < size; i++) {\n    const padEnd = dir === 'right'\n    paddedBytes[padEnd ? i : size - i - 1] =\n      bytes[padEnd ? i : bytes.length - i - 1]\n  }\n  return paddedBytes\n}\n"],"names":[],"mappings":";;;;;;;;AAiBM,SAAU,IACd,UAAkB,EAClB,EAAE,GAAG,EAAE,OAAO,EAAE,EAAA,GAAiB,CAAA,CAAE;IAEnC,IAAI,OAAO,eAAe,UACxB,OAAO,OAAO,YAAY;QAAE;QAAK;IAAI;IACvC,OAAO,SAAS,YAAY;QAAE;QAAK;IAAI;AACzC;AAIM,SAAU,OAAO,IAAS,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,EAAA,GAAiB,CAAA,CAAE;IACnE,IAAI,SAAS,MAAM,OAAO;IAC1B,MAAM,MAAM,KAAK,OAAO,CAAC,MAAM;IAC/B,IAAI,IAAI,MAAM,GAAG,OAAO,GACtB,MAAM,IAAI,gJAAA,CAAA,8BAA2B,CAAC;QACpC,MAAM,KAAK,IAAI,CAAC,IAAI,MAAM,GAAG;QAC7B,YAAY;QACZ,MAAM;;IAGV,OAAO,CAAA,EAAA,EAAK,GAAG,CAAC,QAAQ,UAAU,WAAW,WAAW,CACtD,OAAO,GACP,KACD,CAAS;AACZ;AAIM,SAAU,SACd,KAAgB,EAChB,EAAE,GAAG,EAAE,OAAO,EAAE,EAAA,GAAiB,CAAA,CAAE;IAEnC,IAAI,SAAS,MAAM,OAAO;IAC1B,IAAI,MAAM,MAAM,GAAG,MACjB,MAAM,IAAI,gJAAA,CAAA,8BAA2B,CAAC;QACpC,MAAM,MAAM,MAAM;QAClB,YAAY;QACZ,MAAM;;IAEV,MAAM,cAAc,IAAI,WAAW;IACnC,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,IAAK;QAC7B,MAAM,SAAS,QAAQ;QACvB,WAAW,CAAC,SAAS,IAAI,OAAO,IAAI,EAAE,GACpC,KAAK,CAAC,SAAS,IAAI,MAAM,MAAM,GAAG,IAAI,EAAE;IAC5C;IACA,OAAO;AACT"}},
    {"offset": {"line": 854, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 859, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/errors/encoding.ts"],"sourcesContent":["import type { ByteArray, Hex } from '../types/misc.js'\n\nimport { BaseError } from './base.js'\n\nexport type IntegerOutOfRangeErrorType = IntegerOutOfRangeError & {\n  name: 'IntegerOutOfRangeError'\n}\nexport class IntegerOutOfRangeError extends BaseError {\n  override name = 'IntegerOutOfRangeError'\n  constructor({\n    max,\n    min,\n    signed,\n    size,\n    value,\n  }: {\n    max?: string | undefined\n    min: string\n    signed?: boolean | undefined\n    size?: number | undefined\n    value: string\n  }) {\n    super(\n      `Number \"${value}\" is not in safe ${\n        size ? `${size * 8}-bit ${signed ? 'signed' : 'unsigned'} ` : ''\n      }integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`,\n    )\n  }\n}\n\nexport type InvalidBytesBooleanErrorType = InvalidBytesBooleanError & {\n  name: 'InvalidBytesBooleanError'\n}\nexport class InvalidBytesBooleanError extends BaseError {\n  override name = 'InvalidBytesBooleanError'\n  constructor(bytes: ByteArray) {\n    super(\n      `Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`,\n    )\n  }\n}\n\nexport type InvalidHexBooleanErrorType = InvalidHexBooleanError & {\n  name: 'InvalidHexBooleanError'\n}\nexport class InvalidHexBooleanError extends BaseError {\n  override name = 'InvalidHexBooleanError'\n  constructor(hex: Hex) {\n    super(\n      `Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`,\n    )\n  }\n}\n\nexport type InvalidHexValueErrorType = InvalidHexValueError & {\n  name: 'InvalidHexValueError'\n}\nexport class InvalidHexValueError extends BaseError {\n  override name = 'InvalidHexValueError'\n  constructor(value: Hex) {\n    super(\n      `Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`,\n    )\n  }\n}\n\nexport type SizeOverflowErrorType = SizeOverflowError & {\n  name: 'SizeOverflowError'\n}\nexport class SizeOverflowError extends BaseError {\n  override name = 'SizeOverflowError' as const\n  constructor({ givenSize, maxSize }: { givenSize: number; maxSize: number }) {\n    super(\n      `Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`,\n    )\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAOM,MAAO,+BAA+B,gJAAA,CAAA,YAAS;IAEnD,YAAY,EACV,GAAG,EACH,GAAG,EACH,MAAM,EACN,IAAI,EACJ,KAAK,EAON,CAAA;QACC,KAAK,CACH,CAAA,QAAA,EAAW,MAAK,iBAAA,EACd,OAAO,CAAA,EAAG,OAAO,EAAC,KAAA,EAAQ,SAAS,WAAW,WAAU,CAAA,CAAG,GAAG,GAChE,cAAA,EAAiB,MAAM,CAAA,CAAA,EAAI,IAAG,IAAA,EAAO,IAAG,CAAA,CAAG,GAAG,CAAA,OAAA,EAAU,IAAG,CAAA,CAAG,CAAA,CAAE;QAjB3D,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAmBhB;;AAMI,MAAO,iCAAiC,gJAAA,CAAA,YAAS;IAErD,YAAY,KAAgB,CAAA;QAC1B,KAAK,CACH,CAAA,aAAA,EAAgB,MAAK,8FAAA,CAAgG;QAHhH,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAKhB;;AAMI,MAAO,+BAA+B,gJAAA,CAAA,YAAS;IAEnD,YAAY,GAAQ,CAAA;QAClB,KAAK,CACH,CAAA,WAAA,EAAc,IAAG,8EAAA,CAAgF;QAH5F,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAKhB;;AAMI,MAAO,6BAA6B,gJAAA,CAAA,YAAS;IAEjD,YAAY,KAAU,CAAA;QACpB,KAAK,CACH,CAAA,WAAA,EAAc,MAAK,oBAAA,EAAuB,MAAM,MAAM,CAAA,6BAAA,CAA+B;QAHhF,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAKhB;;AAMI,MAAO,0BAA0B,gJAAA,CAAA,YAAS;IAE9C,YAAY,EAAE,SAAS,EAAE,OAAO,EAA0C,CAAA;QACxE,KAAK,CACH,CAAA,mBAAA,EAAsB,QAAO,oBAAA,EAAuB,UAAS,OAAA,CAAS;QAHjE,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAKhB"}},
    {"offset": {"line": 924, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 929, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/data/trim.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\ntype TrimOptions = {\n  dir?: 'left' | 'right' | undefined\n}\nexport type TrimReturnType<TValue extends ByteArray | Hex> = TValue extends Hex\n  ? Hex\n  : ByteArray\n\nexport type TrimErrorType = ErrorType\n\nexport function trim<TValue extends ByteArray | Hex>(\n  hexOrBytes: TValue,\n  { dir = 'left' }: TrimOptions = {},\n): TrimReturnType<TValue> {\n  let data: any =\n    typeof hexOrBytes === 'string' ? hexOrBytes.replace('0x', '') : hexOrBytes\n\n  let sliceLength = 0\n  for (let i = 0; i < data.length - 1; i++) {\n    if (data[dir === 'left' ? i : data.length - i - 1].toString() === '0')\n      sliceLength++\n    else break\n  }\n  data =\n    dir === 'left'\n      ? data.slice(sliceLength)\n      : data.slice(0, data.length - sliceLength)\n\n  if (typeof hexOrBytes === 'string') {\n    if (data.length === 1 && dir === 'right') data = `${data}0`\n    return `0x${\n      data.length % 2 === 1 ? `0${data}` : data\n    }` as TrimReturnType<TValue>\n  }\n  return data as TrimReturnType<TValue>\n}\n"],"names":[],"mappings":";;;AAYM,SAAU,KACd,UAAkB,EAClB,EAAE,MAAM,MAAM,EAAA,GAAkB,CAAA,CAAE;IAElC,IAAI,OACF,OAAO,eAAe,WAAW,WAAW,OAAO,CAAC,MAAM,MAAM;IAElE,IAAI,cAAc;IAClB,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,GAAG,GAAG,IAAK;QACxC,IAAI,IAAI,CAAC,QAAQ,SAAS,IAAI,KAAK,MAAM,GAAG,IAAI,EAAE,CAAC,QAAQ,OAAO,KAChE;aACG;IACP;IACA,OACE,QAAQ,SACJ,KAAK,KAAK,CAAC,eACX,KAAK,KAAK,CAAC,GAAG,KAAK,MAAM,GAAG;IAElC,IAAI,OAAO,eAAe,UAAU;QAClC,IAAI,KAAK,MAAM,KAAK,KAAK,QAAQ,SAAS,OAAO,CAAA,EAAG,KAAI,CAAA,CAAG;QAC3D,OAAO,CAAA,EAAA,EACL,KAAK,MAAM,GAAG,MAAM,IAAI,CAAA,CAAA,EAAI,KAAI,CAAE,GAAG,KACvC,CAA4B;IAC9B;IACA,OAAO;AACT"}},
    {"offset": {"line": 946, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 951, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/encoding/fromHex.ts"],"sourcesContent":["import {\n  InvalidHexBooleanError,\n  type InvalidHexBooleanErrorType,\n  SizeOverflowError,\n  type SizeOverflowErrorType,\n} from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type SizeErrorType, size as size_ } from '../data/size.js'\nimport { type TrimErrorType, trim } from '../data/trim.js'\n\nimport { type HexToBytesErrorType, hexToBytes } from './toBytes.js'\n\nexport type AssertSizeErrorType =\n  | SizeOverflowErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function assertSize(\n  hexOrBytes: Hex | ByteArray,\n  { size }: { size: number },\n): void {\n  if (size_(hexOrBytes) > size)\n    throw new SizeOverflowError({\n      givenSize: size_(hexOrBytes),\n      maxSize: size,\n    })\n}\n\nexport type FromHexParameters<\n  TTo extends 'string' | 'bigint' | 'number' | 'bytes' | 'boolean',\n> =\n  | TTo\n  | {\n      /** Size (in bytes) of the hex value. */\n      size?: number | undefined\n      /** Type to convert to. */\n      to: TTo\n    }\n\nexport type FromHexReturnType<TTo> = TTo extends 'string'\n  ? string\n  : TTo extends 'bigint'\n    ? bigint\n    : TTo extends 'number'\n      ? number\n      : TTo extends 'bytes'\n        ? ByteArray\n        : TTo extends 'boolean'\n          ? boolean\n          : never\n\nexport type FromHexErrorType =\n  | HexToNumberErrorType\n  | HexToBigIntErrorType\n  | HexToBoolErrorType\n  | HexToStringErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Decodes a hex string into a string, number, bigint, boolean, or byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex\n * - Example: https://viem.sh/docs/utilities/fromHex#usage\n *\n * @param hex Hex string to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x1a4', 'number')\n * // 420\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c6421', 'string')\n * // 'Hello world'\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *   size: 32,\n *   to: 'string'\n * })\n * // 'Hello world'\n */\nexport function fromHex<\n  TTo extends 'string' | 'bigint' | 'number' | 'bytes' | 'boolean',\n>(hex: Hex, toOrOpts: FromHexParameters<TTo>): FromHexReturnType<TTo> {\n  const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts\n  const to = opts.to\n\n  if (to === 'number') return hexToNumber(hex, opts) as FromHexReturnType<TTo>\n  if (to === 'bigint') return hexToBigInt(hex, opts) as FromHexReturnType<TTo>\n  if (to === 'string') return hexToString(hex, opts) as FromHexReturnType<TTo>\n  if (to === 'boolean') return hexToBool(hex, opts) as FromHexReturnType<TTo>\n  return hexToBytes(hex, opts) as FromHexReturnType<TTo>\n}\n\nexport type HexToBigIntOpts = {\n  /** Whether or not the number of a signed representation. */\n  signed?: boolean | undefined\n  /** Size (in bytes) of the hex value. */\n  size?: number | undefined\n}\n\nexport type HexToBigIntErrorType = AssertSizeErrorType | ErrorType\n\n/**\n * Decodes a hex value into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobigint\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x1a4', { signed: true })\n * // 420n\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420n\n */\nexport function hexToBigInt(hex: Hex, opts: HexToBigIntOpts = {}): bigint {\n  const { signed } = opts\n\n  if (opts.size) assertSize(hex, { size: opts.size })\n\n  const value = BigInt(hex)\n  if (!signed) return value\n\n  const size = (hex.length - 2) / 2\n  const max = (1n << (BigInt(size) * 8n - 1n)) - 1n\n  if (value <= max) return value\n\n  return value - BigInt(`0x${'f'.padStart(size * 2, 'f')}`) - 1n\n}\n\nexport type HexToBoolOpts = {\n  /** Size (in bytes) of the hex value. */\n  size?: number | undefined\n}\n\nexport type HexToBoolErrorType =\n  | AssertSizeErrorType\n  | InvalidHexBooleanErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a hex value into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobool\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x01')\n * // true\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\n * // true\n */\nexport function hexToBool(hex_: Hex, opts: HexToBoolOpts = {}): boolean {\n  let hex = hex_\n  if (opts.size) {\n    assertSize(hex, { size: opts.size })\n    hex = trim(hex)\n  }\n  if (trim(hex) === '0x00') return false\n  if (trim(hex) === '0x01') return true\n  throw new InvalidHexBooleanError(hex)\n}\n\nexport type HexToNumberOpts = HexToBigIntOpts\n\nexport type HexToNumberErrorType = HexToBigIntErrorType | ErrorType\n\n/**\n * Decodes a hex string into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextonumber\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToNumber('0x1a4')\n * // 420\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420\n */\nexport function hexToNumber(hex: Hex, opts: HexToNumberOpts = {}): number {\n  return Number(hexToBigInt(hex, opts))\n}\n\nexport type HexToStringOpts = {\n  /** Size (in bytes) of the hex value. */\n  size?: number | undefined\n}\n\nexport type HexToStringErrorType =\n  | AssertSizeErrorType\n  | HexToBytesErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a hex value into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextostring\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c6421')\n * // 'Hello world!'\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *  size: 32,\n * })\n * // 'Hello world'\n */\nexport function hexToString(hex: Hex, opts: HexToStringOpts = {}): string {\n  let bytes = hexToBytes(hex)\n  if (opts.size) {\n    assertSize(bytes, { size: opts.size })\n    bytes = trim(bytes, { dir: 'right' })\n  }\n  return new TextDecoder().decode(bytes)\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAkBM,SAAU,WACd,UAA2B,EAC3B,EAAE,IAAI,EAAoB;IAE1B,IAAI,CAAA,GAAA,uJAAA,CAAA,OAAK,AAAL,EAAM,cAAc,MACtB,MAAM,IAAI,oJAAA,CAAA,oBAAiB,CAAC;QAC1B,WAAW,CAAA,GAAA,uJAAA,CAAA,OAAK,AAAL,EAAM;QACjB,SAAS;;AAEf;AA6DM,SAAU,QAEd,GAAQ,EAAE,QAAgC;IAC1C,MAAM,OAAO,OAAO,aAAa,WAAW;QAAE,IAAI;IAAQ,IAAK;IAC/D,MAAM,KAAK,KAAK,EAAE;IAElB,IAAI,OAAO,UAAU,OAAO,YAAY,KAAK;IAC7C,IAAI,OAAO,UAAU,OAAO,YAAY,KAAK;IAC7C,IAAI,OAAO,UAAU,OAAO,YAAY,KAAK;IAC7C,IAAI,OAAO,WAAW,OAAO,UAAU,KAAK;IAC5C,OAAO,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAV,EAAW,KAAK;AACzB;AA8BM,SAAU,YAAY,GAAQ,EAAE,OAAwB,CAAA,CAAE;IAC9D,MAAM,EAAE,MAAM,EAAE,GAAG;IAEnB,IAAI,KAAK,IAAI,EAAE,WAAW,KAAK;QAAE,MAAM,KAAK,IAAI;IAAA;IAEhD,MAAM,QAAQ,OAAO;IACrB,IAAI,CAAC,QAAQ,OAAO;IAEpB,MAAM,OAAO,CAAC,IAAI,MAAM,GAAG,CAAC,IAAI;IAChC,MAAM,MAAM,CAAC,EAAE,IAAK,OAAO,QAAQ,EAAE,GAAG,EAAE,AAAC,IAAI,EAAE;IACjD,IAAI,SAAS,KAAK,OAAO;IAEzB,OAAO,QAAQ,OAAO,CAAA,EAAA,EAAK,IAAI,QAAQ,CAAC,OAAO,GAAG,KAAI,CAAE,IAAI,EAAE;AAChE;AAgCM,SAAU,UAAU,IAAS,EAAE,OAAsB,CAAA,CAAE;IAC3D,IAAI,MAAM;IACV,IAAI,KAAK,IAAI,EAAE;QACb,WAAW,KAAK;YAAE,MAAM,KAAK,IAAI;QAAA;QACjC,MAAM,CAAA,GAAA,uJAAA,CAAA,OAAI,AAAJ,EAAK;IACb;IACA,IAAI,CAAA,GAAA,uJAAA,CAAA,OAAI,AAAJ,EAAK,SAAS,QAAQ,OAAO;IACjC,IAAI,CAAA,GAAA,uJAAA,CAAA,OAAI,AAAJ,EAAK,SAAS,QAAQ,OAAO;IACjC,MAAM,IAAI,oJAAA,CAAA,yBAAsB,CAAC;AACnC;AAyBM,SAAU,YAAY,GAAQ,EAAE,OAAwB,CAAA,CAAE;IAC9D,OAAO,OAAO,YAAY,KAAK;AACjC;AAkCM,SAAU,YAAY,GAAQ,EAAE,OAAwB,CAAA,CAAE;IAC9D,IAAI,QAAQ,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAV,EAAW;IACvB,IAAI,KAAK,IAAI,EAAE;QACb,WAAW,OAAO;YAAE,MAAM,KAAK,IAAI;QAAA;QACnC,QAAQ,CAAA,GAAA,uJAAA,CAAA,OAAI,AAAJ,EAAK,OAAO;YAAE,KAAK;QAAO;IACpC;IACA,OAAO,IAAI,cAAc,MAAM,CAAC;AAClC"}},
    {"offset": {"line": 1024, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1029, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/encoding/toHex.ts"],"sourcesContent":["import {\n  IntegerOutOfRangeError,\n  type IntegerOutOfRangeErrorType,\n} from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\n\nimport { type AssertSizeErrorType, assertSize } from './fromHex.js'\n\nconst hexes = /*#__PURE__*/ Array.from({ length: 256 }, (_v, i) =>\n  i.toString(16).padStart(2, '0'),\n)\n\nexport type ToHexParameters = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type ToHexErrorType =\n  | BoolToHexErrorType\n  | BytesToHexErrorType\n  | NumberToHexErrorType\n  | StringToHexErrorType\n  | ErrorType\n\n/**\n * Encodes a string, number, bigint, or ByteArray into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex\n * - Example: https://viem.sh/docs/utilities/toHex#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world')\n * // '0x48656c6c6f20776f726c6421'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex(420)\n * // '0x1a4'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world', { size: 32 })\n * // '0x48656c6c6f20776f726c64210000000000000000000000000000000000000000'\n */\nexport function toHex(\n  value: string | number | bigint | boolean | ByteArray,\n  opts: ToHexParameters = {},\n): Hex {\n  if (typeof value === 'number' || typeof value === 'bigint')\n    return numberToHex(value, opts)\n  if (typeof value === 'string') {\n    return stringToHex(value, opts)\n  }\n  if (typeof value === 'boolean') return boolToHex(value, opts)\n  return bytesToHex(value, opts)\n}\n\nexport type BoolToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type BoolToHexErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a boolean into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#booltohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true)\n * // '0x1'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(false)\n * // '0x0'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true, { size: 32 })\n * // '0x0000000000000000000000000000000000000000000000000000000000000001'\n */\nexport function boolToHex(value: boolean, opts: BoolToHexOpts = {}): Hex {\n  const hex: Hex = `0x${Number(value)}`\n  if (typeof opts.size === 'number') {\n    assertSize(hex, { size: opts.size })\n    return pad(hex, { size: opts.size })\n  }\n  return hex\n}\n\nexport type BytesToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type BytesToHexErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a bytes array into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#bytestohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function bytesToHex(value: ByteArray, opts: BytesToHexOpts = {}): Hex {\n  let string = ''\n  for (let i = 0; i < value.length; i++) {\n    string += hexes[value[i]]\n  }\n  const hex = `0x${string}` as const\n\n  if (typeof opts.size === 'number') {\n    assertSize(hex, { size: opts.size })\n    return pad(hex, { dir: 'right', size: opts.size })\n  }\n  return hex\n}\n\nexport type NumberToHexOpts =\n  | {\n      /** Whether or not the number of a signed representation. */\n      signed?: boolean | undefined\n      /** The size (in bytes) of the output hex value. */\n      size: number\n    }\n  | {\n      signed?: undefined\n      /** The size (in bytes) of the output hex value. */\n      size?: number | undefined\n    }\n\nexport type NumberToHexErrorType =\n  | IntegerOutOfRangeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a number or bigint into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#numbertohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420)\n * // '0x1a4'\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420, { size: 32 })\n * // '0x00000000000000000000000000000000000000000000000000000000000001a4'\n */\nexport function numberToHex(\n  value_: number | bigint,\n  opts: NumberToHexOpts = {},\n): Hex {\n  const { signed, size } = opts\n\n  const value = BigInt(value_)\n\n  let maxValue: bigint | number | undefined\n  if (size) {\n    if (signed) maxValue = (1n << (BigInt(size) * 8n - 1n)) - 1n\n    else maxValue = 2n ** (BigInt(size) * 8n) - 1n\n  } else if (typeof value_ === 'number') {\n    maxValue = BigInt(Number.MAX_SAFE_INTEGER)\n  }\n\n  const minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0\n\n  if ((maxValue && value > maxValue) || value < minValue) {\n    const suffix = typeof value_ === 'bigint' ? 'n' : ''\n    throw new IntegerOutOfRangeError({\n      max: maxValue ? `${maxValue}${suffix}` : undefined,\n      min: `${minValue}${suffix}`,\n      signed,\n      size,\n      value: `${value_}${suffix}`,\n    })\n  }\n\n  const hex = `0x${(signed && value < 0\n    ? (1n << BigInt(size * 8)) + BigInt(value)\n    : value\n  ).toString(16)}` as Hex\n  if (size) return pad(hex, { size }) as Hex\n  return hex\n}\n\nexport type StringToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type StringToHexErrorType = BytesToHexErrorType | ErrorType\n\nconst encoder = /*#__PURE__*/ new TextEncoder()\n\n/**\n * Encodes a UTF-8 string into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#stringtohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!')\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!', { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function stringToHex(value_: string, opts: StringToHexOpts = {}): Hex {\n  const value = encoder.encode(value_)\n  return bytesToHex(value, opts)\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAUA,MAAM,QAAQ,WAAA,GAAc,MAAM,IAAI,CAAC;IAAE,QAAQ;AAAG,GAAI,CAAC,IAAI,IAC3D,EAAE,QAAQ,CAAC,IAAI,QAAQ,CAAC,GAAG;AAwCvB,SAAU,MACd,KAAqD,EACrD,OAAwB,CAAA,CAAE;IAE1B,IAAI,OAAO,UAAU,YAAY,OAAO,UAAU,UAChD,OAAO,YAAY,OAAO;IAC5B,IAAI,OAAO,UAAU,UAAU;QAC7B,OAAO,YAAY,OAAO;IAC5B;IACA,IAAI,OAAO,UAAU,WAAW,OAAO,UAAU,OAAO;IACxD,OAAO,WAAW,OAAO;AAC3B;AAiCM,SAAU,UAAU,KAAc,EAAE,OAAsB,CAAA,CAAE;IAChE,MAAM,MAAW,CAAA,EAAA,EAAK,OAAO,OAAM,CAAE;IACrC,IAAI,OAAO,KAAK,IAAI,KAAK,UAAU;QACjC,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAV,EAAW,KAAK;YAAE,MAAM,KAAK,IAAI;QAAA;QACjC,OAAO,CAAA,GAAA,sJAAA,CAAA,MAAG,AAAH,EAAI,KAAK;YAAE,MAAM,KAAK,IAAI;QAAA;IACnC;IACA,OAAO;AACT;AA4BM,SAAU,WAAW,KAAgB,EAAE,OAAuB,CAAA,CAAE;IACpE,IAAI,SAAS;IACb,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACrC,UAAU,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;IAC3B;IACA,MAAM,MAAM,CAAA,EAAA,EAAK,OAAM,CAAW;IAElC,IAAI,OAAO,KAAK,IAAI,KAAK,UAAU;QACjC,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAV,EAAW,KAAK;YAAE,MAAM,KAAK,IAAI;QAAA;QACjC,OAAO,CAAA,GAAA,sJAAA,CAAA,MAAG,AAAH,EAAI,KAAK;YAAE,KAAK;YAAS,MAAM,KAAK,IAAI;QAAA;IACjD;IACA,OAAO;AACT;AAuCM,SAAU,YACd,MAAuB,EACvB,OAAwB,CAAA,CAAE;IAE1B,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG;IAEzB,MAAM,QAAQ,OAAO;IAErB,IAAI;IACJ,IAAI,MAAM;QACR,IAAI,QAAQ,WAAW,CAAC,EAAE,IAAK,OAAO,QAAQ,EAAE,GAAG,EAAE,AAAC,IAAI,EAAE;aACvD,WAAW,EAAE,IAAI,CAAC,OAAO,QAAQ,EAAE,IAAI,EAAE;IAChD,OAAO,IAAI,OAAO,WAAW,UAAU;QACrC,WAAW,OAAO,OAAO,gBAAgB;IAC3C;IAEA,MAAM,WAAW,OAAO,aAAa,YAAY,SAAS,CAAC,WAAW,EAAE,GAAG;IAE3E,IAAI,AAAC,YAAY,QAAQ,YAAa,QAAQ,UAAU;QACtD,MAAM,SAAS,OAAO,WAAW,WAAW,MAAM;QAClD,MAAM,IAAI,oJAAA,CAAA,yBAAsB,CAAC;YAC/B,KAAK,WAAW,CAAA,EAAG,SAAQ,EAAG,OAAM,CAAE,GAAG;YACzC,KAAK,CAAA,EAAG,SAAQ,EAAG,OAAM,CAAE;YAC3B;YACA;YACA,OAAO,CAAA,EAAG,OAAM,EAAG,OAAM,CAAE;;IAE/B;IAEA,MAAM,MAAM,CAAA,EAAA,EAAK,CAAC,UAAU,QAAQ,IAChC,CAAC,EAAE,IAAI,OAAO,OAAO,EAAE,IAAI,OAAO,SAClC,KAAK,EACP,QAAQ,CAAC,IAAG,CAAS;IACvB,IAAI,MAAM,OAAO,CAAA,GAAA,sJAAA,CAAA,MAAG,AAAH,EAAI,KAAK;QAAE;IAAI;IAChC,OAAO;AACT;AASA,MAAM,UAAU,WAAA,GAAc,IAAI;AAqB5B,SAAU,YAAY,MAAc,EAAE,OAAwB,CAAA,CAAE;IACpE,MAAM,QAAQ,QAAQ,MAAM,CAAC;IAC7B,OAAO,WAAW,OAAO;AAC3B"}},
    {"offset": {"line": 1115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1120, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/encoding/toBytes.ts"],"sourcesContent":["import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\n\nimport { type AssertSizeErrorType, assertSize } from './fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  type NumberToHexOpts,\n  numberToHex,\n} from './toHex.js'\n\nconst encoder = /*#__PURE__*/ new TextEncoder()\n\nexport type ToBytesParameters = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type ToBytesErrorType =\n  | NumberToBytesErrorType\n  | BoolToBytesErrorType\n  | HexToBytesErrorType\n  | StringToBytesErrorType\n  | IsHexErrorType\n  | ErrorType\n\n/**\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes\n * - Example: https://viem.sh/docs/utilities/toBytes#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes('Hello world')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function toBytes(\n  value: string | bigint | number | boolean | Hex,\n  opts: ToBytesParameters = {},\n): ByteArray {\n  if (typeof value === 'number' || typeof value === 'bigint')\n    return numberToBytes(value, opts)\n  if (typeof value === 'boolean') return boolToBytes(value, opts)\n  if (isHex(value)) return hexToBytes(value, opts)\n  return stringToBytes(value, opts)\n}\n\nexport type BoolToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type BoolToBytesErrorType =\n  | AssertSizeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a boolean into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#booltobytes\n *\n * @param value Boolean value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true)\n * // Uint8Array([1])\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true, { size: 32 })\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n */\nexport function boolToBytes(value: boolean, opts: BoolToBytesOpts = {}) {\n  const bytes = new Uint8Array(1)\n  bytes[0] = Number(value)\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, { size: opts.size })\n    return pad(bytes, { size: opts.size })\n  }\n  return bytes\n}\n\n// We use very optimized technique to convert hex string to byte array\nconst charCodeMap = {\n  zero: 48,\n  nine: 57,\n  A: 65,\n  F: 70,\n  a: 97,\n  f: 102,\n} as const\n\nfunction charCodeToBase16(char: number) {\n  if (char >= charCodeMap.zero && char <= charCodeMap.nine)\n    return char - charCodeMap.zero\n  if (char >= charCodeMap.A && char <= charCodeMap.F)\n    return char - (charCodeMap.A - 10)\n  if (char >= charCodeMap.a && char <= charCodeMap.f)\n    return char - (charCodeMap.a - 10)\n  return undefined\n}\n\nexport type HexToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type HexToBytesErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a hex string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#hextobytes\n *\n * @param hex Hex string to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function hexToBytes(hex_: Hex, opts: HexToBytesOpts = {}): ByteArray {\n  let hex = hex_\n  if (opts.size) {\n    assertSize(hex, { size: opts.size })\n    hex = pad(hex, { dir: 'right', size: opts.size })\n  }\n\n  let hexString = hex.slice(2) as string\n  if (hexString.length % 2) hexString = `0${hexString}`\n\n  const length = hexString.length / 2\n  const bytes = new Uint8Array(length)\n  for (let index = 0, j = 0; index < length; index++) {\n    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++))\n    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++))\n    if (nibbleLeft === undefined || nibbleRight === undefined) {\n      throw new BaseError(\n        `Invalid byte sequence (\"${hexString[j - 2]}${\n          hexString[j - 1]\n        }\" in \"${hexString}\").`,\n      )\n    }\n    bytes[index] = nibbleLeft * 16 + nibbleRight\n  }\n  return bytes\n}\n\nexport type NumberToBytesErrorType =\n  | NumberToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Encodes a number into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#numbertobytes\n *\n * @param value Number to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function numberToBytes(\n  value: bigint | number,\n  opts?: NumberToHexOpts | undefined,\n) {\n  const hex = numberToHex(value, opts)\n  return hexToBytes(hex)\n}\n\nexport type StringToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type StringToBytesErrorType =\n  | AssertSizeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a UTF-8 string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#stringtobytes\n *\n * @param value String to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function stringToBytes(\n  value: string,\n  opts: StringToBytesOpts = {},\n): ByteArray {\n  const bytes = encoder.encode(value)\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, { size: opts.size })\n    return pad(bytes, { dir: 'right', size: opts.size })\n  }\n  return bytes\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1215, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1220, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/hash/keccak256.ts"],"sourcesContent":["import { keccak_256 } from '@noble/hashes/sha3'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type Keccak256Hash<TTo extends To> =\n  | (TTo extends 'bytes' ? ByteArray : never)\n  | (TTo extends 'hex' ? Hex : never)\n\nexport type Keccak256ErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ToHexErrorType\n  | ErrorType\n\nexport function keccak256<TTo extends To = 'hex'>(\n  value: Hex | ByteArray,\n  to_?: TTo | undefined,\n): Keccak256Hash<TTo> {\n  const to = to_ || 'hex'\n  const bytes = keccak_256(\n    isHex(value, { strict: false }) ? toBytes(value) : value,\n  )\n  if (to === 'bytes') return bytes as Keccak256Hash<TTo>\n  return toHex(bytes) as Keccak256Hash<TTo>\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAoBM,SAAU,UACd,KAAsB,EACtB,GAAqB;IAErB,MAAM,KAAK,OAAO;IAClB,MAAM,QAAQ,CAAA,GAAA,kJAAA,CAAA,aAAU,AAAV,EACZ,CAAA,GAAA,wJAAA,CAAA,QAAK,AAAL,EAAM,OAAO;QAAE,QAAQ;IAAK,KAAM,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAP,EAAQ,SAAS;IAErD,IAAI,OAAO,SAAS,OAAO;IAC3B,OAAO,CAAA,GAAA,4JAAA,CAAA,QAAK,AAAL,EAAM;AACf"}},
    {"offset": {"line": 1240, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1245, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/address/getAddress.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport { InvalidAddressError } from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type StringToBytesErrorType,\n  stringToBytes,\n} from '../encoding/toBytes.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport { LruMap } from '../lru.js'\nimport { type IsAddressErrorType, isAddress } from './isAddress.js'\n\nconst checksumAddressCache = /*#__PURE__*/ new LruMap<Address>(8192)\n\nexport type ChecksumAddressErrorType =\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ErrorType\n\nexport function checksumAddress(\n  address_: Address,\n  /**\n   * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n   * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n   * that relies on EIP-55 checksum encoding (checksum without chainId).\n   *\n   * It is highly recommended to not use this feature unless you\n   * know what you are doing.\n   *\n   * See more: https://github.com/ethereum/EIPs/issues/1121\n   */\n  chainId?: number | undefined,\n): Address {\n  if (checksumAddressCache.has(`${address_}.${chainId}`))\n    return checksumAddressCache.get(`${address_}.${chainId}`)!\n\n  const hexAddress = chainId\n    ? `${chainId}${address_.toLowerCase()}`\n    : address_.substring(2).toLowerCase()\n  const hash = keccak256(stringToBytes(hexAddress), 'bytes')\n\n  const address = (\n    chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress\n  ).split('')\n  for (let i = 0; i < 40; i += 2) {\n    if (hash[i >> 1] >> 4 >= 8 && address[i]) {\n      address[i] = address[i].toUpperCase()\n    }\n    if ((hash[i >> 1] & 0x0f) >= 8 && address[i + 1]) {\n      address[i + 1] = address[i + 1].toUpperCase()\n    }\n  }\n\n  const result = `0x${address.join('')}` as const\n  checksumAddressCache.set(`${address_}.${chainId}`, result)\n  return result\n}\n\nexport type GetAddressErrorType =\n  | ChecksumAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nexport function getAddress(\n  address: string,\n  /**\n   * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n   * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n   * that relies on EIP-55 checksum encoding (checksum without chainId).\n   *\n   * It is highly recommended to not use this feature unless you\n   * know what you are doing.\n   *\n   * See more: https://github.com/ethereum/EIPs/issues/1121\n   */\n  chainId?: number,\n): Address {\n  if (!isAddress(address, { strict: false }))\n    throw new InvalidAddressError({ address })\n  return checksumAddress(address, chainId)\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAYA,MAAM,uBAAuB,WAAA,GAAc,IAAI,8IAAA,CAAA,SAAM,CAAU;AAOzD,SAAU,gBACd,QAAiB,EACjB;;;;;;;;;IAUA,OAA4B;IAE5B,IAAI,qBAAqB,GAAG,CAAC,CAAA,EAAG,SAAQ,CAAA,EAAI,QAAO,CAAE,GACnD,OAAO,qBAAqB,GAAG,CAAC,CAAA,EAAG,SAAQ,CAAA,EAAI,QAAO,CAAE;IAE1D,MAAM,aAAa,UACf,CAAA,EAAG,QAAO,EAAG,SAAS,WAAW,GAAE,CAAE,GACrC,SAAS,SAAS,CAAC,GAAG,WAAW;IACrC,MAAM,OAAO,CAAA,GAAA,4JAAA,CAAA,YAAS,AAAT,EAAU,CAAA,GAAA,8JAAA,CAAA,gBAAa,AAAb,EAAc,aAAa;IAElD,MAAM,UAAU,CACd,UAAU,WAAW,SAAS,CAAC,CAAA,EAAG,QAAO,EAAA,CAAI,CAAC,MAAM,IAAI,UAAU,EAClE,KAAK,CAAC;IACR,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,KAAK,EAAG;QAC9B,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,KAAK,KAAK,OAAO,CAAC,EAAE,EAAE;YACxC,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC,WAAW;QACrC;QACA,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,KAAK,KAAK,OAAO,CAAC,IAAI,EAAE,EAAE;YAChD,OAAO,CAAC,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,WAAW;QAC7C;IACF;IAEA,MAAM,SAAS,CAAA,EAAA,EAAK,QAAQ,IAAI,CAAC,IAAG,CAAW;IAC/C,qBAAqB,GAAG,CAAC,CAAA,EAAG,SAAQ,CAAA,EAAI,QAAO,CAAE,EAAE;IACnD,OAAO;AACT;AAOM,SAAU,WACd,OAAe,EACf;;;;;;;;;IAUA,OAAgB;IAEhB,IAAI,CAAC,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAT,EAAU,SAAS;QAAE,QAAQ;IAAK,IACrC,MAAM,IAAI,mJAAA,CAAA,sBAAmB,CAAC;QAAE;IAAO;IACzC,OAAO,gBAAgB,SAAS;AAClC"}},
    {"offset": {"line": 1304, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1309, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/address/isAddress.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport type { ErrorType } from '../../errors/utils.js'\nimport { LruMap } from '../lru.js'\nimport { checksumAddress } from './getAddress.js'\n\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/\n\n/** @internal */\nexport const isAddressCache = /*#__PURE__*/ new LruMap<boolean>(8192)\n\nexport type IsAddressOptions = {\n  /**\n   * Enables strict mode. Whether or not to compare the address against its checksum.\n   *\n   * @default true\n   */\n  strict?: boolean | undefined\n}\n\nexport type IsAddressErrorType = ErrorType\n\nexport function isAddress(\n  address: string,\n  options?: IsAddressOptions | undefined,\n): address is Address {\n  const { strict = true } = options ?? {}\n  const cacheKey = `${address}.${strict}`\n\n  if (isAddressCache.has(cacheKey)) return isAddressCache.get(cacheKey)!\n\n  const result = (() => {\n    if (!addressRegex.test(address)) return false\n    if (address.toLowerCase() === address) return true\n    if (strict) return checksumAddress(address as Address) === address\n    return true\n  })()\n  isAddressCache.set(cacheKey, result)\n  return result\n}\n"],"names":[],"mappings":";;;;;;;;;AAKA,MAAM,eAAe;AAGd,MAAM,iBAAiB,WAAA,GAAc,IAAI,8IAAA,CAAA,SAAM,CAAU;AAa1D,SAAU,UACd,OAAe,EACf,OAAsC;IAEtC,MAAM,EAAE,SAAS,IAAI,EAAE,GAAG,WAAW,CAAA;IACrC,MAAM,WAAW,CAAA,EAAG,QAAO,CAAA,EAAI,OAAM,CAAE;IAEvC,IAAI,eAAe,GAAG,CAAC,WAAW,OAAO,eAAe,GAAG,CAAC;IAE5D,MAAM,SAAS,CAAC;QACd,IAAI,CAAC,aAAa,IAAI,CAAC,UAAU,OAAO;QACxC,IAAI,QAAQ,WAAW,OAAO,SAAS,OAAO;QAC9C,IAAI,QAAQ,OAAO,CAAA,GAAA,gKAAA,CAAA,kBAAe,AAAf,EAAgB,aAAwB;QAC3D,OAAO;IACT,CAAC;IACD,eAAe,GAAG,CAAC,UAAU;IAC7B,OAAO;AACT"}},
    {"offset": {"line": 1333, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1338, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/data/slice.ts"],"sourcesContent":["import {\n  SliceOffsetOutOfBoundsError,\n  type SliceOffsetOutOfBoundsErrorType,\n} from '../../errors/data.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport { type IsHexErrorType, isHex } from './isHex.js'\nimport { type SizeErrorType, size } from './size.js'\n\nexport type SliceReturnType<TValue extends ByteArray | Hex> = TValue extends Hex\n  ? Hex\n  : ByteArray\n\nexport type SliceErrorType =\n  | IsHexErrorType\n  | SliceBytesErrorType\n  | SliceHexErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the hex or byte array given a start/end bytes offset.\n *\n * @param value The hex or byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function slice<TValue extends ByteArray | Hex>(\n  value: TValue,\n  start?: number | undefined,\n  end?: number | undefined,\n  { strict }: { strict?: boolean | undefined } = {},\n): SliceReturnType<TValue> {\n  if (isHex(value, { strict: false }))\n    return sliceHex(value as Hex, start, end, {\n      strict,\n    }) as SliceReturnType<TValue>\n  return sliceBytes(value as ByteArray, start, end, {\n    strict,\n  }) as SliceReturnType<TValue>\n}\n\nexport type AssertStartOffsetErrorType =\n  | SliceOffsetOutOfBoundsErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction assertStartOffset(value: Hex | ByteArray, start?: number | undefined) {\n  if (typeof start === 'number' && start > 0 && start > size(value) - 1)\n    throw new SliceOffsetOutOfBoundsError({\n      offset: start,\n      position: 'start',\n      size: size(value),\n    })\n}\n\nexport type AssertEndOffsetErrorType =\n  | SliceOffsetOutOfBoundsErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction assertEndOffset(\n  value: Hex | ByteArray,\n  start?: number | undefined,\n  end?: number | undefined,\n) {\n  if (\n    typeof start === 'number' &&\n    typeof end === 'number' &&\n    size(value) !== end - start\n  ) {\n    throw new SliceOffsetOutOfBoundsError({\n      offset: end,\n      position: 'end',\n      size: size(value),\n    })\n  }\n}\n\nexport type SliceBytesErrorType =\n  | AssertStartOffsetErrorType\n  | AssertEndOffsetErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the byte array given a start/end bytes offset.\n *\n * @param value The byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceBytes(\n  value_: ByteArray,\n  start?: number | undefined,\n  end?: number | undefined,\n  { strict }: { strict?: boolean | undefined } = {},\n): ByteArray {\n  assertStartOffset(value_, start)\n  const value = value_.slice(start, end)\n  if (strict) assertEndOffset(value, start, end)\n  return value\n}\n\nexport type SliceHexErrorType =\n  | AssertStartOffsetErrorType\n  | AssertEndOffsetErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the hex value given a start/end bytes offset.\n *\n * @param value The hex value to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceHex(\n  value_: Hex,\n  start?: number | undefined,\n  end?: number | undefined,\n  { strict }: { strict?: boolean | undefined } = {},\n): Hex {\n  assertStartOffset(value_, start)\n  const value = `0x${value_\n    .replace('0x', '')\n    .slice((start ?? 0) * 2, (end ?? value_.length) * 2)}` as const\n  if (strict) assertEndOffset(value, start, end)\n  return value\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AA2BM,SAAU,MACd,KAAa,EACb,KAA0B,EAC1B,GAAwB,EACxB,EAAE,MAAM,EAAA,GAAuC,CAAA,CAAE;IAEjD,IAAI,CAAA,GAAA,wJAAA,CAAA,QAAK,AAAL,EAAM,OAAO;QAAE,QAAQ;IAAK,IAC9B,OAAO,SAAS,OAAc,OAAO,KAAK;QACxC;;IAEJ,OAAO,WAAW,OAAoB,OAAO,KAAK;QAChD;;AAEJ;AAOA,SAAS,kBAAkB,KAAsB,EAAE,KAA0B;IAC3E,IAAI,OAAO,UAAU,YAAY,QAAQ,KAAK,QAAQ,CAAA,GAAA,uJAAA,CAAA,OAAI,AAAJ,EAAK,SAAS,GAClE,MAAM,IAAI,gJAAA,CAAA,8BAA2B,CAAC;QACpC,QAAQ;QACR,UAAU;QACV,MAAM,CAAA,GAAA,uJAAA,CAAA,OAAI,AAAJ,EAAK;;AAEjB;AAOA,SAAS,gBACP,KAAsB,EACtB,KAA0B,EAC1B,GAAwB;IAExB,IACE,OAAO,UAAU,YACjB,OAAO,QAAQ,YACf,CAAA,GAAA,uJAAA,CAAA,OAAI,AAAJ,EAAK,WAAW,MAAM,OACtB;QACA,MAAM,IAAI,gJAAA,CAAA,8BAA2B,CAAC;YACpC,QAAQ;YACR,UAAU;YACV,MAAM,CAAA,GAAA,uJAAA,CAAA,OAAI,AAAJ,EAAK;;IAEf;AACF;AAcM,SAAU,WACd,MAAiB,EACjB,KAA0B,EAC1B,GAAwB,EACxB,EAAE,MAAM,EAAA,GAAuC,CAAA,CAAE;IAEjD,kBAAkB,QAAQ;IAC1B,MAAM,QAAQ,OAAO,KAAK,CAAC,OAAO;IAClC,IAAI,QAAQ,gBAAgB,OAAO,OAAO;IAC1C,OAAO;AACT;AAcM,SAAU,SACd,MAAW,EACX,KAA0B,EAC1B,GAAwB,EACxB,EAAE,MAAM,EAAA,GAAuC,CAAA,CAAE;IAEjD,kBAAkB,QAAQ;IAC1B,MAAM,QAAQ,CAAA,EAAA,EAAK,OAChB,OAAO,CAAC,MAAM,IACd,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,OAAO,OAAO,MAAM,IAAI,GAAE,CAAW;IACjE,IAAI,QAAQ,gBAAgB,OAAO,OAAO;IAC1C,OAAO;AACT"}},
    {"offset": {"line": 1388, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1393, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/abi/encodeAbiParameters.ts"],"sourcesContent":["import type {\n  AbiParameter,\n  AbiParameterToPrimitiveType,\n  AbiParametersToPrimitiveTypes,\n} from 'abitype'\n\nimport {\n  AbiEncodingArrayLengthMismatchError,\n  type AbiEncodingArrayLengthMismatchErrorType,\n  AbiEncodingBytesSizeMismatchError,\n  type AbiEncodingBytesSizeMismatchErrorType,\n  AbiEncodingLengthMismatchError,\n  type AbiEncodingLengthMismatchErrorType,\n  InvalidAbiEncodingTypeError,\n  type InvalidAbiEncodingTypeErrorType,\n  InvalidArrayError,\n  type InvalidArrayErrorType,\n} from '../../errors/abi.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport { type PadHexErrorType, padHex } from '../data/pad.js'\nimport { type SizeErrorType, size } from '../data/size.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport {\n  type BoolToHexErrorType,\n  type NumberToHexErrorType,\n  type StringToHexErrorType,\n  boolToHex,\n  numberToHex,\n  stringToHex,\n} from '../encoding/toHex.js'\n\nexport type EncodeAbiParametersReturnType = Hex\n\nexport type EncodeAbiParametersErrorType =\n  | AbiEncodingLengthMismatchErrorType\n  | PrepareParamsErrorType\n  | EncodeParamsErrorType\n  | ErrorType\n\n/**\n * @description Encodes a list of primitive values into an ABI-encoded hex value.\n *\n * - Docs: https://viem.sh/docs/abi/encodeAbiParameters#encodeabiparameters\n *\n *   Generates ABI encoded data using the [ABI specification](https://docs.soliditylang.org/en/latest/abi-spec), given a set of ABI parameters (inputs/outputs) and their corresponding values.\n *\n * @param params - a set of ABI Parameters (params), that can be in the shape of the inputs or outputs attribute of an ABI Item.\n * @param values - a set of values (values) that correspond to the given params.\n * @example\n * ```typescript\n * import { encodeAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   [\n *     { name: 'x', type: 'string' },\n *     { name: 'y', type: 'uint' },\n *     { name: 'z', type: 'bool' }\n *   ],\n *   ['wagmi', 420n, true]\n * )\n * ```\n *\n * You can also pass in Human Readable parameters with the parseAbiParameters utility.\n *\n * @example\n * ```typescript\n * import { encodeAbiParameters, parseAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   parseAbiParameters('string x, uint y, bool z'),\n *   ['wagmi', 420n, true]\n * )\n * ```\n */\nexport function encodeAbiParameters<\n  const TParams extends readonly AbiParameter[] | readonly unknown[],\n>(\n  params: TParams,\n  values: TParams extends readonly AbiParameter[]\n    ? AbiParametersToPrimitiveTypes<TParams>\n    : never,\n): EncodeAbiParametersReturnType {\n  if (params.length !== values.length)\n    throw new AbiEncodingLengthMismatchError({\n      expectedLength: params.length as number,\n      givenLength: values.length as any,\n    })\n  // Prepare the parameters to determine dynamic types to encode.\n  const preparedParams = prepareParams({\n    params: params as readonly AbiParameter[],\n    values: values as any,\n  })\n  const data = encodeParams(preparedParams)\n  if (data.length === 0) return '0x'\n  return data\n}\n\n/////////////////////////////////////////////////////////////////\n\ntype PreparedParam = { dynamic: boolean; encoded: Hex }\n\ntype TupleAbiParameter = AbiParameter & { components: readonly AbiParameter[] }\ntype Tuple = AbiParameterToPrimitiveType<TupleAbiParameter>\n\ntype PrepareParamsErrorType = PrepareParamErrorType | ErrorType\n\nfunction prepareParams<const TParams extends readonly AbiParameter[]>({\n  params,\n  values,\n}: {\n  params: TParams\n  values: AbiParametersToPrimitiveTypes<TParams>\n}) {\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < params.length; i++) {\n    preparedParams.push(prepareParam({ param: params[i], value: values[i] }))\n  }\n  return preparedParams\n}\n\ntype PrepareParamErrorType =\n  | EncodeAddressErrorType\n  | EncodeArrayErrorType\n  | EncodeBytesErrorType\n  | EncodeBoolErrorType\n  | EncodeNumberErrorType\n  | EncodeStringErrorType\n  | EncodeTupleErrorType\n  | GetArrayComponentsErrorType\n  | InvalidAbiEncodingTypeErrorType\n  | ErrorType\n\nfunction prepareParam<const TParam extends AbiParameter>({\n  param,\n  value,\n}: {\n  param: TParam\n  value: AbiParameterToPrimitiveType<TParam>\n}): PreparedParam {\n  const arrayComponents = getArrayComponents(param.type)\n  if (arrayComponents) {\n    const [length, type] = arrayComponents\n    return encodeArray(value, { length, param: { ...param, type } })\n  }\n  if (param.type === 'tuple') {\n    return encodeTuple(value as unknown as Tuple, {\n      param: param as TupleAbiParameter,\n    })\n  }\n  if (param.type === 'address') {\n    return encodeAddress(value as unknown as Hex)\n  }\n  if (param.type === 'bool') {\n    return encodeBool(value as unknown as boolean)\n  }\n  if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n    const signed = param.type.startsWith('int')\n    return encodeNumber(value as unknown as number, { signed })\n  }\n  if (param.type.startsWith('bytes')) {\n    return encodeBytes(value as unknown as Hex, { param })\n  }\n  if (param.type === 'string') {\n    return encodeString(value as unknown as string)\n  }\n  throw new InvalidAbiEncodingTypeError(param.type, {\n    docsPath: '/docs/contract/encodeAbiParameters',\n  })\n}\n\n/////////////////////////////////////////////////////////////////\n\ntype EncodeParamsErrorType = NumberToHexErrorType | SizeErrorType | ErrorType\n\nfunction encodeParams(preparedParams: PreparedParam[]): Hex {\n  // 1. Compute the size of the static part of the parameters.\n  let staticSize = 0\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i]\n    if (dynamic) staticSize += 32\n    else staticSize += size(encoded)\n  }\n\n  // 2. Split the parameters into static and dynamic parts.\n  const staticParams: Hex[] = []\n  const dynamicParams: Hex[] = []\n  let dynamicSize = 0\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i]\n    if (dynamic) {\n      staticParams.push(numberToHex(staticSize + dynamicSize, { size: 32 }))\n      dynamicParams.push(encoded)\n      dynamicSize += size(encoded)\n    } else {\n      staticParams.push(encoded)\n    }\n  }\n\n  // 3. Concatenate static and dynamic parts.\n  return concat([...staticParams, ...dynamicParams])\n}\n\n/////////////////////////////////////////////////////////////////\n\ntype EncodeAddressErrorType =\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nfunction encodeAddress(value: Hex): PreparedParam {\n  if (!isAddress(value)) throw new InvalidAddressError({ address: value })\n  return { dynamic: false, encoded: padHex(value.toLowerCase() as Hex) }\n}\n\ntype EncodeArrayErrorType =\n  | AbiEncodingArrayLengthMismatchErrorType\n  | ConcatErrorType\n  | EncodeParamsErrorType\n  | InvalidArrayErrorType\n  | NumberToHexErrorType\n  // TODO: Add back once circular type reference is resolved\n  // | PrepareParamErrorType\n  | ErrorType\n\nfunction encodeArray<const TParam extends AbiParameter>(\n  value: AbiParameterToPrimitiveType<TParam>,\n  {\n    length,\n    param,\n  }: {\n    length: number | null\n    param: TParam\n  },\n): PreparedParam {\n  const dynamic = length === null\n\n  if (!Array.isArray(value)) throw new InvalidArrayError(value)\n  if (!dynamic && value.length !== length)\n    throw new AbiEncodingArrayLengthMismatchError({\n      expectedLength: length!,\n      givenLength: value.length,\n      type: `${param.type}[${length}]`,\n    })\n\n  let dynamicChild = false\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < value.length; i++) {\n    const preparedParam = prepareParam({ param, value: value[i] })\n    if (preparedParam.dynamic) dynamicChild = true\n    preparedParams.push(preparedParam)\n  }\n\n  if (dynamic || dynamicChild) {\n    const data = encodeParams(preparedParams)\n    if (dynamic) {\n      const length = numberToHex(preparedParams.length, { size: 32 })\n      return {\n        dynamic: true,\n        encoded: preparedParams.length > 0 ? concat([length, data]) : length,\n      }\n    }\n    if (dynamicChild) return { dynamic: true, encoded: data }\n  }\n  return {\n    dynamic: false,\n    encoded: concat(preparedParams.map(({ encoded }) => encoded)),\n  }\n}\n\ntype EncodeBytesErrorType =\n  | AbiEncodingBytesSizeMismatchErrorType\n  | ConcatErrorType\n  | PadHexErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction encodeBytes<const TParam extends AbiParameter>(\n  value: Hex,\n  { param }: { param: TParam },\n): PreparedParam {\n  const [, paramSize] = param.type.split('bytes')\n  const bytesSize = size(value)\n  if (!paramSize) {\n    let value_ = value\n    // If the size is not divisible by 32 bytes, pad the end\n    // with empty bytes to the ceiling 32 bytes.\n    if (bytesSize % 32 !== 0)\n      value_ = padHex(value_, {\n        dir: 'right',\n        size: Math.ceil((value.length - 2) / 2 / 32) * 32,\n      })\n    return {\n      dynamic: true,\n      encoded: concat([padHex(numberToHex(bytesSize, { size: 32 })), value_]),\n    }\n  }\n  if (bytesSize !== Number.parseInt(paramSize))\n    throw new AbiEncodingBytesSizeMismatchError({\n      expectedSize: Number.parseInt(paramSize),\n      value,\n    })\n  return { dynamic: false, encoded: padHex(value, { dir: 'right' }) }\n}\n\ntype EncodeBoolErrorType = PadHexErrorType | BoolToHexErrorType | ErrorType\n\nfunction encodeBool(value: boolean): PreparedParam {\n  if (typeof value !== 'boolean')\n    throw new BaseError(\n      `Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\`true\\` or \\`false\\`.`,\n    )\n  return { dynamic: false, encoded: padHex(boolToHex(value)) }\n}\n\ntype EncodeNumberErrorType = NumberToHexErrorType | ErrorType\n\nfunction encodeNumber(\n  value: number,\n  { signed }: { signed: boolean },\n): PreparedParam {\n  return {\n    dynamic: false,\n    encoded: numberToHex(value, {\n      size: 32,\n      signed,\n    }),\n  }\n}\n\ntype EncodeStringErrorType =\n  | ConcatErrorType\n  | NumberToHexErrorType\n  | PadHexErrorType\n  | SizeErrorType\n  | SliceErrorType\n  | StringToHexErrorType\n  | ErrorType\n\nfunction encodeString(value: string): PreparedParam {\n  const hexValue = stringToHex(value)\n  const partsLength = Math.ceil(size(hexValue) / 32)\n  const parts: Hex[] = []\n  for (let i = 0; i < partsLength; i++) {\n    parts.push(\n      padHex(slice(hexValue, i * 32, (i + 1) * 32), {\n        dir: 'right',\n      }),\n    )\n  }\n  return {\n    dynamic: true,\n    encoded: concat([\n      padHex(numberToHex(size(hexValue), { size: 32 })),\n      ...parts,\n    ]),\n  }\n}\n\ntype EncodeTupleErrorType =\n  | ConcatErrorType\n  | EncodeParamsErrorType\n  // TODO: Add back once circular type reference is resolved\n  // | PrepareParamErrorType\n  | ErrorType\n\nfunction encodeTuple<\n  const TParam extends AbiParameter & { components: readonly AbiParameter[] },\n>(\n  value: AbiParameterToPrimitiveType<TParam>,\n  { param }: { param: TParam },\n): PreparedParam {\n  let dynamic = false\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < param.components.length; i++) {\n    const param_ = param.components[i]\n    const index = Array.isArray(value) ? i : param_.name\n    const preparedParam = prepareParam({\n      param: param_,\n      value: (value as any)[index!] as readonly unknown[],\n    })\n    preparedParams.push(preparedParam)\n    if (preparedParam.dynamic) dynamic = true\n  }\n  return {\n    dynamic,\n    encoded: dynamic\n      ? encodeParams(preparedParams)\n      : concat(preparedParams.map(({ encoded }) => encoded)),\n  }\n}\n\ntype GetArrayComponentsErrorType = ErrorType\n\nexport function getArrayComponents(\n  type: string,\n): [length: number | null, innerType: string] | undefined {\n  const matches = type.match(/^(.*)\\[(\\d+)?\\]$/)\n  return matches\n    ? // Return `null` if the array is dynamic.\n      [matches[2] ? Number(matches[2]) : null, matches[1]]\n    : undefined\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1654, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1659, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/hash/hashSignature.ts"],"sourcesContent":["import { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type Keccak256ErrorType, keccak256 } from './keccak256.js'\n\nconst hash = (value: string) => keccak256(toBytes(value))\n\nexport type HashSignatureErrorType =\n  | Keccak256ErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport function hashSignature(sig: string) {\n  return hash(sig)\n}\n"],"names":[],"mappings":";;;;;;;;AAKA,MAAM,OAAO,CAAC,QAAkB,CAAA,GAAA,4JAAA,CAAA,YAAS,AAAT,EAAU,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAP,EAAQ;AAO5C,SAAU,cAAc,GAAW;IACvC,OAAO,KAAK;AACd"}},
    {"offset": {"line": 1671, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1676, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/hash/normalizeSignature.ts"],"sourcesContent":["import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\ntype NormalizeSignatureParameters = string\ntype NormalizeSignatureReturnType = string\nexport type NormalizeSignatureErrorType = ErrorType\n\nexport function normalizeSignature(\n  signature: NormalizeSignatureParameters,\n): NormalizeSignatureReturnType {\n  let active = true\n  let current = ''\n  let level = 0\n  let result = ''\n  let valid = false\n\n  for (let i = 0; i < signature.length; i++) {\n    const char = signature[i]\n\n    // If the character is a separator, we want to reactivate.\n    if (['(', ')', ','].includes(char)) active = true\n\n    // If the character is a \"level\" token, we want to increment/decrement.\n    if (char === '(') level++\n    if (char === ')') level--\n\n    // If we aren't active, we don't want to mutate the result.\n    if (!active) continue\n\n    // If level === 0, we are at the definition level.\n    if (level === 0) {\n      if (char === ' ' && ['event', 'function', ''].includes(result))\n        result = ''\n      else {\n        result += char\n\n        // If we are at the end of the definition, we must be finished.\n        if (char === ')') {\n          valid = true\n          break\n        }\n      }\n\n      continue\n    }\n\n    // Ignore spaces\n    if (char === ' ') {\n      // If the previous character is a separator, and the current section isn't empty, we want to deactivate.\n      if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\n        current = ''\n        active = false\n      }\n      continue\n    }\n\n    result += char\n    current += char\n  }\n\n  if (!valid) throw new BaseError('Unable to normalize signature.')\n\n  return result\n}\n"],"names":[],"mappings":";;;;;;AAOM,SAAU,mBACd,SAAuC;IAEvC,IAAI,SAAS;IACb,IAAI,UAAU;IACd,IAAI,QAAQ;IACZ,IAAI,SAAS;IACb,IAAI,QAAQ;IAEZ,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,MAAM,EAAE,IAAK;QACzC,MAAM,OAAO,SAAS,CAAC,EAAE;QAEzB,0DAA0D;QAC1D,IAAI;YAAC;YAAK;YAAK;SAAI,CAAC,QAAQ,CAAC,OAAO,SAAS;QAE7C,uEAAuE;QACvE,IAAI,SAAS,KAAK;QAClB,IAAI,SAAS,KAAK;QAElB,2DAA2D;QAC3D,IAAI,CAAC,QAAQ;QAEb,kDAAkD;QAClD,IAAI,UAAU,GAAG;YACf,IAAI,SAAS,OAAO;gBAAC;gBAAS;gBAAY;aAAG,CAAC,QAAQ,CAAC,SACrD,SAAS;iBACN;gBACH,UAAU;gBAEV,+DAA+D;gBAC/D,IAAI,SAAS,KAAK;oBAChB,QAAQ;oBACR;gBACF;YACF;YAEA;QACF;QAEA,gBAAgB;QAChB,IAAI,SAAS,KAAK;YAChB,wGAAwG;YACxG,IAAI,SAAS,CAAC,IAAI,EAAE,KAAK,OAAO,YAAY,OAAO,YAAY,MAAM;gBACnE,UAAU;gBACV,SAAS;YACX;YACA;QACF;QAEA,UAAU;QACV,WAAW;IACb;IAEA,IAAI,CAAC,OAAO,MAAM,IAAI,gJAAA,CAAA,YAAS,CAAC;IAEhC,OAAO;AACT"}},
    {"offset": {"line": 1733, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1738, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/hash/toSignature.ts"],"sourcesContent":["import { type AbiEvent, type AbiFunction, formatAbiItem } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type NormalizeSignatureErrorType,\n  normalizeSignature,\n} from './normalizeSignature.js'\n\nexport type ToSignatureErrorType = NormalizeSignatureErrorType | ErrorType\n\n/**\n * Returns the signature for a given function or event definition.\n *\n * @example\n * const signature = toSignature('function ownerOf(uint256 tokenId)')\n * // 'ownerOf(uint256)'\n *\n * @example\n * const signature_3 = toSignature({\n *   name: 'ownerOf',\n *   type: 'function',\n *   inputs: [{ name: 'tokenId', type: 'uint256' }],\n *   outputs: [],\n *   stateMutability: 'view',\n * })\n * // 'ownerOf(uint256)'\n */\nexport const toSignature = (def: string | AbiFunction | AbiEvent) => {\n  const def_ = (() => {\n    if (typeof def === 'string') return def\n    return formatAbiItem(def)\n  })()\n  return normalizeSignature(def_)\n}\n"],"names":[],"mappings":";;;;;;;;AA2BO,MAAM,cAAc,CAAC;IAC1B,MAAM,OAAO,CAAC;QACZ,IAAI,OAAO,QAAQ,UAAU,OAAO;QACpC,OAAO,CAAA,GAAA,8KAAA,CAAA,gBAAa,AAAb,EAAc;IACvB,CAAC;IACD,OAAO,CAAA,GAAA,qKAAA,CAAA,qBAAkB,AAAlB,EAAmB;AAC5B"}},
    {"offset": {"line": 1753, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1758, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/hash/toSignatureHash.ts"],"sourcesContent":["import type { AbiEvent, AbiFunction } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type HashSignatureErrorType, hashSignature } from './hashSignature.js'\nimport { type ToSignatureErrorType, toSignature } from './toSignature.js'\n\nexport type ToSignatureHashErrorType =\n  | HashSignatureErrorType\n  | ToSignatureErrorType\n  | ErrorType\n\n/**\n * Returns the hash (of the function/event signature) for a given event or function definition.\n */\nexport function toSignatureHash(fn: string | AbiFunction | AbiEvent) {\n  return hashSignature(toSignature(fn))\n}\n"],"names":[],"mappings":";;;;;;;;AAcM,SAAU,gBAAgB,EAAmC;IACjE,OAAO,CAAA,GAAA,gKAAA,CAAA,gBAAa,AAAb,EAAc,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAX,EAAY;AACnC"}},
    {"offset": {"line": 1769, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1774, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/hash/toFunctionSelector.ts"],"sourcesContent":["import type { AbiFunction } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport {\n  type ToSignatureHashErrorType,\n  toSignatureHash,\n} from './toSignatureHash.js'\n\nexport type ToFunctionSelectorErrorType =\n  | ToSignatureHashErrorType\n  | SliceErrorType\n  | ErrorType\n\n/**\n * Returns the function selector for a given function definition.\n *\n * @example\n * const selector = toFunctionSelector('function ownerOf(uint256 tokenId)')\n * // 0x6352211e\n */\nexport const toFunctionSelector = (fn: string | AbiFunction) =>\n  slice(toSignatureHash(fn), 0, 4)\n"],"names":[],"mappings":";;;;;;;;AAqBO,MAAM,qBAAqB,CAAC,KACjC,CAAA,GAAA,wJAAA,CAAA,QAAK,AAAL,EAAM,CAAA,GAAA,kKAAA,CAAA,kBAAe,AAAf,EAAgB,KAAK,GAAG"}},
    {"offset": {"line": 1783, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1788, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/hash/toEventSelector.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport {\n  type ToSignatureHashErrorType,\n  toSignatureHash,\n} from './toSignatureHash.js'\n\nexport type ToEventSelectorErrorType = ToSignatureHashErrorType | ErrorType\n\n/**\n * Returns the event selector for a given event definition.\n *\n * @example\n * const selector = toEventSelector('Transfer(address indexed from, address indexed to, uint256 amount)')\n * // 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n */\nexport const toEventSelector = toSignatureHash\n"],"names":[],"mappings":";;;;;;AAeO,MAAM,kBAAkB,kKAAA,CAAA,kBAAe"}},
    {"offset": {"line": 1795, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1800, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/abi/getAbiItem.ts"],"sourcesContent":["import type { Abi, AbiParameter, Address } from 'abitype'\n\nimport {\n  AbiItemAmbiguityError,\n  type AbiItemAmbiguityErrorType,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  AbiItem,\n  AbiItemArgs,\n  AbiItemName,\n  ExtractAbiItemForArgs,\n  Widen,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { UnionEvaluate } from '../../types/utils.js'\nimport { type IsHexErrorType, isHex } from '../../utils/data/isHex.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { toEventSelector } from '../hash/toEventSelector.js'\nimport {\n  type ToFunctionSelectorErrorType,\n  toFunctionSelector,\n} from '../hash/toFunctionSelector.js'\n\nexport type GetAbiItemParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  name extends AbiItemName<abi> = AbiItemName<abi>,\n  args extends AbiItemArgs<abi, name> | undefined = AbiItemArgs<abi, name>,\n  ///\n  allArgs = AbiItemArgs<abi, name>,\n  allNames = AbiItemName<abi>,\n> = {\n  abi: abi\n  name:\n    | allNames // show all options\n    | (name extends allNames ? name : never) // infer value\n    | Hex // function selector\n} & UnionEvaluate<\n  readonly [] extends allArgs\n    ? {\n        args?:\n          | allArgs // show all options\n          // infer value, widen inferred value of `args` conditionally to match `allArgs`\n          | (abi extends Abi\n              ? args extends allArgs\n                ? Widen<args>\n                : never\n              : never)\n          | undefined\n      }\n    : {\n        args?:\n          | allArgs // show all options\n          | (Widen<args> & (args extends allArgs ? unknown : never)) // infer value, widen inferred value of `args` match `allArgs` (e.g. avoid union `args: readonly [123n] | readonly [bigint]`)\n          | undefined\n      }\n>\n\nexport type GetAbiItemErrorType =\n  | IsArgOfTypeErrorType\n  | IsHexErrorType\n  | ToFunctionSelectorErrorType\n  | AbiItemAmbiguityErrorType\n  | ErrorType\n\nexport type GetAbiItemReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  name extends AbiItemName<abi> = AbiItemName<abi>,\n  args extends AbiItemArgs<abi, name> | undefined = AbiItemArgs<abi, name>,\n> = abi extends Abi\n  ? Abi extends abi\n    ? AbiItem | undefined\n    : ExtractAbiItemForArgs<\n        abi,\n        name,\n        args extends AbiItemArgs<abi, name> ? args : AbiItemArgs<abi, name>\n      >\n  : AbiItem | undefined\n\nexport function getAbiItem<\n  const abi extends Abi | readonly unknown[],\n  name extends AbiItemName<abi>,\n  const args extends AbiItemArgs<abi, name> | undefined = undefined,\n>(\n  parameters: GetAbiItemParameters<abi, name, args>,\n): GetAbiItemReturnType<abi, name, args> {\n  const { abi, args = [], name } = parameters as unknown as GetAbiItemParameters\n\n  const isSelector = isHex(name, { strict: false })\n  const abiItems = (abi as Abi).filter((abiItem) => {\n    if (isSelector) {\n      if (abiItem.type === 'function')\n        return toFunctionSelector(abiItem) === name\n      if (abiItem.type === 'event') return toEventSelector(abiItem) === name\n      return false\n    }\n    return 'name' in abiItem && abiItem.name === name\n  })\n\n  if (abiItems.length === 0)\n    return undefined as GetAbiItemReturnType<abi, name, args>\n  if (abiItems.length === 1)\n    return abiItems[0] as GetAbiItemReturnType<abi, name, args>\n\n  let matchedAbiItem: AbiItem | undefined = undefined\n  for (const abiItem of abiItems) {\n    if (!('inputs' in abiItem)) continue\n    if (!args || args.length === 0) {\n      if (!abiItem.inputs || abiItem.inputs.length === 0)\n        return abiItem as GetAbiItemReturnType<abi, name, args>\n      continue\n    }\n    if (!abiItem.inputs) continue\n    if (abiItem.inputs.length === 0) continue\n    if (abiItem.inputs.length !== args.length) continue\n    const matched = args.every((arg, index) => {\n      const abiParameter = 'inputs' in abiItem && abiItem.inputs![index]\n      if (!abiParameter) return false\n      return isArgOfType(arg, abiParameter)\n    })\n    if (matched) {\n      // Check for ambiguity against already matched parameters (e.g. `address` vs `bytes20`).\n      if (\n        matchedAbiItem &&\n        'inputs' in matchedAbiItem &&\n        matchedAbiItem.inputs\n      ) {\n        const ambiguousTypes = getAmbiguousTypes(\n          abiItem.inputs,\n          matchedAbiItem.inputs,\n          args as readonly unknown[],\n        )\n        if (ambiguousTypes)\n          throw new AbiItemAmbiguityError(\n            {\n              abiItem,\n              type: ambiguousTypes[0],\n            },\n            {\n              abiItem: matchedAbiItem,\n              type: ambiguousTypes[1],\n            },\n          )\n      }\n\n      matchedAbiItem = abiItem\n    }\n  }\n\n  if (matchedAbiItem)\n    return matchedAbiItem as GetAbiItemReturnType<abi, name, args>\n  return abiItems[0] as GetAbiItemReturnType<abi, name, args>\n}\n\ntype IsArgOfTypeErrorType = IsAddressErrorType | ErrorType\n\n/** @internal */\nexport function isArgOfType(arg: unknown, abiParameter: AbiParameter): boolean {\n  const argType = typeof arg\n  const abiParameterType = abiParameter.type\n  switch (abiParameterType) {\n    case 'address':\n      return isAddress(arg as Address, { strict: false })\n    case 'bool':\n      return argType === 'boolean'\n    case 'function':\n      return argType === 'string'\n    case 'string':\n      return argType === 'string'\n    default: {\n      if (abiParameterType === 'tuple' && 'components' in abiParameter)\n        return Object.values(abiParameter.components).every(\n          (component, index) => {\n            return isArgOfType(\n              Object.values(arg as unknown[] | Record<string, unknown>)[index],\n              component as AbiParameter,\n            )\n          },\n        )\n\n      // `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n      // https://regexr.com/6v8hp\n      if (\n        /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(\n          abiParameterType,\n        )\n      )\n        return argType === 'number' || argType === 'bigint'\n\n      // `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n      // https://regexr.com/6va55\n      if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))\n        return argType === 'string' || arg instanceof Uint8Array\n\n      // fixed-length (`<type>[M]`) and dynamic (`<type>[]`) arrays\n      // https://regexr.com/6va6i\n      if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\n        return (\n          Array.isArray(arg) &&\n          arg.every((x: unknown) =>\n            isArgOfType(x, {\n              ...abiParameter,\n              // Pop off `[]` or `[M]` from end of type\n              type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, ''),\n            } as AbiParameter),\n          )\n        )\n      }\n\n      return false\n    }\n  }\n}\n\n/** @internal */\nexport function getAmbiguousTypes(\n  sourceParameters: readonly AbiParameter[],\n  targetParameters: readonly AbiParameter[],\n  args: AbiItemArgs,\n): AbiParameter['type'][] | undefined {\n  for (const parameterIndex in sourceParameters) {\n    const sourceParameter = sourceParameters[parameterIndex]\n    const targetParameter = targetParameters[parameterIndex]\n\n    if (\n      sourceParameter.type === 'tuple' &&\n      targetParameter.type === 'tuple' &&\n      'components' in sourceParameter &&\n      'components' in targetParameter\n    )\n      return getAmbiguousTypes(\n        sourceParameter.components,\n        targetParameter.components,\n        (args as any)[parameterIndex],\n      )\n\n    const types = [sourceParameter.type, targetParameter.type]\n\n    const ambiguous = (() => {\n      if (types.includes('address') && types.includes('bytes20')) return true\n      if (types.includes('address') && types.includes('string'))\n        return isAddress(args[parameterIndex] as Address, { strict: false })\n      if (types.includes('address') && types.includes('bytes'))\n        return isAddress(args[parameterIndex] as Address, { strict: false })\n      return false\n    })()\n\n    if (ambiguous) return types\n  }\n\n  return\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1925, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1930, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/abi/prepareEncodeFunctionData.ts"],"sourcesContent":["import type {\n  Abi,\n  AbiStateMutability,\n  ExtractAbiFunction,\n  ExtractAbiFunctions,\n} from 'abitype'\n\nimport {\n  AbiFunctionNotFoundError,\n  type AbiFunctionNotFoundErrorType,\n} from '../../errors/abi.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from '../../types/contract.js'\nimport type { ConcatHexErrorType } from '../data/concat.js'\nimport {\n  type ToFunctionSelectorErrorType,\n  toFunctionSelector,\n} from '../hash/toFunctionSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\n\nconst docsPath = '/docs/contract/encodeFunctionData'\n\nexport type PrepareEncodeFunctionDataParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | undefined = ContractFunctionName<abi>,\n  ///\n  hasFunctions = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [ExtractAbiFunctions<abi>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n  allFunctionNames = ContractFunctionName<abi>,\n> = {\n  abi: abi\n} & UnionEvaluate<\n  IsNarrowable<abi, Abi> extends true\n    ? abi['length'] extends 1\n      ? { functionName?: functionName | allFunctionNames | Hex | undefined }\n      : { functionName: functionName | allFunctionNames | Hex }\n    : { functionName?: functionName | allFunctionNames | Hex | undefined }\n> &\n  UnionEvaluate<{ args?: allArgs | undefined }> &\n  (hasFunctions extends true ? unknown : never)\n\nexport type PrepareEncodeFunctionDataReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | undefined = ContractFunctionName<abi>,\n> = {\n  abi: abi extends Abi\n    ? functionName extends ContractFunctionName<abi>\n      ? [ExtractAbiFunction<abi, functionName>]\n      : Abi\n    : Abi\n  functionName: Hex\n}\n\nexport type PrepareEncodeFunctionDataErrorType =\n  | AbiFunctionNotFoundErrorType\n  | ConcatHexErrorType\n  | FormatAbiItemErrorType\n  | GetAbiItemErrorType\n  | ToFunctionSelectorErrorType\n  | ErrorType\n\nexport function prepareEncodeFunctionData<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\n>(\n  parameters: PrepareEncodeFunctionDataParameters<abi, functionName>,\n): PrepareEncodeFunctionDataReturnType<abi, functionName> {\n  const { abi, args, functionName } =\n    parameters as PrepareEncodeFunctionDataParameters\n\n  let abiItem = abi[0]\n  if (functionName) {\n    const item = getAbiItem({\n      abi,\n      args,\n      name: functionName,\n    })\n    if (!item) throw new AbiFunctionNotFoundError(functionName, { docsPath })\n    abiItem = item\n  }\n\n  if (abiItem.type !== 'function')\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\n\n  return {\n    abi: [abiItem],\n    functionName: toFunctionSelector(formatAbiItem(abiItem)),\n  } as unknown as PrepareEncodeFunctionDataReturnType<abi, functionName>\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AA2BA,MAAM,WAAW;AAyDX,SAAU,0BAId,UAAkE;IAElE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,GAC/B;IAEF,IAAI,UAAU,GAAG,CAAC,EAAE;IACpB,IAAI,cAAc;QAChB,MAAM,OAAO,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW;YACtB;YACA;YACA,MAAM;;QAER,IAAI,CAAC,MAAM,MAAM,IAAI,+IAAA,CAAA,2BAAwB,CAAC,cAAc;YAAE;QAAQ;QACtE,UAAU;IACZ;IAEA,IAAI,QAAQ,IAAI,KAAK,YACnB,MAAM,IAAI,+IAAA,CAAA,2BAAwB,CAAC,WAAW;QAAE;IAAQ;IAE1D,OAAO;QACL,KAAK;YAAC;SAAQ;QACd,cAAc,CAAA,GAAA,qKAAA,CAAA,qBAAkB,AAAlB,EAAmB,CAAA,GAAA,+JAAA,CAAA,gBAAa,AAAb,EAAc;;AAEnD"}},
    {"offset": {"line": 1967, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1972, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/abi/encodeFunctionData.ts"],"sourcesContent":["import type { Abi, AbiStateMutability, ExtractAbiFunctions } from 'abitype'\n\nimport type { AbiFunctionNotFoundErrorType } from '../../errors/abi.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from '../../types/contract.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport type { ToFunctionSelectorErrorType } from '../hash/toFunctionSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\nimport type { FormatAbiItemErrorType } from './formatAbiItem.js'\nimport type { GetAbiItemErrorType } from './getAbiItem.js'\nimport { prepareEncodeFunctionData } from './prepareEncodeFunctionData.js'\n\nexport type EncodeFunctionDataParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | Hex\n    | undefined = ContractFunctionName<abi>,\n  ///\n  hasFunctions = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [ExtractAbiFunctions<abi>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n  allFunctionNames = ContractFunctionName<abi>,\n> = {\n  abi: abi\n} & UnionEvaluate<\n  IsNarrowable<abi, Abi> extends true\n    ? abi['length'] extends 1\n      ? { functionName?: functionName | allFunctionNames | Hex | undefined }\n      : { functionName: functionName | allFunctionNames | Hex }\n    : { functionName?: functionName | allFunctionNames | Hex | undefined }\n> &\n  UnionEvaluate<\n    readonly [] extends allArgs\n      ? { args?: allArgs | undefined }\n      : { args: allArgs }\n  > &\n  (hasFunctions extends true ? unknown : never)\n\nexport type EncodeFunctionDataReturnType = Hex\n\nexport type EncodeFunctionDataErrorType =\n  | AbiFunctionNotFoundErrorType\n  | ConcatHexErrorType\n  | EncodeAbiParametersErrorType\n  | FormatAbiItemErrorType\n  | GetAbiItemErrorType\n  | ToFunctionSelectorErrorType\n  | ErrorType\n\nexport function encodeFunctionData<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\n>(\n  parameters: EncodeFunctionDataParameters<abi, functionName>,\n): EncodeFunctionDataReturnType {\n  const { args } = parameters as EncodeFunctionDataParameters\n\n  const { abi, functionName } = (() => {\n    if (\n      parameters.abi.length === 1 &&\n      parameters.functionName?.startsWith('0x')\n    )\n      return parameters as { abi: Abi; functionName: Hex }\n    return prepareEncodeFunctionData(parameters)\n  })()\n\n  const abiItem = abi[0]\n  const signature = functionName\n\n  const data =\n    'inputs' in abiItem && abiItem.inputs\n      ? encodeAbiParameters(abiItem.inputs, args ?? [])\n      : undefined\n  return concatHex([signature, data ?? '0x'])\n}\n"],"names":[],"mappings":";;;;;;;;;;AAsEM,SAAU,mBAId,UAA2D;IAE3D,MAAM,EAAE,IAAI,EAAE,GAAG;IAEjB,MAAM,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,CAAC;QAC7B,IACE,WAAW,GAAG,CAAC,MAAM,KAAK,KAC1B,WAAW,YAAY,EAAE,WAAW,OAEpC,OAAO;QACT,OAAO,CAAA,GAAA,2KAAA,CAAA,4BAAyB,AAAzB,EAA0B;IACnC,CAAC;IAED,MAAM,UAAU,GAAG,CAAC,EAAE;IACtB,MAAM,YAAY;IAElB,MAAM,OACJ,YAAY,WAAW,QAAQ,MAAM,GACjC,CAAA,GAAA,qKAAA,CAAA,sBAAmB,AAAnB,EAAoB,QAAQ,MAAM,EAAE,QAAQ,EAAE,IAC9C;IACN,OAAO,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAT,EAAU;QAAC;QAAW,QAAQ;KAAK;AAC5C"}},
    {"offset": {"line": 1996, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2001, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/encoding/fromBytes.ts"],"sourcesContent":["import { InvalidBytesBooleanError } from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type TrimErrorType, trim } from '../data/trim.js'\n\nimport {\n  type AssertSizeErrorType,\n  type HexToBigIntErrorType,\n  type HexToNumberErrorType,\n  assertSize,\n  hexToBigInt,\n  hexToNumber,\n} from './fromHex.js'\nimport { type BytesToHexErrorType, bytesToHex } from './toHex.js'\n\nexport type FromBytesParameters<\n  TTo extends 'string' | 'hex' | 'bigint' | 'number' | 'boolean',\n> =\n  | TTo\n  | {\n      /** Size of the bytes. */\n      size?: number | undefined\n      /** Type to convert to. */\n      to: TTo\n    }\n\nexport type FromBytesReturnType<TTo> = TTo extends 'string'\n  ? string\n  : TTo extends 'hex'\n    ? Hex\n    : TTo extends 'bigint'\n      ? bigint\n      : TTo extends 'number'\n        ? number\n        : TTo extends 'boolean'\n          ? boolean\n          : never\n\nexport type FromBytesErrorType =\n  | BytesToHexErrorType\n  | BytesToBigIntErrorType\n  | BytesToBoolErrorType\n  | BytesToNumberErrorType\n  | BytesToStringErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a UTF-8 string, hex value, number, bigint or boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes\n * - Example: https://viem.sh/docs/utilities/fromBytes#usage\n *\n * @param bytes Byte array to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromBytes } from 'viem'\n * const data = fromBytes(new Uint8Array([1, 164]), 'number')\n * // 420\n *\n * @example\n * import { fromBytes } from 'viem'\n * const data = fromBytes(\n *   new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]),\n *   'string'\n * )\n * // 'Hello world'\n */\nexport function fromBytes<\n  TTo extends 'string' | 'hex' | 'bigint' | 'number' | 'boolean',\n>(\n  bytes: ByteArray,\n  toOrOpts: FromBytesParameters<TTo>,\n): FromBytesReturnType<TTo> {\n  const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts\n  const to = opts.to\n\n  if (to === 'number')\n    return bytesToNumber(bytes, opts) as FromBytesReturnType<TTo>\n  if (to === 'bigint')\n    return bytesToBigInt(bytes, opts) as FromBytesReturnType<TTo>\n  if (to === 'boolean')\n    return bytesToBool(bytes, opts) as FromBytesReturnType<TTo>\n  if (to === 'string')\n    return bytesToString(bytes, opts) as FromBytesReturnType<TTo>\n  return bytesToHex(bytes, opts) as FromBytesReturnType<TTo>\n}\n\nexport type BytesToBigIntOpts = {\n  /** Whether or not the number of a signed representation. */\n  signed?: boolean | undefined\n  /** Size of the bytes. */\n  size?: number | undefined\n}\n\nexport type BytesToBigIntErrorType =\n  | BytesToHexErrorType\n  | HexToBigIntErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestobigint\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { bytesToBigInt } from 'viem'\n * const data = bytesToBigInt(new Uint8Array([1, 164]))\n * // 420n\n */\nexport function bytesToBigInt(\n  bytes: ByteArray,\n  opts: BytesToBigIntOpts = {},\n): bigint {\n  if (typeof opts.size !== 'undefined') assertSize(bytes, { size: opts.size })\n  const hex = bytesToHex(bytes, opts)\n  return hexToBigInt(hex, opts)\n}\n\nexport type BytesToBoolOpts = {\n  /** Size of the bytes. */\n  size?: number | undefined\n}\n\nexport type BytesToBoolErrorType =\n  | AssertSizeErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestobool\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { bytesToBool } from 'viem'\n * const data = bytesToBool(new Uint8Array([1]))\n * // true\n */\nexport function bytesToBool(\n  bytes_: ByteArray,\n  opts: BytesToBoolOpts = {},\n): boolean {\n  let bytes = bytes_\n  if (typeof opts.size !== 'undefined') {\n    assertSize(bytes, { size: opts.size })\n    bytes = trim(bytes)\n  }\n  if (bytes.length > 1 || bytes[0] > 1)\n    throw new InvalidBytesBooleanError(bytes)\n  return Boolean(bytes[0])\n}\n\nexport type BytesToNumberOpts = BytesToBigIntOpts\n\nexport type BytesToNumberErrorType =\n  | BytesToHexErrorType\n  | HexToNumberErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestonumber\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { bytesToNumber } from 'viem'\n * const data = bytesToNumber(new Uint8Array([1, 164]))\n * // 420\n */\nexport function bytesToNumber(\n  bytes: ByteArray,\n  opts: BytesToNumberOpts = {},\n): number {\n  if (typeof opts.size !== 'undefined') assertSize(bytes, { size: opts.size })\n  const hex = bytesToHex(bytes, opts)\n  return hexToNumber(hex, opts)\n}\n\nexport type BytesToStringOpts = {\n  /** Size of the bytes. */\n  size?: number | undefined\n}\n\nexport type BytesToStringErrorType =\n  | AssertSizeErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a byte array into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestostring\n *\n * @param bytes Byte array to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { bytesToString } from 'viem'\n * const data = bytesToString(new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\n * // 'Hello world'\n */\nexport function bytesToString(\n  bytes_: ByteArray,\n  opts: BytesToStringOpts = {},\n): string {\n  let bytes = bytes_\n  if (typeof opts.size !== 'undefined') {\n    assertSize(bytes, { size: opts.size })\n    bytes = trim(bytes, { dir: 'right' })\n  }\n  return new TextDecoder().decode(bytes)\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAqEM,SAAU,UAGd,KAAgB,EAChB,QAAkC;IAElC,MAAM,OAAO,OAAO,aAAa,WAAW;QAAE,IAAI;IAAQ,IAAK;IAC/D,MAAM,KAAK,KAAK,EAAE;IAElB,IAAI,OAAO,UACT,OAAO,cAAc,OAAO;IAC9B,IAAI,OAAO,UACT,OAAO,cAAc,OAAO;IAC9B,IAAI,OAAO,WACT,OAAO,YAAY,OAAO;IAC5B,IAAI,OAAO,UACT,OAAO,cAAc,OAAO;IAC9B,OAAO,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW,OAAO;AAC3B;AA4BM,SAAU,cACd,KAAgB,EAChB,OAA0B,CAAA,CAAE;IAE5B,IAAI,OAAO,KAAK,IAAI,KAAK,aAAa,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAV,EAAW,OAAO;QAAE,MAAM,KAAK,IAAI;IAAA;IACzE,MAAM,MAAM,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW,OAAO;IAC9B,OAAO,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAX,EAAY,KAAK;AAC1B;AA0BM,SAAU,YACd,MAAiB,EACjB,OAAwB,CAAA,CAAE;IAE1B,IAAI,QAAQ;IACZ,IAAI,OAAO,KAAK,IAAI,KAAK,aAAa;QACpC,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAV,EAAW,OAAO;YAAE,MAAM,KAAK,IAAI;QAAA;QACnC,QAAQ,CAAA,GAAA,uJAAA,CAAA,OAAI,AAAJ,EAAK;IACf;IACA,IAAI,MAAM,MAAM,GAAG,KAAK,KAAK,CAAC,EAAE,GAAG,GACjC,MAAM,IAAI,oJAAA,CAAA,2BAAwB,CAAC;IACrC,OAAO,QAAQ,KAAK,CAAC,EAAE;AACzB;AAuBM,SAAU,cACd,KAAgB,EAChB,OAA0B,CAAA,CAAE;IAE5B,IAAI,OAAO,KAAK,IAAI,KAAK,aAAa,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAV,EAAW,OAAO;QAAE,MAAM,KAAK,IAAI;IAAA;IACzE,MAAM,MAAM,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW,OAAO;IAC9B,OAAO,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAX,EAAY,KAAK;AAC1B;AA0BM,SAAU,cACd,MAAiB,EACjB,OAA0B,CAAA,CAAE;IAE5B,IAAI,QAAQ;IACZ,IAAI,OAAO,KAAK,IAAI,KAAK,aAAa;QACpC,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAV,EAAW,OAAO;YAAE,MAAM,KAAK,IAAI;QAAA;QACnC,QAAQ,CAAA,GAAA,uJAAA,CAAA,OAAI,AAAJ,EAAK,OAAO;YAAE,KAAK;QAAO;IACpC;IACA,OAAO,IAAI,cAAc,MAAM,CAAC;AAClC"}},
    {"offset": {"line": 2065, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2070, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/accounts/toAccount.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../errors/address.js'\nimport {\n  type IsAddressErrorType,\n  isAddress,\n} from '../utils/address/isAddress.js'\n\nimport type { ErrorType } from '../errors/utils.js'\nimport type {\n  AccountSource,\n  CustomSource,\n  JsonRpcAccount,\n  LocalAccount,\n} from './types.js'\n\ntype GetAccountReturnType<TAccountSource extends AccountSource> =\n  | (TAccountSource extends Address ? JsonRpcAccount : never)\n  | (TAccountSource extends CustomSource ? LocalAccount : never)\n\nexport type ToAccountErrorType =\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\n/**\n * @description Creates an Account from a custom signing implementation.\n *\n * @returns A Local Account.\n */\nexport function toAccount<TAccountSource extends AccountSource>(\n  source: TAccountSource,\n): GetAccountReturnType<TAccountSource> {\n  if (typeof source === 'string') {\n    if (!isAddress(source, { strict: false }))\n      throw new InvalidAddressError({ address: source })\n    return {\n      address: source,\n      type: 'json-rpc',\n    } as GetAccountReturnType<TAccountSource>\n  }\n\n  if (!isAddress(source.address, { strict: false }))\n    throw new InvalidAddressError({ address: source.address })\n  return {\n    address: source.address,\n    nonceManager: source.nonceManager,\n    signMessage: source.signMessage,\n    signTransaction: source.signTransaction,\n    signTypedData: source.signTypedData,\n    source: 'custom',\n    type: 'local',\n  } as GetAccountReturnType<TAccountSource>\n}\n"],"names":[],"mappings":";;;;;;;;AAiCM,SAAU,UACd,MAAsB;IAEtB,IAAI,OAAO,WAAW,UAAU;QAC9B,IAAI,CAAC,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAT,EAAU,QAAQ;YAAE,QAAQ;QAAK,IACpC,MAAM,IAAI,mJAAA,CAAA,sBAAmB,CAAC;YAAE,SAAS;QAAM;QACjD,OAAO;YACL,SAAS;YACT,MAAM;;IAEV;IAEA,IAAI,CAAC,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAT,EAAU,OAAO,OAAO,EAAE;QAAE,QAAQ;IAAK,IAC5C,MAAM,IAAI,mJAAA,CAAA,sBAAmB,CAAC;QAAE,SAAS,OAAO,OAAO;IAAA;IACzD,OAAO;QACL,SAAS,OAAO,OAAO;QACvB,cAAc,OAAO,YAAY;QACjC,aAAa,OAAO,WAAW;QAC/B,iBAAiB,OAAO,eAAe;QACvC,eAAe,OAAO,aAAa;QACnC,QAAQ;QACR,MAAM;;AAEV"}},
    {"offset": {"line": 2105, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2110, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/accounts/utils/publicKeyToAddress.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport {\n  type ChecksumAddressErrorType,\n  checksumAddress,\n} from '../../utils/address/getAddress.js'\nimport {\n  type Keccak256ErrorType,\n  keccak256,\n} from '../../utils/hash/keccak256.js'\n\nexport type PublicKeyToAddressErrorType =\n  | ChecksumAddressErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\n/**\n * @description Converts an ECDSA public key to an address.\n *\n * @param publicKey The public key to convert.\n *\n * @returns The address.\n */\nexport function publicKeyToAddress(publicKey: Hex): Address {\n  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26)\n  return checksumAddress(`0x${address}`) as Address\n}\n"],"names":[],"mappings":";;;;;;;;AAyBM,SAAU,mBAAmB,SAAc;IAC/C,MAAM,UAAU,CAAA,GAAA,4JAAA,CAAA,YAAS,AAAT,EAAU,CAAA,EAAA,EAAK,UAAU,SAAS,CAAC,GAAE,CAAE,EAAE,SAAS,CAAC;IACnE,OAAO,CAAA,GAAA,gKAAA,CAAA,kBAAe,AAAf,EAAgB,CAAA,EAAA,EAAK,QAAO,CAAE;AACvC"}},
    {"offset": {"line": 2122, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2127, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/constants/strings.ts"],"sourcesContent":["export const presignMessagePrefix = '\\x19Ethereum Signed Message:\\n'\n"],"names":[],"mappings":";;;AAAO,MAAM,uBAAuB"}},
    {"offset": {"line": 2131, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2136, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/signature/toPrefixedMessage.ts"],"sourcesContent":["import { presignMessagePrefix } from '../../constants/strings.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, SignableMessage } from '../../types/misc.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport { size } from '../data/size.js'\nimport {\n  type BytesToHexErrorType,\n  type StringToHexErrorType,\n  bytesToHex,\n  stringToHex,\n} from '../encoding/toHex.js'\n\nexport type ToPrefixedMessageErrorType =\n  | ConcatErrorType\n  | StringToHexErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\nexport function toPrefixedMessage(message_: SignableMessage): Hex {\n  const message = (() => {\n    if (typeof message_ === 'string') return stringToHex(message_)\n    if (typeof message_.raw === 'string') return message_.raw\n    return bytesToHex(message_.raw)\n  })()\n  const prefix = stringToHex(`${presignMessagePrefix}${size(message)}`)\n  return concat([prefix, message])\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAkBM,SAAU,kBAAkB,QAAyB;IACzD,MAAM,UAAU,CAAC;QACf,IAAI,OAAO,aAAa,UAAU,OAAO,CAAA,GAAA,4JAAA,CAAA,cAAW,AAAX,EAAY;QACrD,IAAI,OAAO,SAAS,GAAG,KAAK,UAAU,OAAO,SAAS,GAAG;QACzD,OAAO,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW,SAAS,GAAG;IAChC,CAAC;IACD,MAAM,SAAS,CAAA,GAAA,4JAAA,CAAA,cAAW,AAAX,EAAY,CAAA,EAAG,sJAAA,CAAA,uBAAoB,CAAA,EAAG,CAAA,GAAA,uJAAA,CAAA,OAAI,AAAJ,EAAK,SAAQ,CAAE;IACpE,OAAO,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAN,EAAO;QAAC;QAAQ;KAAQ;AACjC"}},
    {"offset": {"line": 2160, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2165, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/signature/hashMessage.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport { toPrefixedMessage } from './toPrefixedMessage.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type HashMessage<TTo extends To> =\n  | (TTo extends 'bytes' ? ByteArray : never)\n  | (TTo extends 'hex' ? Hex : never)\n\nexport type HashMessageErrorType = Keccak256ErrorType | ErrorType\n\nexport function hashMessage<TTo extends To = 'hex'>(\n  message: SignableMessage,\n  to_?: TTo | undefined,\n): HashMessage<TTo> {\n  return keccak256(toPrefixedMessage(message), to_)\n}\n"],"names":[],"mappings":";;;;;;;;AAaM,SAAU,YACd,OAAwB,EACxB,GAAqB;IAErB,OAAO,CAAA,GAAA,4JAAA,CAAA,YAAS,AAAT,EAAU,CAAA,GAAA,yKAAA,CAAA,oBAAiB,AAAjB,EAAkB,UAAU;AAC/C"}},
    {"offset": {"line": 2176, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2181, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/signature/serializeSignature.ts"],"sourcesContent":["import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport { type HexToBigIntErrorType, hexToBigInt } from '../encoding/fromHex.js'\nimport type { ToHexErrorType } from '../encoding/toHex.js'\n\nexport type SerializeSignatureErrorType =\n  | HexToBigIntErrorType\n  | ToHexErrorType\n  | ErrorType\n\n/**\n * @description Converts a signature into hex format.\n *\n * @param signature The signature to convert.\n * @returns The signature in hex format.\n *\n * @example\n * serializeSignature({\n *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\n *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\n *   yParity: 1\n * })\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n */\nexport function serializeSignature({ r, s, v, yParity }: Signature): Hex {\n  const yParity_ = (() => {\n    if (yParity === 0 || yParity === 1) return yParity\n    if (v && (v === 27n || v === 28n || v >= 35n)) return v % 2n === 0n ? 1 : 0\n    throw new Error('Invalid `v` or `yParity` value')\n  })()\n  return `0x${new secp256k1.Signature(\n    hexToBigInt(r),\n    hexToBigInt(s),\n  ).toCompactHex()}${yParity_ === 0 ? '1b' : '1c'}`\n}\n"],"names":[],"mappings":";;;;;;;;AA0BM,SAAU,mBAAmB,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,EAAa;IAChE,MAAM,WAAW,CAAC;QAChB,IAAI,YAAY,KAAK,YAAY,GAAG,OAAO;QAC3C,IAAI,KAAK,CAAC,MAAM,GAAG,IAAI,MAAM,GAAG,IAAI,KAAK,GAAG,GAAG,OAAO,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI;QAC1E,MAAM,IAAI,MAAM;IAClB,CAAC;IACD,OAAO,CAAA,EAAA,EAAK,IAAI,+KAAA,CAAA,YAAS,CAAC,SAAS,CACjC,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAX,EAAY,IACZ,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAX,EAAY,IACZ,YAAY,GAAE,EAAG,aAAa,IAAI,OAAO,KAAI,CAAE;AACnD"}},
    {"offset": {"line": 2197, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2202, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/accounts/utils/sign.ts"],"sourcesContent":["// TODO(v3): Convert to sync.\n\nimport { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\n\nexport type SignParameters = {\n  hash: Hex\n  privateKey: Hex\n}\n\nexport type SignReturnType = Signature\n\nexport type SignErrorType = ToHexErrorType | ErrorType\n\n/**\n * @description Signs a hash with a given private key.\n *\n * @param hash The hash to sign.\n * @param privateKey The private key to sign with.\n *\n * @returns The signature.\n */\nexport async function sign({\n  hash,\n  privateKey,\n}: SignParameters): Promise<SignReturnType> {\n  const { r, s, recovery } = secp256k1.sign(hash.slice(2), privateKey.slice(2))\n  return {\n    r: toHex(r),\n    s: toHex(s),\n    v: recovery ? 28n : 27n,\n    yParity: recovery,\n  }\n}\n"],"names":[],"mappings":"AAAA,6BAA6B;;;;;;;;;AAyBtB,eAAe,KAAK,EACzB,IAAI,EACJ,UAAU,EACK;IACf,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,GAAG,+KAAA,CAAA,YAAS,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,IAAI,WAAW,KAAK,CAAC;IAC1E,OAAO;QACL,GAAG,CAAA,GAAA,4JAAA,CAAA,QAAK,AAAL,EAAM;QACT,GAAG,CAAA,GAAA,4JAAA,CAAA,QAAK,AAAL,EAAM;QACT,GAAG,WAAW,GAAG,GAAG,GAAG;QACvB,SAAS;;AAEb"}},
    {"offset": {"line": 2220, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2225, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/accounts/utils/signMessage.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, SignableMessage } from '../../types/misc.js'\nimport {\n  type HashMessageErrorType,\n  hashMessage,\n} from '../../utils/signature/hashMessage.js'\nimport {\n  type SerializeSignatureErrorType,\n  serializeSignature,\n} from '../../utils/signature/serializeSignature.js'\n\nimport { type SignErrorType, sign } from './sign.js'\n\nexport type SignMessageParameters = {\n  /** The message to sign. */\n  message: SignableMessage\n  /** The private key to sign with. */\n  privateKey: Hex\n}\n\nexport type SignMessageReturnType = Hex\n\nexport type SignMessageErrorType =\n  | SignErrorType\n  | HashMessageErrorType\n  | SerializeSignatureErrorType\n  | ErrorType\n\n/**\n * @description Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191):\n * `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n *\n * @returns The signature.\n */\nexport async function signMessage({\n  message,\n  privateKey,\n}: SignMessageParameters): Promise<SignMessageReturnType> {\n  const signature = await sign({ hash: hashMessage(message), privateKey })\n  return serializeSignature(signature)\n}\n"],"names":[],"mappings":";;;;;;;;;;AAkCO,eAAe,YAAY,EAChC,OAAO,EACP,UAAU,EACY;IACtB,MAAM,YAAY,MAAM,CAAA,GAAA,2JAAA,CAAA,OAAI,AAAJ,EAAK;QAAE,MAAM,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAX,EAAY;QAAU;IAAU;IACrE,OAAO,CAAA,GAAA,0KAAA,CAAA,qBAAkB,AAAlB,EAAmB;AAC5B"}},
    {"offset": {"line": 2242, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2247, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/constants/unit.ts"],"sourcesContent":["export const etherUnits = {\n  gwei: 9,\n  wei: 18,\n}\nexport const gweiUnits = {\n  ether: -9,\n  wei: 9,\n}\nexport const weiUnits = {\n  ether: -18,\n  gwei: -9,\n}\n"],"names":[],"mappings":";;;;;AAAO,MAAM,aAAa;IACxB,MAAM;IACN,KAAK;;AAEA,MAAM,YAAY;IACvB,OAAO,CAAC;IACR,KAAK;;AAEA,MAAM,WAAW;IACtB,OAAO,CAAC;IACR,MAAM,CAAC"}},
    {"offset": {"line": 2264, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2269, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/unit/formatUnits.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\n\nexport type FormatUnitsErrorType = ErrorType\n\n/**\n *  Divides a number by a given exponent of base 10 (10exponent), and formats it into a string representation of the number..\n *\n * - Docs: https://viem.sh/docs/utilities/formatUnits\n *\n * @example\n * import { formatUnits } from 'viem'\n *\n * formatUnits(420000000000n, 9)\n * // '420'\n */\nexport function formatUnits(value: bigint, decimals: number) {\n  let display = value.toString()\n\n  const negative = display.startsWith('-')\n  if (negative) display = display.slice(1)\n\n  display = display.padStart(decimals, '0')\n\n  let [integer, fraction] = [\n    display.slice(0, display.length - decimals),\n    display.slice(display.length - decimals),\n  ]\n  fraction = fraction.replace(/(0+)$/, '')\n  return `${negative ? '-' : ''}${integer || '0'}${\n    fraction ? `.${fraction}` : ''\n  }`\n}\n"],"names":[],"mappings":"AAIA;;;;;;;;;;;;;AAWM,SAAU,YAAY,KAAa,EAAE,QAAgB;IACzD,IAAI,UAAU,MAAM,QAAQ;IAE5B,MAAM,WAAW,QAAQ,UAAU,CAAC;IACpC,IAAI,UAAU,UAAU,QAAQ,KAAK,CAAC;IAEtC,UAAU,QAAQ,QAAQ,CAAC,UAAU;IAErC,IAAI,CAAC,SAAS,SAAS,GAAG;QACxB,QAAQ,KAAK,CAAC,GAAG,QAAQ,MAAM,GAAG;QAClC,QAAQ,KAAK,CAAC,QAAQ,MAAM,GAAG;KAChC;IACD,WAAW,SAAS,OAAO,CAAC,SAAS;IACrC,OAAO,CAAA,EAAG,WAAW,MAAM,GAAE,EAAG,WAAW,IAAG,EAC5C,WAAW,CAAA,CAAA,EAAI,SAAQ,CAAE,GAAG,GAC9B,CAAE;AACJ"}},
    {"offset": {"line": 2294, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2299, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/unit/formatEther.ts"],"sourcesContent":["import { etherUnits } from '../../constants/unit.js'\n\nimport { type FormatUnitsErrorType, formatUnits } from './formatUnits.js'\n\nexport type FormatEtherErrorType = FormatUnitsErrorType\n\n/**\n * Converts numerical wei to a string representation of ether.\n *\n * - Docs: https://viem.sh/docs/utilities/formatEther\n *\n * @example\n * import { formatEther } from 'viem'\n *\n * formatEther(1000000000000000000n)\n * // '1'\n */\nexport function formatEther(wei: bigint, unit: 'wei' | 'gwei' = 'wei') {\n  return formatUnits(wei, etherUnits[unit])\n}\n"],"names":[],"mappings":";;;;;;;;AAiBM,SAAU,YAAY,GAAW,EAAE,OAAuB,KAAK;IACnE,OAAO,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAX,EAAY,KAAK,mJAAA,CAAA,aAAU,CAAC,KAAK;AAC1C"}},
    {"offset": {"line": 2310, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2315, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/unit/formatGwei.ts"],"sourcesContent":["import { gweiUnits } from '../../constants/unit.js'\n\nimport { type FormatUnitsErrorType, formatUnits } from './formatUnits.js'\n\nexport type FormatGweiErrorType = FormatUnitsErrorType\n\n/**\n * Converts numerical wei to a string representation of gwei.\n *\n * - Docs: https://viem.sh/docs/utilities/formatGwei\n *\n * @example\n * import { formatGwei } from 'viem'\n *\n * formatGwei(1000000000n)\n * // '1'\n */\nexport function formatGwei(wei: bigint, unit: 'wei' = 'wei') {\n  return formatUnits(wei, gweiUnits[unit])\n}\n"],"names":[],"mappings":";;;;;;;;AAiBM,SAAU,WAAW,GAAW,EAAE,OAAc,KAAK;IACzD,OAAO,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAX,EAAY,KAAK,mJAAA,CAAA,YAAS,CAAC,KAAK;AACzC"}},
    {"offset": {"line": 2326, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2331, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/errors/transaction.ts"],"sourcesContent":["import type { Account } from '../accounts/types.js'\nimport type { SendTransactionParameters } from '../actions/wallet/sendTransaction.js'\nimport type { BlockTag } from '../types/block.js'\nimport type { Chain } from '../types/chain.js'\nimport type { Hash, Hex } from '../types/misc.js'\nimport type { TransactionType } from '../types/transaction.js'\nimport { formatEther } from '../utils/unit/formatEther.js'\nimport { formatGwei } from '../utils/unit/formatGwei.js'\n\nimport { BaseError } from './base.js'\n\nexport function prettyPrint(\n  args: Record<string, bigint | number | string | undefined | false | unknown>,\n) {\n  const entries = Object.entries(args)\n    .map(([key, value]) => {\n      if (value === undefined || value === false) return null\n      return [key, value]\n    })\n    .filter(Boolean) as [string, string][]\n  const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0)\n  return entries\n    .map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`)\n    .join('\\n')\n}\n\nexport type FeeConflictErrorType = FeeConflictError & {\n  name: 'FeeConflictError'\n}\nexport class FeeConflictError extends BaseError {\n  override name = 'FeeConflictError'\n  constructor() {\n    super(\n      [\n        'Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.',\n        'Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others.',\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type InvalidLegacyVErrorType = InvalidLegacyVError & {\n  name: 'InvalidLegacyVError'\n}\nexport class InvalidLegacyVError extends BaseError {\n  override name = 'InvalidLegacyVError'\n\n  constructor({ v }: { v: bigint }) {\n    super(`Invalid \\`v\\` value \"${v}\". Expected 27 or 28.`)\n  }\n}\n\nexport type InvalidSerializableTransactionErrorType =\n  InvalidSerializableTransactionError & {\n    name: 'InvalidSerializableTransactionError'\n  }\nexport class InvalidSerializableTransactionError extends BaseError {\n  override name = 'InvalidSerializableTransactionError'\n\n  constructor({ transaction }: { transaction: Record<string, unknown> }) {\n    super('Cannot infer a transaction type from provided transaction.', {\n      metaMessages: [\n        'Provided Transaction:',\n        '{',\n        prettyPrint(transaction),\n        '}',\n        '',\n        'To infer the type, either provide:',\n        '- a `type` to the Transaction, or',\n        '- an EIP-1559 Transaction with `maxFeePerGas`, or',\n        '- an EIP-2930 Transaction with `gasPrice` & `accessList`, or',\n        '- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or',\n        '- a Legacy Transaction with `gasPrice`',\n      ],\n    })\n  }\n}\n\nexport type InvalidSerializedTransactionTypeErrorType =\n  InvalidSerializedTransactionTypeError & {\n    name: 'InvalidSerializedTransactionTypeError'\n  }\nexport class InvalidSerializedTransactionTypeError extends BaseError {\n  override name = 'InvalidSerializedTransactionType'\n\n  serializedType: Hex\n\n  constructor({ serializedType }: { serializedType: Hex }) {\n    super(`Serialized transaction type \"${serializedType}\" is invalid.`)\n\n    this.serializedType = serializedType\n  }\n}\n\nexport type InvalidSerializedTransactionErrorType =\n  InvalidSerializedTransactionError & {\n    name: 'InvalidSerializedTransactionError'\n  }\nexport class InvalidSerializedTransactionError extends BaseError {\n  override name = 'InvalidSerializedTransactionError'\n\n  serializedTransaction: Hex\n  type: TransactionType\n\n  constructor({\n    attributes,\n    serializedTransaction,\n    type,\n  }: {\n    attributes: Record<string, unknown>\n    serializedTransaction: Hex\n    type: TransactionType\n  }) {\n    const missing = Object.entries(attributes)\n      .map(([key, value]) => (typeof value === 'undefined' ? key : undefined))\n      .filter(Boolean)\n    super(`Invalid serialized transaction of type \"${type}\" was provided.`, {\n      metaMessages: [\n        `Serialized Transaction: \"${serializedTransaction}\"`,\n        missing.length > 0 ? `Missing Attributes: ${missing.join(', ')}` : '',\n      ].filter(Boolean),\n    })\n\n    this.serializedTransaction = serializedTransaction\n    this.type = type\n  }\n}\n\nexport type InvalidStorageKeySizeErrorType = InvalidStorageKeySizeError & {\n  name: 'InvalidStorageKeySizeError'\n}\nexport class InvalidStorageKeySizeError extends BaseError {\n  override name = 'InvalidStorageKeySizeError'\n\n  constructor({ storageKey }: { storageKey: Hex }) {\n    super(\n      `Size for storage key \"${storageKey}\" is invalid. Expected 32 bytes. Got ${Math.floor(\n        (storageKey.length - 2) / 2,\n      )} bytes.`,\n    )\n  }\n}\n\nexport type TransactionExecutionErrorType = TransactionExecutionError & {\n  name: 'TransactionExecutionError'\n}\nexport class TransactionExecutionError extends BaseError {\n  override cause: BaseError\n\n  override name = 'TransactionExecutionError'\n\n  constructor(\n    cause: BaseError,\n    {\n      account,\n      docsPath,\n      chain,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    }: Omit<SendTransactionParameters, 'account' | 'chain'> & {\n      account: Account\n      chain?: Chain | undefined\n      docsPath?: string | undefined\n    },\n  ) {\n    const prettyArgs = prettyPrint({\n      chain: chain && `${chain?.name} (id: ${chain?.id})`,\n      from: account?.address,\n      to,\n      value:\n        typeof value !== 'undefined' &&\n        `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\n      data,\n      gas,\n      gasPrice:\n        typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\n      maxFeePerGas:\n        typeof maxFeePerGas !== 'undefined' &&\n        `${formatGwei(maxFeePerGas)} gwei`,\n      maxPriorityFeePerGas:\n        typeof maxPriorityFeePerGas !== 'undefined' &&\n        `${formatGwei(maxPriorityFeePerGas)} gwei`,\n      nonce,\n    })\n\n    super(cause.shortMessage, {\n      cause,\n      docsPath,\n      metaMessages: [\n        ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\n        'Request Arguments:',\n        prettyArgs,\n      ].filter(Boolean) as string[],\n    })\n    this.cause = cause\n  }\n}\n\nexport type TransactionNotFoundErrorType = TransactionNotFoundError & {\n  name: 'TransactionNotFoundError'\n}\nexport class TransactionNotFoundError extends BaseError {\n  override name = 'TransactionNotFoundError'\n  constructor({\n    blockHash,\n    blockNumber,\n    blockTag,\n    hash,\n    index,\n  }: {\n    blockHash?: Hash | undefined\n    blockNumber?: bigint | undefined\n    blockTag?: BlockTag | undefined\n    hash?: Hash | undefined\n    index?: number | undefined\n  }) {\n    let identifier = 'Transaction'\n    if (blockTag && index !== undefined)\n      identifier = `Transaction at block time \"${blockTag}\" at index \"${index}\"`\n    if (blockHash && index !== undefined)\n      identifier = `Transaction at block hash \"${blockHash}\" at index \"${index}\"`\n    if (blockNumber && index !== undefined)\n      identifier = `Transaction at block number \"${blockNumber}\" at index \"${index}\"`\n    if (hash) identifier = `Transaction with hash \"${hash}\"`\n    super(`${identifier} could not be found.`)\n  }\n}\n\nexport type TransactionReceiptNotFoundErrorType =\n  TransactionReceiptNotFoundError & {\n    name: 'TransactionReceiptNotFoundError'\n  }\nexport class TransactionReceiptNotFoundError extends BaseError {\n  override name = 'TransactionReceiptNotFoundError'\n  constructor({ hash }: { hash: Hash }) {\n    super(\n      `Transaction receipt with hash \"${hash}\" could not be found. The Transaction may not be processed on a block yet.`,\n    )\n  }\n}\n\nexport type WaitForTransactionReceiptTimeoutErrorType =\n  WaitForTransactionReceiptTimeoutError & {\n    name: 'WaitForTransactionReceiptTimeoutError'\n  }\nexport class WaitForTransactionReceiptTimeoutError extends BaseError {\n  override name = 'WaitForTransactionReceiptTimeoutError'\n  constructor({ hash }: { hash: Hash }) {\n    super(\n      `Timed out while waiting for transaction with hash \"${hash}\" to be confirmed.`,\n    )\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2551, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2556, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/blob/blobsToCommitments.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { Kzg } from '../../types/kzg.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type BlobsToCommitmentsParameters<\n  blobs extends readonly ByteArray[] | readonly Hex[] =\n    | readonly ByteArray[]\n    | readonly Hex[],\n  to extends To | undefined = undefined,\n> = {\n  /** Blobs to transform into commitments. */\n  blobs: blobs | readonly ByteArray[] | readonly Hex[]\n  /** KZG implementation. */\n  kzg: Pick<Kzg, 'blobToKzgCommitment'>\n  /** Return type. */\n  to?: to | To | undefined\n}\n\nexport type BlobsToCommitmentsReturnType<to extends To> =\n  | (to extends 'bytes' ? readonly ByteArray[] : never)\n  | (to extends 'hex' ? readonly Hex[] : never)\n\nexport type BlobsToCommitmentsErrorType =\n  | HexToBytesErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\n/**\n * Compute commitments from a list of blobs.\n *\n * @example\n * ```ts\n * import { blobsToCommitments, toBlobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * ```\n */\nexport function blobsToCommitments<\n  const blobs extends readonly ByteArray[] | readonly Hex[],\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: BlobsToCommitmentsParameters<blobs, to>,\n): BlobsToCommitmentsReturnType<to> {\n  const { kzg } = parameters\n\n  const to =\n    parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes')\n  const blobs = (\n    typeof parameters.blobs[0] === 'string'\n      ? parameters.blobs.map((x) => hexToBytes(x as any))\n      : parameters.blobs\n  ) as ByteArray[]\n\n  const commitments: ByteArray[] = []\n  for (const blob of blobs)\n    commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)))\n\n  return (to === 'bytes'\n    ? commitments\n    : commitments.map((x) =>\n        bytesToHex(x),\n      )) as {} as BlobsToCommitmentsReturnType<to>\n}\n"],"names":[],"mappings":";;;;;;;;AA2CM,SAAU,mBAMd,UAAmD;IAEnD,MAAM,EAAE,GAAG,EAAE,GAAG;IAEhB,MAAM,KACJ,WAAW,EAAE,IAAI,CAAC,OAAO,WAAW,KAAK,CAAC,EAAE,KAAK,WAAW,QAAQ,OAAO;IAC7E,MAAM,QACJ,OAAO,WAAW,KAAK,CAAC,EAAE,KAAK,WAC3B,WAAW,KAAK,CAAC,GAAG,CAAC,CAAC,IAAM,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAV,EAAW,MACvC,WAAW,KAAK;IAGtB,MAAM,cAA2B,EAAE;IACnC,KAAK,MAAM,QAAQ,MACjB,YAAY,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,mBAAmB,CAAC;IAE3D,OAAQ,OAAO,UACX,cACA,YAAY,GAAG,CAAC,CAAC,IACf,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW;AAEnB"}},
    {"offset": {"line": 2572, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2577, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/blob/blobsToProofs.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { Kzg } from '../../types/kzg.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type blobsToProofsParameters<\n  blobs extends readonly ByteArray[] | readonly Hex[],\n  commitments extends readonly ByteArray[] | readonly Hex[],\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n  ///\n  _blobsType =\n    | (blobs extends readonly Hex[] ? readonly Hex[] : never)\n    | (blobs extends readonly ByteArray[] ? readonly ByteArray[] : never),\n> = {\n  /** Blobs to transform into proofs. */\n  blobs: blobs\n  /** Commitments for the blobs. */\n  commitments: commitments &\n    (commitments extends _blobsType\n      ? {}\n      : `commitments must be the same type as blobs`)\n  /** KZG implementation. */\n  kzg: Pick<Kzg, 'computeBlobKzgProof'>\n  /** Return type. */\n  to?: to | To | undefined\n}\n\nexport type blobsToProofsReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray[] : never)\n  | (to extends 'hex' ? Hex[] : never)\n\nexport type blobsToProofsErrorType =\n  | BytesToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Compute the proofs for a list of blobs and their commitments.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const proofs = blobsToProofs({ blobs, commitments, kzg })\n * ```\n */\nexport function blobsToProofs<\n  const blobs extends readonly ByteArray[] | readonly Hex[],\n  const commitments extends readonly ByteArray[] | readonly Hex[],\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: blobsToProofsParameters<blobs, commitments, to>,\n): blobsToProofsReturnType<to> {\n  const { kzg } = parameters\n\n  const to =\n    parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes')\n\n  const blobs = (\n    typeof parameters.blobs[0] === 'string'\n      ? parameters.blobs.map((x) => hexToBytes(x as any))\n      : parameters.blobs\n  ) as ByteArray[]\n  const commitments = (\n    typeof parameters.commitments[0] === 'string'\n      ? parameters.commitments.map((x) => hexToBytes(x as any))\n      : parameters.commitments\n  ) as ByteArray[]\n\n  const proofs: ByteArray[] = []\n  for (let i = 0; i < blobs.length; i++) {\n    const blob = blobs[i]\n    const commitment = commitments[i]\n    proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)))\n  }\n\n  return (to === 'bytes'\n    ? proofs\n    : proofs.map((x) => bytesToHex(x))) as {} as blobsToProofsReturnType<to>\n}\n"],"names":[],"mappings":";;;;;;;;AAyDM,SAAU,cAOd,UAA2D;IAE3D,MAAM,EAAE,GAAG,EAAE,GAAG;IAEhB,MAAM,KACJ,WAAW,EAAE,IAAI,CAAC,OAAO,WAAW,KAAK,CAAC,EAAE,KAAK,WAAW,QAAQ,OAAO;IAE7E,MAAM,QACJ,OAAO,WAAW,KAAK,CAAC,EAAE,KAAK,WAC3B,WAAW,KAAK,CAAC,GAAG,CAAC,CAAC,IAAM,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAV,EAAW,MACvC,WAAW,KAAK;IAEtB,MAAM,cACJ,OAAO,WAAW,WAAW,CAAC,EAAE,KAAK,WACjC,WAAW,WAAW,CAAC,GAAG,CAAC,CAAC,IAAM,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAV,EAAW,MAC7C,WAAW,WAAW;IAG5B,MAAM,SAAsB,EAAE;IAC9B,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACrC,MAAM,OAAO,KAAK,CAAC,EAAE;QACrB,MAAM,aAAa,WAAW,CAAC,EAAE;QACjC,OAAO,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,mBAAmB,CAAC,MAAM;IAC5D;IAEA,OAAQ,OAAO,UACX,SACA,OAAO,GAAG,CAAC,CAAC,IAAM,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW;AACnC"}},
    {"offset": {"line": 2598, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2603, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/hash/sha256.ts"],"sourcesContent":["import { sha256 as noble_sha256 } from '@noble/hashes/sha256'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type Sha256Hash<TTo extends To> =\n  | (TTo extends 'bytes' ? ByteArray : never)\n  | (TTo extends 'hex' ? Hex : never)\n\nexport type Sha256ErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ToHexErrorType\n  | ErrorType\n\nexport function sha256<TTo extends To = 'hex'>(\n  value: Hex | ByteArray,\n  to_?: TTo | undefined,\n): Sha256Hash<TTo> {\n  const to = to_ || 'hex'\n  const bytes = noble_sha256(\n    isHex(value, { strict: false }) ? toBytes(value) : value,\n  )\n  if (to === 'bytes') return bytes as Sha256Hash<TTo>\n  return toHex(bytes) as Sha256Hash<TTo>\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAoBM,SAAU,OACd,KAAsB,EACtB,GAAqB;IAErB,MAAM,KAAK,OAAO;IAClB,MAAM,QAAQ,CAAA,GAAA,oJAAA,CAAA,SAAY,AAAZ,EACZ,CAAA,GAAA,wJAAA,CAAA,QAAK,AAAL,EAAM,OAAO;QAAE,QAAQ;IAAK,KAAM,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAP,EAAQ,SAAS;IAErD,IAAI,OAAO,SAAS,OAAO;IAC3B,OAAO,CAAA,GAAA,4JAAA,CAAA,QAAK,AAAL,EAAM;AACf"}},
    {"offset": {"line": 2623, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2628, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/blob/commitmentToVersionedHash.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\nimport { type Sha256ErrorType, sha256 } from '../hash/sha256.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type CommitmentToVersionedHashParameters<\n  commitment extends Uint8Array | Hex = Uint8Array | Hex,\n  to extends To | undefined = undefined,\n> = {\n  /** Commitment from blob. */\n  commitment: commitment | Uint8Array | Hex\n  /** Return type. */\n  to?: to | To | undefined\n  /** Version to tag onto the hash. */\n  version?: number | undefined\n}\n\nexport type CommitmentToVersionedHashReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type CommitmentToVersionedHashErrorType =\n  | Sha256ErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\n/**\n * Transform a commitment to it's versioned hash.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   commitmentToVersionedHash,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const [commitment] = blobsToCommitments({ blobs, kzg })\n * const versionedHash = commitmentToVersionedHash({ commitment })\n * ```\n */\nexport function commitmentToVersionedHash<\n  const commitment extends Hex | ByteArray,\n  to extends To =\n    | (commitment extends Hex ? 'hex' : never)\n    | (commitment extends ByteArray ? 'bytes' : never),\n>(\n  parameters: CommitmentToVersionedHashParameters<commitment, to>,\n): CommitmentToVersionedHashReturnType<to> {\n  const { commitment, version = 1 } = parameters\n  const to = parameters.to ?? (typeof commitment === 'string' ? 'hex' : 'bytes')\n\n  const versionedHash = sha256(commitment, 'bytes')\n  versionedHash.set([version], 0)\n  return (\n    to === 'bytes' ? versionedHash : bytesToHex(versionedHash)\n  ) as CommitmentToVersionedHashReturnType<to>\n}\n"],"names":[],"mappings":";;;;;;;;AA6CM,SAAU,0BAMd,UAA+D;IAE/D,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC,EAAE,GAAG;IACpC,MAAM,KAAK,WAAW,EAAE,IAAI,CAAC,OAAO,eAAe,WAAW,QAAQ,OAAO;IAE7E,MAAM,gBAAgB,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAN,EAAO,YAAY;IACzC,cAAc,GAAG,CAAC;QAAC;KAAQ,EAAE;IAC7B,OACE,OAAO,UAAU,gBAAgB,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW;AAEhD"}},
    {"offset": {"line": 2645, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2650, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/blob/commitmentsToVersionedHashes.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport {\n  type CommitmentToVersionedHashErrorType,\n  commitmentToVersionedHash,\n} from './commitmentToVersionedHash.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type CommitmentsToVersionedHashesParameters<\n  commitments extends readonly Uint8Array[] | readonly Hex[] =\n    | readonly Uint8Array[]\n    | readonly Hex[],\n  to extends To | undefined = undefined,\n> = {\n  /** Commitments from blobs. */\n  commitments: commitments | readonly Uint8Array[] | readonly Hex[]\n  /** Return type. */\n  to?: to | To | undefined\n  /** Version to tag onto the hashes. */\n  version?: number | undefined\n}\n\nexport type CommitmentsToVersionedHashesReturnType<to extends To> =\n  | (to extends 'bytes' ? readonly ByteArray[] : never)\n  | (to extends 'hex' ? readonly Hex[] : never)\n\nexport type CommitmentsToVersionedHashesErrorType =\n  | CommitmentToVersionedHashErrorType\n  | ErrorType\n\n/**\n * Transform a list of commitments to their versioned hashes.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   commitmentsToVersionedHashes,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const versionedHashes = commitmentsToVersionedHashes({ commitments })\n * ```\n */\nexport function commitmentsToVersionedHashes<\n  const commitments extends readonly Uint8Array[] | readonly Hex[],\n  to extends To =\n    | (commitments extends readonly Hex[] ? 'hex' : never)\n    | (commitments extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: CommitmentsToVersionedHashesParameters<commitments, to>,\n): CommitmentsToVersionedHashesReturnType<to> {\n  const { commitments, version } = parameters\n\n  const to =\n    parameters.to ?? (typeof commitments[0] === 'string' ? 'hex' : 'bytes')\n\n  const hashes: Uint8Array[] | Hex[] = []\n  for (const commitment of commitments) {\n    hashes.push(\n      commitmentToVersionedHash({\n        commitment,\n        to,\n        version,\n      }) as any,\n    )\n  }\n  return hashes as any\n}\n"],"names":[],"mappings":";;;;;;AAgDM,SAAU,6BAMd,UAAmE;IAEnE,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG;IAEjC,MAAM,KACJ,WAAW,EAAE,IAAI,CAAC,OAAO,WAAW,CAAC,EAAE,KAAK,WAAW,QAAQ,OAAO;IAExE,MAAM,SAA+B,EAAE;IACvC,KAAK,MAAM,cAAc,YAAa;QACpC,OAAO,IAAI,CACT,CAAA,GAAA,4KAAA,CAAA,4BAAyB,AAAzB,EAA0B;YACxB;YACA;YACA;;IAGN;IACA,OAAO;AACT"}},
    {"offset": {"line": 2669, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2674, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/constants/blob.ts"],"sourcesContent":["// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#parameters\n\n/** Blob limit per transaction. */\nconst blobsPerTransaction = 6\n\n/** The number of bytes in a BLS scalar field element. */\nexport const bytesPerFieldElement = 32\n\n/** The number of field elements in a blob. */\nexport const fieldElementsPerBlob = 4096\n\n/** The number of bytes in a blob. */\nexport const bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob\n\n/** Blob bytes limit per transaction. */\nexport const maxBytesPerTransaction =\n  bytesPerBlob * blobsPerTransaction -\n  // terminator byte (0x80).\n  1 -\n  // zero byte (0x00) appended to each field element.\n  1 * fieldElementsPerBlob * blobsPerTransaction\n"],"names":[],"mappings":"AAAA,2EAA2E;AAE3E,gCAAA;;;;;;AACA,MAAM,sBAAsB;AAGrB,MAAM,uBAAuB;AAG7B,MAAM,uBAAuB;AAG7B,MAAM,eAAe,uBAAuB;AAG5C,MAAM,yBACX,eAAe,sBACf,0BAA0B;AAC1B,IACA,mDAAmD;AACnD,IAAI,uBAAuB"}},
    {"offset": {"line": 2688, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2693, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/constants/kzg.ts"],"sourcesContent":["// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#parameters\n\nexport const versionedHashVersionKzg = 1\n"],"names":[],"mappings":"AAAA,2EAA2E;;;;AAEpE,MAAM,0BAA0B"}},
    {"offset": {"line": 2698, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2703, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/errors/blob.ts"],"sourcesContent":["import { versionedHashVersionKzg } from '../constants/kzg.js'\nimport type { Hash } from '../types/misc.js'\n\nimport { BaseError } from './base.js'\n\nexport type BlobSizeTooLargeErrorType = BlobSizeTooLargeError & {\n  name: 'BlobSizeTooLargeError'\n}\nexport class BlobSizeTooLargeError extends BaseError {\n  override name = 'BlobSizeTooLargeError'\n  constructor({ maxSize, size }: { maxSize: number; size: number }) {\n    super('Blob size is too large.', {\n      metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size} bytes`],\n    })\n  }\n}\n\nexport type EmptyBlobErrorType = EmptyBlobError & {\n  name: 'EmptyBlobError'\n}\nexport class EmptyBlobError extends BaseError {\n  override name = 'EmptyBlobError'\n  constructor() {\n    super('Blob data must not be empty.')\n  }\n}\n\nexport type InvalidVersionedHashSizeErrorType =\n  InvalidVersionedHashSizeError & {\n    name: 'InvalidVersionedHashSizeError'\n  }\nexport class InvalidVersionedHashSizeError extends BaseError {\n  override name = 'InvalidVersionedHashSizeError'\n  constructor({\n    hash,\n    size,\n  }: {\n    hash: Hash\n    size: number\n  }) {\n    super(`Versioned hash \"${hash}\" size is invalid.`, {\n      metaMessages: ['Expected: 32', `Received: ${size}`],\n    })\n  }\n}\n\nexport type InvalidVersionedHashVersionErrorType =\n  InvalidVersionedHashVersionError & {\n    name: 'InvalidVersionedHashVersionError'\n  }\nexport class InvalidVersionedHashVersionError extends BaseError {\n  override name = 'InvalidVersionedHashVersionError'\n  constructor({\n    hash,\n    version,\n  }: {\n    hash: Hash\n    version: number\n  }) {\n    super(`Versioned hash \"${hash}\" version is invalid.`, {\n      metaMessages: [\n        `Expected: ${versionedHashVersionKzg}`,\n        `Received: ${version}`,\n      ],\n    })\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAQM,MAAO,8BAA8B,gJAAA,CAAA,YAAS;IAElD,YAAY,EAAE,OAAO,EAAE,IAAI,EAAqC,CAAA;QAC9D,KAAK,CAAC,2BAA2B;YAC/B,cAAc;gBAAC,CAAA,KAAA,EAAQ,QAAO,MAAA,CAAQ;gBAAE,CAAA,OAAA,EAAU,KAAI,MAAA,CAAQ;aAAC;;QAH1D,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAKhB;;AAMI,MAAO,uBAAuB,gJAAA,CAAA,YAAS;IAE3C,aAAA;QACE,KAAK,CAAC;QAFC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAGhB;;AAOI,MAAO,sCAAsC,gJAAA,CAAA,YAAS;IAE1D,YAAY,EACV,IAAI,EACJ,IAAI,EAIL,CAAA;QACC,KAAK,CAAC,CAAA,gBAAA,EAAmB,KAAI,kBAAA,CAAoB,EAAE;YACjD,cAAc;gBAAC;gBAAgB,CAAA,UAAA,EAAa,KAAI,CAAE;aAAC;;QAT9C,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAWhB;;AAOI,MAAO,yCAAyC,gJAAA,CAAA,YAAS;IAE7D,YAAY,EACV,IAAI,EACJ,OAAO,EAIR,CAAA;QACC,KAAK,CAAC,CAAA,gBAAA,EAAmB,KAAI,qBAAA,CAAuB,EAAE;YACpD,cAAc;gBACZ,CAAA,UAAA,EAAa,kJAAA,CAAA,0BAAuB,CAAA,CAAE;gBACtC,CAAA,UAAA,EAAa,QAAO,CAAE;aACvB;;QAZI,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAchB"}},
    {"offset": {"line": 2773, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2778, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/errors/cursor.ts"],"sourcesContent":["import { BaseError } from './base.js'\n\nexport type NegativeOffsetErrorType = NegativeOffsetError & {\n  name: 'NegativeOffsetError'\n}\nexport class NegativeOffsetError extends BaseError {\n  override name = 'NegativeOffsetError'\n  constructor({ offset }: { offset: number }) {\n    super(`Offset \\`${offset}\\` cannot be negative.`)\n  }\n}\n\nexport type PositionOutOfBoundsErrorType = PositionOutOfBoundsError & {\n  name: 'PositionOutOfBoundsError'\n}\nexport class PositionOutOfBoundsError extends BaseError {\n  override name = 'PositionOutOfBoundsError'\n  constructor({ length, position }: { length: number; position: number }) {\n    super(\n      `Position \\`${position}\\` is out of bounds (\\`0 < position < ${length}\\`).`,\n    )\n  }\n}\n\nexport type RecursiveReadLimitExceededErrorType =\n  RecursiveReadLimitExceededError & {\n    name: 'RecursiveReadLimitExceededError'\n  }\nexport class RecursiveReadLimitExceededError extends BaseError {\n  override name = 'RecursiveReadLimitExceededError'\n  constructor({ count, limit }: { count: number; limit: number }) {\n    super(\n      `Recursive read limit of \\`${limit}\\` exceeded (recursive read count: \\`${count}\\`).`,\n    )\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAKM,MAAO,4BAA4B,gJAAA,CAAA,YAAS;IAEhD,YAAY,EAAE,MAAM,EAAsB,CAAA;QACxC,KAAK,CAAC,CAAA,SAAA,EAAY,OAAM,sBAAA,CAAwB;QAFzC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAGhB;;AAMI,MAAO,iCAAiC,gJAAA,CAAA,YAAS;IAErD,YAAY,EAAE,MAAM,EAAE,QAAQ,EAAwC,CAAA;QACpE,KAAK,CACH,CAAA,WAAA,EAAc,SAAQ,sCAAA,EAAyC,OAAM,IAAA,CAAM;QAHtE,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAKhB;;AAOI,MAAO,wCAAwC,gJAAA,CAAA,YAAS;IAE5D,YAAY,EAAE,KAAK,EAAE,KAAK,EAAoC,CAAA;QAC5D,KAAK,CACH,CAAA,0BAAA,EAA6B,MAAK,qCAAA,EAAwC,MAAK,IAAA,CAAM;QAHhF,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAKhB"}},
    {"offset": {"line": 2819, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2824, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/cursor.ts"],"sourcesContent":["import {\n  NegativeOffsetError,\n  type NegativeOffsetErrorType,\n  PositionOutOfBoundsError,\n  type PositionOutOfBoundsErrorType,\n  RecursiveReadLimitExceededError,\n  type RecursiveReadLimitExceededErrorType,\n} from '../errors/cursor.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { ByteArray } from '../types/misc.js'\n\nexport type Cursor = {\n  bytes: ByteArray\n  dataView: DataView\n  position: number\n  positionReadCount: Map<number, number>\n  recursiveReadCount: number\n  recursiveReadLimit: number\n  remaining: number\n  assertReadLimit(position?: number): void\n  assertPosition(position: number): void\n  decrementPosition(offset: number): void\n  getReadCount(position?: number): number\n  incrementPosition(offset: number): void\n  inspectByte(position?: number): ByteArray[number]\n  inspectBytes(length: number, position?: number): ByteArray\n  inspectUint8(position?: number): number\n  inspectUint16(position?: number): number\n  inspectUint24(position?: number): number\n  inspectUint32(position?: number): number\n  pushByte(byte: ByteArray[number]): void\n  pushBytes(bytes: ByteArray): void\n  pushUint8(value: number): void\n  pushUint16(value: number): void\n  pushUint24(value: number): void\n  pushUint32(value: number): void\n  readByte(): ByteArray[number]\n  readBytes(length: number, size?: number): ByteArray\n  readUint8(): number\n  readUint16(): number\n  readUint24(): number\n  readUint32(): number\n  setPosition(position: number): () => void\n  _touch(): void\n}\n\ntype CursorErrorType =\n  | CursorAssertPositionErrorType\n  | CursorDecrementPositionErrorType\n  | CursorIncrementPositionErrorType\n  | ErrorType\n\ntype CursorAssertPositionErrorType = PositionOutOfBoundsErrorType | ErrorType\n\ntype CursorDecrementPositionErrorType = NegativeOffsetError | ErrorType\n\ntype CursorIncrementPositionErrorType = NegativeOffsetError | ErrorType\n\ntype StaticCursorErrorType =\n  | NegativeOffsetErrorType\n  | RecursiveReadLimitExceededErrorType\n\nconst staticCursor: Cursor = {\n  bytes: new Uint8Array(),\n  dataView: new DataView(new ArrayBuffer(0)),\n  position: 0,\n  positionReadCount: new Map(),\n  recursiveReadCount: 0,\n  recursiveReadLimit: Number.POSITIVE_INFINITY,\n  assertReadLimit() {\n    if (this.recursiveReadCount >= this.recursiveReadLimit)\n      throw new RecursiveReadLimitExceededError({\n        count: this.recursiveReadCount + 1,\n        limit: this.recursiveReadLimit,\n      })\n  },\n  assertPosition(position) {\n    if (position < 0 || position > this.bytes.length - 1)\n      throw new PositionOutOfBoundsError({\n        length: this.bytes.length,\n        position,\n      })\n  },\n  decrementPosition(offset) {\n    if (offset < 0) throw new NegativeOffsetError({ offset })\n    const position = this.position - offset\n    this.assertPosition(position)\n    this.position = position\n  },\n  getReadCount(position) {\n    return this.positionReadCount.get(position || this.position) || 0\n  },\n  incrementPosition(offset) {\n    if (offset < 0) throw new NegativeOffsetError({ offset })\n    const position = this.position + offset\n    this.assertPosition(position)\n    this.position = position\n  },\n  inspectByte(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position)\n    return this.bytes[position]\n  },\n  inspectBytes(length, position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + length - 1)\n    return this.bytes.subarray(position, position + length)\n  },\n  inspectUint8(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position)\n    return this.bytes[position]\n  },\n  inspectUint16(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 1)\n    return this.dataView.getUint16(position)\n  },\n  inspectUint24(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 2)\n    return (\n      (this.dataView.getUint16(position) << 8) +\n      this.dataView.getUint8(position + 2)\n    )\n  },\n  inspectUint32(position_) {\n    const position = position_ ?? this.position\n    this.assertPosition(position + 3)\n    return this.dataView.getUint32(position)\n  },\n  pushByte(byte: ByteArray[number]) {\n    this.assertPosition(this.position)\n    this.bytes[this.position] = byte\n    this.position++\n  },\n  pushBytes(bytes: ByteArray) {\n    this.assertPosition(this.position + bytes.length - 1)\n    this.bytes.set(bytes, this.position)\n    this.position += bytes.length\n  },\n  pushUint8(value: number) {\n    this.assertPosition(this.position)\n    this.bytes[this.position] = value\n    this.position++\n  },\n  pushUint16(value: number) {\n    this.assertPosition(this.position + 1)\n    this.dataView.setUint16(this.position, value)\n    this.position += 2\n  },\n  pushUint24(value: number) {\n    this.assertPosition(this.position + 2)\n    this.dataView.setUint16(this.position, value >> 8)\n    this.dataView.setUint8(this.position + 2, value & ~4294967040)\n    this.position += 3\n  },\n  pushUint32(value: number) {\n    this.assertPosition(this.position + 3)\n    this.dataView.setUint32(this.position, value)\n    this.position += 4\n  },\n  readByte() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectByte()\n    this.position++\n    return value\n  },\n  readBytes(length, size) {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectBytes(length)\n    this.position += size ?? length\n    return value\n  },\n  readUint8() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint8()\n    this.position += 1\n    return value\n  },\n  readUint16() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint16()\n    this.position += 2\n    return value\n  },\n  readUint24() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint24()\n    this.position += 3\n    return value\n  },\n  readUint32() {\n    this.assertReadLimit()\n    this._touch()\n    const value = this.inspectUint32()\n    this.position += 4\n    return value\n  },\n  get remaining() {\n    return this.bytes.length - this.position\n  },\n  setPosition(position) {\n    const oldPosition = this.position\n    this.assertPosition(position)\n    this.position = position\n    return () => (this.position = oldPosition)\n  },\n  _touch() {\n    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY) return\n    const count = this.getReadCount()\n    this.positionReadCount.set(this.position, count + 1)\n    if (count > 0) this.recursiveReadCount++\n  },\n}\n\ntype CursorConfig = { recursiveReadLimit?: number | undefined }\n\nexport type CreateCursorErrorType =\n  | CursorErrorType\n  | StaticCursorErrorType\n  | ErrorType\n\nexport function createCursor(\n  bytes: ByteArray,\n  { recursiveReadLimit = 8_192 }: CursorConfig = {},\n): Cursor {\n  const cursor: Cursor = Object.create(staticCursor)\n  cursor.bytes = bytes\n  cursor.dataView = new DataView(\n    bytes.buffer,\n    bytes.byteOffset,\n    bytes.byteLength,\n  )\n  cursor.positionReadCount = new Map()\n  cursor.recursiveReadLimit = recursiveReadLimit\n  return cursor\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2995, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3000, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/blob/toBlobs.ts"],"sourcesContent":["import {\n  bytesPerBlob,\n  bytesPerFieldElement,\n  fieldElementsPerBlob,\n  maxBytesPerTransaction,\n} from '../../constants/blob.js'\nimport {\n  BlobSizeTooLargeError,\n  type BlobSizeTooLargeErrorType,\n  EmptyBlobError,\n  type EmptyBlobErrorType,\n} from '../../errors/blob.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type CreateCursorErrorType, createCursor } from '../cursor.js'\nimport { type SizeErrorType, size } from '../data/size.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type ToBlobsParameters<\n  data extends Hex | ByteArray = Hex | ByteArray,\n  to extends To | undefined = undefined,\n> = {\n  /** Data to transform to a blob. */\n  data: data | Hex | ByteArray\n  /** Return type. */\n  to?: to | To | undefined\n}\n\nexport type ToBlobsReturnType<to extends To> =\n  | (to extends 'bytes' ? readonly ByteArray[] : never)\n  | (to extends 'hex' ? readonly Hex[] : never)\n\nexport type ToBlobsErrorType =\n  | BlobSizeTooLargeErrorType\n  | BytesToHexErrorType\n  | CreateCursorErrorType\n  | EmptyBlobErrorType\n  | HexToBytesErrorType\n  | SizeErrorType\n  | ErrorType\n\n/**\n * Transforms arbitrary data to blobs.\n *\n * @example\n * ```ts\n * import { toBlobs, stringToHex } from 'viem'\n *\n * const blobs = toBlobs({ data: stringToHex('hello world') })\n * ```\n */\nexport function toBlobs<\n  const data extends Hex | ByteArray,\n  to extends To =\n    | (data extends Hex ? 'hex' : never)\n    | (data extends ByteArray ? 'bytes' : never),\n>(parameters: ToBlobsParameters<data, to>): ToBlobsReturnType<to> {\n  const to =\n    parameters.to ?? (typeof parameters.data === 'string' ? 'hex' : 'bytes')\n  const data = (\n    typeof parameters.data === 'string'\n      ? hexToBytes(parameters.data)\n      : parameters.data\n  ) as ByteArray\n\n  const size_ = size(data)\n  if (!size_) throw new EmptyBlobError()\n  if (size_ > maxBytesPerTransaction)\n    throw new BlobSizeTooLargeError({\n      maxSize: maxBytesPerTransaction,\n      size: size_,\n    })\n\n  const blobs = []\n\n  let active = true\n  let position = 0\n  while (active) {\n    const blob = createCursor(new Uint8Array(bytesPerBlob))\n\n    let size = 0\n    while (size < fieldElementsPerBlob) {\n      const bytes = data.slice(position, position + (bytesPerFieldElement - 1))\n\n      // Push a zero byte so the field element doesn't overflow the BLS modulus.\n      blob.pushByte(0x00)\n\n      // Push the current segment of data bytes.\n      blob.pushBytes(bytes)\n\n      // If we detect that the current segment of data bytes is less than 31 bytes,\n      // we can stop processing and push a terminator byte to indicate the end of the blob.\n      if (bytes.length < 31) {\n        blob.pushByte(0x80)\n        active = false\n        break\n      }\n\n      size++\n      position += 31\n    }\n\n    blobs.push(blob)\n  }\n\n  return (\n    to === 'bytes'\n      ? blobs.map((x) => x.bytes)\n      : blobs.map((x) => bytesToHex(x.bytes))\n  ) as any\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAsDM,SAAU,QAKd,UAAuC;IACvC,MAAM,KACJ,WAAW,EAAE,IAAI,CAAC,OAAO,WAAW,IAAI,KAAK,WAAW,QAAQ,OAAO;IACzE,MAAM,OACJ,OAAO,WAAW,IAAI,KAAK,WACvB,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAV,EAAW,WAAW,IAAI,IAC1B,WAAW,IAAI;IAGrB,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,OAAI,AAAJ,EAAK;IACnB,IAAI,CAAC,OAAO,MAAM,IAAI,gJAAA,CAAA,iBAAc;IACpC,IAAI,QAAQ,mJAAA,CAAA,yBAAsB,EAChC,MAAM,IAAI,gJAAA,CAAA,wBAAqB,CAAC;QAC9B,SAAS,mJAAA,CAAA,yBAAsB;QAC/B,MAAM;;IAGV,MAAM,QAAQ,EAAE;IAEhB,IAAI,SAAS;IACb,IAAI,WAAW;IACf,MAAO,OAAQ;QACb,MAAM,OAAO,CAAA,GAAA,iJAAA,CAAA,eAAY,AAAZ,EAAa,IAAI,WAAW,mJAAA,CAAA,eAAY;QAErD,IAAI,OAAO;QACX,MAAO,OAAO,mJAAA,CAAA,uBAAoB,CAAE;YAClC,MAAM,QAAQ,KAAK,KAAK,CAAC,UAAU,WAAW,CAAC,mJAAA,CAAA,uBAAoB,GAAG,CAAC;YAEvE,0EAA0E;YAC1E,KAAK,QAAQ,CAAC;YAEd,0CAA0C;YAC1C,KAAK,SAAS,CAAC;YAEf,6EAA6E;YAC7E,qFAAqF;YACrF,IAAI,MAAM,MAAM,GAAG,IAAI;gBACrB,KAAK,QAAQ,CAAC;gBACd,SAAS;gBACT;YACF;YAEA;YACA,YAAY;QACd;QAEA,MAAM,IAAI,CAAC;IACb;IAEA,OACE,OAAO,UACH,MAAM,GAAG,CAAC,CAAC,IAAM,EAAE,KAAK,IACxB,MAAM,GAAG,CAAC,CAAC,IAAM,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW,EAAE,KAAK;AAE3C"}},
    {"offset": {"line": 3051, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3056, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/blob/toBlobSidecars.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { BlobSidecars } from '../../types/eip4844.js'\nimport type { Kzg } from '../../types/kzg.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { OneOf } from '../../types/utils.js'\nimport {\n  type BlobsToCommitmentsErrorType,\n  blobsToCommitments,\n} from './blobsToCommitments.js'\nimport { blobsToProofs, type blobsToProofsErrorType } from './blobsToProofs.js'\nimport { type ToBlobsErrorType, toBlobs } from './toBlobs.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type ToBlobSidecarsParameters<\n  data extends Hex | ByteArray | undefined = undefined,\n  blobs extends readonly Hex[] | readonly ByteArray[] | undefined = undefined,\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n  ///\n  _blobsType =\n    | (blobs extends readonly Hex[] ? readonly Hex[] : never)\n    | (blobs extends readonly ByteArray[] ? readonly ByteArray[] : never),\n> = {\n  /** Return type. */\n  to?: to | To | undefined\n} & OneOf<\n  | {\n      /** Data to transform into blobs. */\n      data: data | Hex | ByteArray\n      /** KZG implementation. */\n      kzg: Kzg\n    }\n  | {\n      /** Blobs. */\n      blobs: blobs | readonly Hex[] | readonly ByteArray[]\n      /** Commitment for each blob. */\n      commitments: _blobsType | readonly Hex[] | readonly ByteArray[]\n      /** Proof for each blob. */\n      proofs: _blobsType | readonly Hex[] | readonly ByteArray[]\n    }\n>\n\nexport type ToBlobSidecarsReturnType<to extends To> =\n  | (to extends 'bytes' ? BlobSidecars<ByteArray> : never)\n  | (to extends 'hex' ? BlobSidecars<Hex> : never)\n\nexport type ToBlobSidecarsErrorType =\n  | BlobsToCommitmentsErrorType\n  | ToBlobsErrorType\n  | blobsToProofsErrorType\n  | ErrorType\n\n/**\n * Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\n *\n * @example\n * ```ts\n * import { toBlobSidecars, stringToHex } from 'viem'\n *\n * const sidecars = toBlobSidecars({ data: stringToHex('hello world') })\n * ```\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   toBlobs,\n *   blobsToProofs,\n *   toBlobSidecars,\n *   stringToHex\n * } from 'viem'\n *\n * const blobs = toBlobs({ data: stringToHex('hello world') })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const proofs = blobsToProofs({ blobs, commitments, kzg })\n *\n * const sidecars = toBlobSidecars({ blobs, commitments, proofs })\n * ```\n */\nexport function toBlobSidecars<\n  const data extends Hex | ByteArray | undefined = undefined,\n  const blobs extends\n    | readonly Hex[]\n    | readonly ByteArray[]\n    | undefined = undefined,\n  to extends To =\n    | (data extends Hex ? 'hex' : never)\n    | (data extends ByteArray ? 'bytes' : never)\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n>(\n  parameters: ToBlobSidecarsParameters<data, blobs, to>,\n): ToBlobSidecarsReturnType<to> {\n  const { data, kzg, to } = parameters\n  const blobs = parameters.blobs ?? toBlobs({ data: data!, to })\n  const commitments =\n    parameters.commitments ?? blobsToCommitments({ blobs, kzg: kzg!, to })\n  const proofs =\n    parameters.proofs ?? blobsToProofs({ blobs, commitments, kzg: kzg!, to })\n\n  const sidecars: BlobSidecars = []\n  for (let i = 0; i < blobs.length; i++)\n    sidecars.push({\n      blob: blobs[i],\n      commitment: commitments[i],\n      proof: proofs[i],\n    })\n\n  return sidecars as ToBlobSidecarsReturnType<to>\n}\n"],"names":[],"mappings":";;;;;;;;;;AAiFM,SAAU,eAYd,UAAqD;IAErD,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG;IAC1B,MAAM,QAAQ,WAAW,KAAK,IAAI,CAAA,GAAA,0JAAA,CAAA,UAAO,AAAP,EAAQ;QAAE,MAAM;QAAO;IAAE;IAC3D,MAAM,cACJ,WAAW,WAAW,IAAI,CAAA,GAAA,qKAAA,CAAA,qBAAkB,AAAlB,EAAmB;QAAE;QAAO,KAAK;QAAM;IAAE;IACrE,MAAM,SACJ,WAAW,MAAM,IAAI,CAAA,GAAA,gKAAA,CAAA,gBAAa,AAAb,EAAc;QAAE;QAAO;QAAa,KAAK;QAAM;IAAE;IAExE,MAAM,WAAyB,EAAE;IACjC,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAChC,SAAS,IAAI,CAAC;QACZ,MAAM,KAAK,CAAC,EAAE;QACd,YAAY,WAAW,CAAC,EAAE;QAC1B,OAAO,MAAM,CAAC,EAAE;;IAGpB,OAAO;AACT"}},
    {"offset": {"line": 3091, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3096, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/encoding/toRlp.ts"],"sourcesContent":["import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport {\n  type CreateCursorErrorType,\n  type Cursor,\n  createCursor,\n} from '../cursor.js'\n\nimport { type HexToBytesErrorType, hexToBytes } from './toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from './toHex.js'\n\nexport type RecursiveArray<T> = T | readonly RecursiveArray<T>[]\n\ntype To = 'hex' | 'bytes'\n\ntype Encodable = {\n  length: number\n  encode(cursor: Cursor): void\n}\n\nexport type ToRlpReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type ToRlpErrorType =\n  | CreateCursorErrorType\n  | BytesToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\nexport function toRlp<to extends To = 'hex'>(\n  bytes: RecursiveArray<ByteArray> | RecursiveArray<Hex>,\n  to: to | To | undefined = 'hex',\n): ToRlpReturnType<to> {\n  const encodable = getEncodable(bytes)\n  const cursor = createCursor(new Uint8Array(encodable.length))\n  encodable.encode(cursor)\n\n  if (to === 'hex') return bytesToHex(cursor.bytes) as ToRlpReturnType<to>\n  return cursor.bytes as ToRlpReturnType<to>\n}\n\nexport type BytesToRlpErrorType = ToRlpErrorType | ErrorType\n\nexport function bytesToRlp<to extends To = 'bytes'>(\n  bytes: RecursiveArray<ByteArray>,\n  to: to | To | undefined = 'bytes',\n): ToRlpReturnType<to> {\n  return toRlp(bytes, to)\n}\n\nexport type HexToRlpErrorType = ToRlpErrorType | ErrorType\n\nexport function hexToRlp<to extends To = 'hex'>(\n  hex: RecursiveArray<Hex>,\n  to: to | To | undefined = 'hex',\n): ToRlpReturnType<to> {\n  return toRlp(hex, to)\n}\n\nfunction getEncodable(\n  bytes: RecursiveArray<ByteArray> | RecursiveArray<Hex>,\n): Encodable {\n  if (Array.isArray(bytes))\n    return getEncodableList(bytes.map((x) => getEncodable(x)))\n  return getEncodableBytes(bytes as any)\n}\n\nfunction getEncodableList(list: Encodable[]): Encodable {\n  const bodyLength = list.reduce((acc, x) => acc + x.length, 0)\n\n  const sizeOfBodyLength = getSizeOfLength(bodyLength)\n  const length = (() => {\n    if (bodyLength <= 55) return 1 + bodyLength\n    return 1 + sizeOfBodyLength + bodyLength\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor) {\n      if (bodyLength <= 55) {\n        cursor.pushByte(0xc0 + bodyLength)\n      } else {\n        cursor.pushByte(0xc0 + 55 + sizeOfBodyLength)\n        if (sizeOfBodyLength === 1) cursor.pushUint8(bodyLength)\n        else if (sizeOfBodyLength === 2) cursor.pushUint16(bodyLength)\n        else if (sizeOfBodyLength === 3) cursor.pushUint24(bodyLength)\n        else cursor.pushUint32(bodyLength)\n      }\n      for (const { encode } of list) {\n        encode(cursor)\n      }\n    },\n  }\n}\n\nfunction getEncodableBytes(bytesOrHex: ByteArray | Hex): Encodable {\n  const bytes =\n    typeof bytesOrHex === 'string' ? hexToBytes(bytesOrHex) : bytesOrHex\n\n  const sizeOfBytesLength = getSizeOfLength(bytes.length)\n  const length = (() => {\n    if (bytes.length === 1 && bytes[0] < 0x80) return 1\n    if (bytes.length <= 55) return 1 + bytes.length\n    return 1 + sizeOfBytesLength + bytes.length\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor) {\n      if (bytes.length === 1 && bytes[0] < 0x80) {\n        cursor.pushBytes(bytes)\n      } else if (bytes.length <= 55) {\n        cursor.pushByte(0x80 + bytes.length)\n        cursor.pushBytes(bytes)\n      } else {\n        cursor.pushByte(0x80 + 55 + sizeOfBytesLength)\n        if (sizeOfBytesLength === 1) cursor.pushUint8(bytes.length)\n        else if (sizeOfBytesLength === 2) cursor.pushUint16(bytes.length)\n        else if (sizeOfBytesLength === 3) cursor.pushUint24(bytes.length)\n        else cursor.pushUint32(bytes.length)\n        cursor.pushBytes(bytes)\n      }\n    },\n  }\n}\n\nfunction getSizeOfLength(length: number) {\n  if (length < 2 ** 8) return 1\n  if (length < 2 ** 16) return 2\n  if (length < 2 ** 24) return 3\n  if (length < 2 ** 32) return 4\n  throw new BaseError('Length is too large.')\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3186, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3191, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/errors/chain.ts"],"sourcesContent":["import type { Chain } from '../types/chain.js'\n\nimport { BaseError } from './base.js'\n\nexport type ChainDoesNotSupportContractErrorType =\n  ChainDoesNotSupportContract & {\n    name: 'ChainDoesNotSupportContract'\n  }\nexport class ChainDoesNotSupportContract extends BaseError {\n  override name = 'ChainDoesNotSupportContract'\n  constructor({\n    blockNumber,\n    chain,\n    contract,\n  }: {\n    blockNumber?: bigint | undefined\n    chain: Chain\n    contract: { name: string; blockCreated?: number | undefined }\n  }) {\n    super(\n      `Chain \"${chain.name}\" does not support contract \"${contract.name}\".`,\n      {\n        metaMessages: [\n          'This could be due to any of the following:',\n          ...(blockNumber &&\n          contract.blockCreated &&\n          contract.blockCreated > blockNumber\n            ? [\n                `- The contract \"${contract.name}\" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`,\n              ]\n            : [\n                `- The chain does not have the contract \"${contract.name}\" configured.`,\n              ]),\n        ],\n      },\n    )\n  }\n}\n\nexport type ChainMismatchErrorType = ChainMismatchError & {\n  name: 'ChainMismatchError'\n}\nexport class ChainMismatchError extends BaseError {\n  override name = 'ChainMismatchError'\n\n  constructor({\n    chain,\n    currentChainId,\n  }: {\n    chain: Chain\n    currentChainId: number\n  }) {\n    super(\n      `The current chain of the wallet (id: ${currentChainId}) does not match the target chain for the transaction (id: ${chain.id} – ${chain.name}).`,\n      {\n        metaMessages: [\n          `Current Chain ID:  ${currentChainId}`,\n          `Expected Chain ID: ${chain.id} – ${chain.name}`,\n        ],\n      },\n    )\n  }\n}\n\nexport type ChainNotFoundErrorType = ChainNotFoundError & {\n  name: 'ChainNotFoundError'\n}\nexport class ChainNotFoundError extends BaseError {\n  override name = 'ChainNotFoundError'\n\n  constructor() {\n    super(\n      [\n        'No chain was provided to the request.',\n        'Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient.',\n      ].join('\\n'),\n    )\n  }\n}\n\nexport type ClientChainNotConfiguredErrorType =\n  ClientChainNotConfiguredError & {\n    name: 'ClientChainNotConfiguredError'\n  }\nexport class ClientChainNotConfiguredError extends BaseError {\n  override name = 'ClientChainNotConfiguredError'\n\n  constructor() {\n    super('No chain was provided to the Client.')\n  }\n}\n\nexport type InvalidChainIdErrorType = InvalidChainIdError & {\n  name: 'InvalidChainIdError'\n}\nexport class InvalidChainIdError extends BaseError {\n  override name = 'InvalidChainIdError'\n\n  constructor({ chainId }: { chainId?: number | undefined }) {\n    super(\n      typeof chainId === 'number'\n        ? `Chain ID \"${chainId}\" is invalid.`\n        : 'Chain ID is invalid.',\n    )\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAQM,MAAO,oCAAoC,gJAAA,CAAA,YAAS;IAExD,YAAY,EACV,WAAW,EACX,KAAK,EACL,QAAQ,EAKT,CAAA;QACC,KAAK,CACH,CAAA,OAAA,EAAU,MAAM,IAAI,CAAA,6BAAA,EAAgC,SAAS,IAAI,CAAA,EAAA,CAAI,EACrE;YACE,cAAc;gBACZ;mBACI,eACJ,SAAS,YAAY,IACrB,SAAS,YAAY,GAAG,cACpB;oBACE,CAAA,gBAAA,EAAmB,SAAS,IAAI,CAAA,+BAAA,EAAkC,SAAS,YAAY,CAAA,gBAAA,EAAmB,YAAW,EAAA,CAAI;iBAC1H,GACD;oBACE,CAAA,wCAAA,EAA2C,SAAS,IAAI,CAAA,aAAA,CAAe;iBACxE;aACN;;QAxBE,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IA2BhB;;AAMI,MAAO,2BAA2B,gJAAA,CAAA,YAAS;IAG/C,YAAY,EACV,KAAK,EACL,cAAc,EAIf,CAAA;QACC,KAAK,CACH,CAAA,qCAAA,EAAwC,eAAc,2DAAA,EAA8D,MAAM,EAAE,CAAA,GAAA,EAAM,MAAM,IAAI,CAAA,EAAA,CAAI,EAChJ;YACE,cAAc;gBACZ,CAAA,mBAAA,EAAsB,eAAc,CAAE;gBACtC,CAAA,mBAAA,EAAsB,MAAM,EAAE,CAAA,GAAA,EAAM,MAAM,IAAI,CAAA,CAAE;aACjD;;QAfE,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAkBhB;;AAMI,MAAO,2BAA2B,gJAAA,CAAA,YAAS;IAG/C,aAAA;QACE,KAAK,CACH;YACE;YACA;SACD,CAAC,IAAI,CAAC;QAPF,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAShB;;AAOI,MAAO,sCAAsC,gJAAA,CAAA,YAAS;IAG1D,aAAA;QACE,KAAK,CAAC;QAHC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAIhB;;AAMI,MAAO,4BAA4B,gJAAA,CAAA,YAAS;IAGhD,YAAY,EAAE,OAAO,EAAoC,CAAA;QACvD,KAAK,CACH,OAAO,YAAY,WACf,CAAA,UAAA,EAAa,QAAO,aAAA,CAAe,GACnC;QANC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAQhB"}},
    {"offset": {"line": 3273, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3278, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/errors/node.ts"],"sourcesContent":["import { formatGwei } from '../utils/unit/formatGwei.js'\n\nimport { BaseError } from './base.js'\n\n/**\n * geth:    https://github.com/ethereum/go-ethereum/blob/master/core/error.go\n *          https://github.com/ethereum/go-ethereum/blob/master/core/types/transaction.go#L34-L41\n *\n * erigon:  https://github.com/ledgerwatch/erigon/blob/master/core/error.go\n *          https://github.com/ledgerwatch/erigon/blob/master/core/types/transaction.go#L41-L46\n *\n * anvil:   https://github.com/foundry-rs/foundry/blob/master/anvil/src/eth/error.rs#L108\n */\nexport type ExecutionRevertedErrorType = ExecutionRevertedError & {\n  code: 3\n  name: 'ExecutionRevertedError'\n}\nexport class ExecutionRevertedError extends BaseError {\n  static code = 3\n  static nodeMessage = /execution reverted/\n\n  override name = 'ExecutionRevertedError'\n\n  constructor({\n    cause,\n    message,\n  }: { cause?: BaseError | undefined; message?: string | undefined } = {}) {\n    const reason = message\n      ?.replace('execution reverted: ', '')\n      ?.replace('execution reverted', '')\n    super(\n      `Execution reverted ${\n        reason ? `with reason: ${reason}` : 'for an unknown reason'\n      }.`,\n      {\n        cause,\n      },\n    )\n  }\n}\n\nexport type FeeCapTooHighErrorType = FeeCapTooHighError & {\n  name: 'FeeCapTooHighError'\n}\nexport class FeeCapTooHighError extends BaseError {\n  static nodeMessage =\n    /max fee per gas higher than 2\\^256-1|fee cap higher than 2\\^256-1/\n  override name = 'FeeCapTooHigh'\n  constructor({\n    cause,\n    maxFeePerGas,\n  }: {\n    cause?: BaseError | undefined\n    maxFeePerGas?: bigint | undefined\n  } = {}) {\n    super(\n      `The fee cap (\\`maxFeePerGas\\`${\n        maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ''\n      }) cannot be higher than the maximum allowed value (2^256-1).`,\n      {\n        cause,\n      },\n    )\n  }\n}\n\nexport type FeeCapTooLowErrorType = FeeCapTooLowError & {\n  name: 'FeeCapTooLowError'\n}\nexport class FeeCapTooLowError extends BaseError {\n  static nodeMessage =\n    /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/\n  override name = 'FeeCapTooLow'\n  constructor({\n    cause,\n    maxFeePerGas,\n  }: {\n    cause?: BaseError | undefined\n    maxFeePerGas?: bigint | undefined\n  } = {}) {\n    super(\n      `The fee cap (\\`maxFeePerGas\\`${\n        maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)}` : ''\n      } gwei) cannot be lower than the block base fee.`,\n      {\n        cause,\n      },\n    )\n  }\n}\n\nexport type NonceTooHighErrorType = NonceTooHighError & {\n  name: 'NonceTooHighError'\n}\nexport class NonceTooHighError extends BaseError {\n  static nodeMessage = /nonce too high/\n  override name = 'NonceTooHighError'\n  constructor({\n    cause,\n    nonce,\n  }: { cause?: BaseError | undefined; nonce?: number | undefined } = {}) {\n    super(\n      `Nonce provided for the transaction ${\n        nonce ? `(${nonce}) ` : ''\n      }is higher than the next one expected.`,\n      { cause },\n    )\n  }\n}\n\nexport type NonceTooLowErrorType = NonceTooLowError & {\n  name: 'NonceTooLowError'\n}\nexport class NonceTooLowError extends BaseError {\n  static nodeMessage =\n    /nonce too low|transaction already imported|already known/\n  override name = 'NonceTooLowError'\n  constructor({\n    cause,\n    nonce,\n  }: { cause?: BaseError | undefined; nonce?: number | undefined } = {}) {\n    super(\n      [\n        `Nonce provided for the transaction ${\n          nonce ? `(${nonce}) ` : ''\n        }is lower than the current nonce of the account.`,\n        'Try increasing the nonce or find the latest nonce with `getTransactionCount`.',\n      ].join('\\n'),\n      { cause },\n    )\n  }\n}\n\nexport type NonceMaxValueErrorType = NonceMaxValueError & {\n  name: 'NonceMaxValueError'\n}\nexport class NonceMaxValueError extends BaseError {\n  static nodeMessage = /nonce has max value/\n  override name = 'NonceMaxValueError'\n  constructor({\n    cause,\n    nonce,\n  }: { cause?: BaseError | undefined; nonce?: number | undefined } = {}) {\n    super(\n      `Nonce provided for the transaction ${\n        nonce ? `(${nonce}) ` : ''\n      }exceeds the maximum allowed nonce.`,\n      { cause },\n    )\n  }\n}\n\nexport type InsufficientFundsErrorType = InsufficientFundsError & {\n  name: 'InsufficientFundsError'\n}\nexport class InsufficientFundsError extends BaseError {\n  static nodeMessage = /insufficient funds/\n  override name = 'InsufficientFundsError'\n  constructor({ cause }: { cause?: BaseError | undefined } = {}) {\n    super(\n      [\n        'The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account.',\n      ].join('\\n'),\n      {\n        cause,\n        metaMessages: [\n          'This error could arise when the account does not have enough funds to:',\n          ' - pay for the total gas fee,',\n          ' - pay for the value to send.',\n          ' ',\n          'The cost of the transaction is calculated as `gas * gas fee + value`, where:',\n          ' - `gas` is the amount of gas needed for transaction to execute,',\n          ' - `gas fee` is the gas fee,',\n          ' - `value` is the amount of ether to send to the recipient.',\n        ],\n      },\n    )\n  }\n}\n\nexport type IntrinsicGasTooHighErrorType = IntrinsicGasTooHighError & {\n  name: 'IntrinsicGasTooHighError'\n}\nexport class IntrinsicGasTooHighError extends BaseError {\n  static nodeMessage = /intrinsic gas too high|gas limit reached/\n  override name = 'IntrinsicGasTooHighError'\n  constructor({\n    cause,\n    gas,\n  }: { cause?: BaseError | undefined; gas?: bigint | undefined } = {}) {\n    super(\n      `The amount of gas ${\n        gas ? `(${gas}) ` : ''\n      }provided for the transaction exceeds the limit allowed for the block.`,\n      {\n        cause,\n      },\n    )\n  }\n}\n\nexport type IntrinsicGasTooLowErrorType = IntrinsicGasTooLowError & {\n  name: 'IntrinsicGasTooLowError'\n}\nexport class IntrinsicGasTooLowError extends BaseError {\n  static nodeMessage = /intrinsic gas too low/\n  override name = 'IntrinsicGasTooLowError'\n  constructor({\n    cause,\n    gas,\n  }: { cause?: BaseError | undefined; gas?: bigint | undefined } = {}) {\n    super(\n      `The amount of gas ${\n        gas ? `(${gas}) ` : ''\n      }provided for the transaction is too low.`,\n      {\n        cause,\n      },\n    )\n  }\n}\n\nexport type TransactionTypeNotSupportedErrorType =\n  TransactionTypeNotSupportedError & {\n    name: 'TransactionTypeNotSupportedError'\n  }\nexport class TransactionTypeNotSupportedError extends BaseError {\n  static nodeMessage = /transaction type not valid/\n  override name = 'TransactionTypeNotSupportedError'\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super('The transaction type is not supported for this chain.', {\n      cause,\n    })\n  }\n}\n\nexport type TipAboveFeeCapErrorType = TipAboveFeeCapError & {\n  name: 'TipAboveFeeCapError'\n}\nexport class TipAboveFeeCapError extends BaseError {\n  static nodeMessage =\n    /max priority fee per gas higher than max fee per gas|tip higher than fee cap/\n  override name = 'TipAboveFeeCapError'\n  constructor({\n    cause,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n  }: {\n    cause?: BaseError | undefined\n    maxPriorityFeePerGas?: bigint | undefined\n    maxFeePerGas?: bigint | undefined\n  } = {}) {\n    super(\n      [\n        `The provided tip (\\`maxPriorityFeePerGas\\`${\n          maxPriorityFeePerGas\n            ? ` = ${formatGwei(maxPriorityFeePerGas)} gwei`\n            : ''\n        }) cannot be higher than the fee cap (\\`maxFeePerGas\\`${\n          maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ''\n        }).`,\n      ].join('\\n'),\n      {\n        cause,\n      },\n    )\n  }\n}\n\nexport type UnknownNodeErrorType = UnknownNodeError & {\n  name: 'UnknownNodeError'\n}\nexport class UnknownNodeError extends BaseError {\n  override name = 'UnknownNodeError'\n\n  constructor({ cause }: { cause?: BaseError | undefined }) {\n    super(`An error occurred while executing: ${cause?.shortMessage}`, {\n      cause,\n    })\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3543, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3548, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/transaction/assertTransaction.ts"],"sourcesContent":["import { versionedHashVersionKzg } from '../../constants/kzg.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport { BaseError, type BaseErrorType } from '../../errors/base.js'\nimport {\n  EmptyBlobError,\n  type EmptyBlobErrorType,\n  InvalidVersionedHashSizeError,\n  type InvalidVersionedHashSizeErrorType,\n  InvalidVersionedHashVersionError,\n  type InvalidVersionedHashVersionErrorType,\n} from '../../errors/blob.js'\nimport {\n  InvalidChainIdError,\n  type InvalidChainIdErrorType,\n} from '../../errors/chain.js'\nimport {\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n} from '../../errors/node.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableLegacy,\n} from '../../types/transaction.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { size } from '../data/size.js'\nimport { slice } from '../data/slice.js'\nimport { hexToNumber } from '../encoding/fromHex.js'\n\nexport type AssertTransactionEIP4844ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | EmptyBlobErrorType\n  | InvalidVersionedHashSizeErrorType\n  | InvalidVersionedHashVersionErrorType\n  | ErrorType\n\nexport function assertTransactionEIP4844(\n  transaction: TransactionSerializableEIP4844,\n) {\n  const { blobVersionedHashes } = transaction\n  if (blobVersionedHashes) {\n    if (blobVersionedHashes.length === 0) throw new EmptyBlobError()\n    for (const hash of blobVersionedHashes) {\n      const size_ = size(hash)\n      const version = hexToNumber(slice(hash, 0, 1))\n      if (size_ !== 32)\n        throw new InvalidVersionedHashSizeError({ hash, size: size_ })\n      if (version !== versionedHashVersionKzg)\n        throw new InvalidVersionedHashVersionError({\n          hash,\n          version,\n        })\n    }\n  }\n  assertTransactionEIP1559(transaction as {} as TransactionSerializableEIP1559)\n}\n\nexport type AssertTransactionEIP1559ErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | TipAboveFeeCapErrorType\n  | ErrorType\n\nexport function assertTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n) {\n  const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (maxFeePerGas && maxFeePerGas > 2n ** 256n - 1n)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    maxPriorityFeePerGas &&\n    maxFeePerGas &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n}\n\nexport type AssertTransactionEIP2930ErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | ErrorType\n\nexport function assertTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n) {\n  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } =\n    transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (maxPriorityFeePerGas || maxFeePerGas)\n    throw new BaseError(\n      '`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.',\n    )\n  if (gasPrice && gasPrice > 2n ** 256n - 1n)\n    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice })\n}\n\nexport type AssertTransactionLegacyErrorType =\n  | BaseErrorType\n  | IsAddressErrorType\n  | InvalidAddressErrorType\n  | InvalidChainIdErrorType\n  | FeeCapTooHighErrorType\n  | ErrorType\n\nexport function assertTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    accessList,\n  } = transaction\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (typeof chainId !== 'undefined' && chainId <= 0)\n    throw new InvalidChainIdError({ chainId })\n  if (maxPriorityFeePerGas || maxFeePerGas)\n    throw new BaseError(\n      '`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.',\n    )\n  if (gasPrice && gasPrice > 2n ** 256n - 1n)\n    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice })\n  if (accessList)\n    throw new BaseError(\n      '`accessList` is not a valid Legacy Transaction attribute.',\n    )\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CM,SAAU,yBACd,WAA2C;IAE3C,MAAM,EAAE,mBAAmB,EAAE,GAAG;IAChC,IAAI,qBAAqB;QACvB,IAAI,oBAAoB,MAAM,KAAK,GAAG,MAAM,IAAI,gJAAA,CAAA,iBAAc;QAC9D,KAAK,MAAM,QAAQ,oBAAqB;YACtC,MAAM,QAAQ,CAAA,GAAA,uJAAA,CAAA,OAAI,AAAJ,EAAK;YACnB,MAAM,UAAU,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAX,EAAY,CAAA,GAAA,wJAAA,CAAA,QAAK,AAAL,EAAM,MAAM,GAAG;YAC3C,IAAI,UAAU,IACZ,MAAM,IAAI,gJAAA,CAAA,gCAA6B,CAAC;gBAAE;gBAAM,MAAM;YAAK;YAC7D,IAAI,YAAY,kJAAA,CAAA,0BAAuB,EACrC,MAAM,IAAI,gJAAA,CAAA,mCAAgC,CAAC;gBACzC;gBACA;;QAEN;IACF;IACA,yBAAyB;AAC3B;AAWM,SAAU,yBACd,WAA2C;IAE3C,MAAM,EAAE,OAAO,EAAE,oBAAoB,EAAE,YAAY,EAAE,EAAE,EAAE,GAAG;IAC5D,IAAI,WAAW,GAAG,MAAM,IAAI,iJAAA,CAAA,sBAAmB,CAAC;QAAE;IAAO;IACzD,IAAI,MAAM,CAAC,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAT,EAAU,KAAK,MAAM,IAAI,mJAAA,CAAA,sBAAmB,CAAC;QAAE,SAAS;IAAE;IACrE,IAAI,gBAAgB,eAAe,EAAE,IAAI,IAAI,GAAG,EAAE,EAChD,MAAM,IAAI,gJAAA,CAAA,qBAAkB,CAAC;QAAE;IAAY;IAC7C,IACE,wBACA,gBACA,uBAAuB,cAEvB,MAAM,IAAI,gJAAA,CAAA,sBAAmB,CAAC;QAAE;QAAc;IAAoB;AACtE;AAUM,SAAU,yBACd,WAA2C;IAE3C,MAAM,EAAE,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,GACjE;IACF,IAAI,WAAW,GAAG,MAAM,IAAI,iJAAA,CAAA,sBAAmB,CAAC;QAAE;IAAO;IACzD,IAAI,MAAM,CAAC,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAT,EAAU,KAAK,MAAM,IAAI,mJAAA,CAAA,sBAAmB,CAAC;QAAE,SAAS;IAAE;IACrE,IAAI,wBAAwB,cAC1B,MAAM,IAAI,gJAAA,CAAA,YAAS,CACjB;IAEJ,IAAI,YAAY,WAAW,EAAE,IAAI,IAAI,GAAG,EAAE,EACxC,MAAM,IAAI,gJAAA,CAAA,qBAAkB,CAAC;QAAE,cAAc;IAAQ;AACzD;AAUM,SAAU,wBACd,WAA0C;IAE1C,MAAM,EACJ,OAAO,EACP,oBAAoB,EACpB,QAAQ,EACR,YAAY,EACZ,EAAE,EACF,UAAU,EACX,GAAG;IACJ,IAAI,MAAM,CAAC,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAT,EAAU,KAAK,MAAM,IAAI,mJAAA,CAAA,sBAAmB,CAAC;QAAE,SAAS;IAAE;IACrE,IAAI,OAAO,YAAY,eAAe,WAAW,GAC/C,MAAM,IAAI,iJAAA,CAAA,sBAAmB,CAAC;QAAE;IAAO;IACzC,IAAI,wBAAwB,cAC1B,MAAM,IAAI,gJAAA,CAAA,YAAS,CACjB;IAEJ,IAAI,YAAY,WAAW,EAAE,IAAI,IAAI,GAAG,EAAE,EACxC,MAAM,IAAI,gJAAA,CAAA,qBAAkB,CAAC;QAAE,cAAc;IAAQ;IACvD,IAAI,YACF,MAAM,IAAI,gJAAA,CAAA,YAAS,CACjB;AAEN"}},
    {"offset": {"line": 3637, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3642, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/transaction/getTransactionType.ts"],"sourcesContent":["import {\n  InvalidSerializableTransactionError,\n  type InvalidSerializableTransactionErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  FeeValuesEIP1559,\n  FeeValuesEIP4844,\n  FeeValuesLegacy,\n} from '../../index.js'\nimport type {\n  TransactionRequestEIP1559,\n  TransactionRequestEIP2930,\n  TransactionRequestEIP4844,\n  TransactionRequestGeneric,\n  TransactionRequestLegacy,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableGeneric,\n  TransactionSerializableLegacy,\n} from '../../types/transaction.js'\nimport type {\n  Assign,\n  ExactPartial,\n  IsNever,\n  OneOf,\n  Opaque,\n} from '../../types/utils.js'\n\ntype BaseProperties = {\n  accessList?: undefined\n  blobs?: undefined\n  blobVersionedHashes?: undefined\n  gasPrice?: undefined\n  maxFeePerBlobGas?: undefined\n  maxFeePerGas?: undefined\n  maxPriorityFeePerGas?: undefined\n  sidecars?: undefined\n}\n\ntype LegacyProperties = Assign<BaseProperties, FeeValuesLegacy>\ntype EIP1559Properties = Assign<\n  BaseProperties,\n  OneOf<\n    | {\n        maxFeePerGas: FeeValuesEIP1559['maxFeePerGas']\n      }\n    | {\n        maxPriorityFeePerGas: FeeValuesEIP1559['maxPriorityFeePerGas']\n      },\n    FeeValuesEIP1559\n  > & {\n    accessList?: TransactionSerializableEIP2930['accessList'] | undefined\n  }\n>\ntype EIP2930Properties = Assign<\n  BaseProperties,\n  ExactPartial<FeeValuesLegacy> & {\n    accessList: TransactionSerializableEIP2930['accessList']\n  }\n>\ntype EIP4844Properties = Assign<\n  BaseProperties,\n  ExactPartial<FeeValuesEIP4844> &\n    OneOf<\n      | {\n          blobs: TransactionSerializableEIP4844['blobs']\n        }\n      | {\n          blobVersionedHashes: TransactionSerializableEIP4844['blobVersionedHashes']\n        }\n      | {\n          sidecars: TransactionSerializableEIP4844['sidecars']\n        },\n      TransactionSerializableEIP4844\n    >\n>\n\nexport type GetTransactionType<\n  transaction extends OneOf<\n    TransactionSerializableGeneric | TransactionRequestGeneric\n  > = TransactionSerializableGeneric,\n  result =\n    | (transaction extends\n        | Opaque<TransactionSerializableLegacy, transaction>\n        | Opaque<TransactionRequestLegacy, transaction>\n        | LegacyProperties\n        ? 'legacy'\n        : never)\n    | (transaction extends\n        | Opaque<TransactionSerializableEIP1559, transaction>\n        | Opaque<TransactionRequestEIP1559, transaction>\n        | EIP1559Properties\n        ? 'eip1559'\n        : never)\n    | (transaction extends\n        | Opaque<TransactionSerializableEIP2930, transaction>\n        | Opaque<TransactionRequestEIP2930, transaction>\n        | EIP2930Properties\n        ? 'eip2930'\n        : never)\n    | (transaction extends\n        | Opaque<TransactionSerializableEIP4844, transaction>\n        | Opaque<TransactionRequestEIP4844, transaction>\n        | EIP4844Properties\n        ? 'eip4844'\n        : never)\n    | (transaction['type'] extends string ? transaction['type'] : never),\n> = IsNever<result> extends false ? result : string\n\nexport type GetTransactionTypeErrorType =\n  | InvalidSerializableTransactionErrorType\n  | ErrorType\n\nexport function getTransactionType<\n  const transaction extends OneOf<\n    TransactionSerializableGeneric | TransactionRequestGeneric\n  >,\n>(transaction: transaction): GetTransactionType<transaction> {\n  if (transaction.type)\n    return transaction.type as GetTransactionType<transaction>\n\n  if (\n    typeof transaction.blobs !== 'undefined' ||\n    typeof transaction.blobVersionedHashes !== 'undefined' ||\n    typeof transaction.maxFeePerBlobGas !== 'undefined' ||\n    typeof transaction.sidecars !== 'undefined'\n  )\n    return 'eip4844' as any\n\n  if (\n    typeof transaction.maxFeePerGas !== 'undefined' ||\n    typeof transaction.maxPriorityFeePerGas !== 'undefined'\n  ) {\n    return 'eip1559' as any\n  }\n\n  if (typeof transaction.gasPrice !== 'undefined') {\n    if (typeof transaction.accessList !== 'undefined') return 'eip2930' as any\n    return 'legacy' as any\n  }\n\n  throw new InvalidSerializableTransactionError({ transaction })\n}\n"],"names":[],"mappings":";;;;;;AAmHM,SAAU,mBAId,WAAwB;IACxB,IAAI,YAAY,IAAI,EAClB,OAAO,YAAY,IAAuC;IAE5D,IACE,OAAO,YAAY,KAAK,KAAK,eAC7B,OAAO,YAAY,mBAAmB,KAAK,eAC3C,OAAO,YAAY,gBAAgB,KAAK,eACxC,OAAO,YAAY,QAAQ,KAAK,aAEhC,OAAO;IAET,IACE,OAAO,YAAY,YAAY,KAAK,eACpC,OAAO,YAAY,oBAAoB,KAAK,aAC5C;QACA,OAAO;IACT;IAEA,IAAI,OAAO,YAAY,QAAQ,KAAK,aAAa;QAC/C,IAAI,OAAO,YAAY,UAAU,KAAK,aAAa,OAAO;QAC1D,OAAO;IACT;IAEA,MAAM,IAAI,uJAAA,CAAA,sCAAmC,CAAC;QAAE;IAAW;AAC7D"}},
    {"offset": {"line": 3662, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3667, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/transaction/serializeAccessList.ts"],"sourcesContent":["import {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport {\n  InvalidStorageKeySizeError,\n  type InvalidStorageKeySizeErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { AccessList } from '../../types/transaction.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport type { RecursiveArray } from '../encoding/toRlp.js'\n\nexport type SerializeAccessListErrorType =\n  | InvalidStorageKeySizeErrorType\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\n/*\n * Serialize an  EIP-2930 access list\n * @remarks\n * Use to create a transaction serializer with support for EIP-2930 access lists\n *\n * @param accessList - Array of objects of address and arrays of Storage Keys\n * @throws InvalidAddressError, InvalidStorageKeySizeError\n * @returns Array of hex strings\n */\nexport function serializeAccessList(\n  accessList?: AccessList | undefined,\n): RecursiveArray<Hex> {\n  if (!accessList || accessList.length === 0) return []\n\n  const serializedAccessList = []\n  for (let i = 0; i < accessList.length; i++) {\n    const { address, storageKeys } = accessList[i]\n\n    for (let j = 0; j < storageKeys.length; j++) {\n      if (storageKeys[j].length - 2 !== 64) {\n        throw new InvalidStorageKeySizeError({ storageKey: storageKeys[j] })\n      }\n    }\n\n    if (!isAddress(address, { strict: false })) {\n      throw new InvalidAddressError({ address })\n    }\n\n    serializedAccessList.push([address, storageKeys])\n  }\n  return serializedAccessList\n}\n"],"names":[],"mappings":";;;;;;;;;;AA6BM,SAAU,oBACd,UAAmC;IAEnC,IAAI,CAAC,cAAc,WAAW,MAAM,KAAK,GAAG,OAAO,EAAE;IAErD,MAAM,uBAAuB,EAAE;IAC/B,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,IAAK;QAC1C,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,UAAU,CAAC,EAAE;QAE9C,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,MAAM,EAAE,IAAK;YAC3C,IAAI,WAAW,CAAC,EAAE,CAAC,MAAM,GAAG,MAAM,IAAI;gBACpC,MAAM,IAAI,uJAAA,CAAA,6BAA0B,CAAC;oBAAE,YAAY,WAAW,CAAC,EAAE;gBAAA;YACnE;QACF;QAEA,IAAI,CAAC,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAT,EAAU,SAAS;YAAE,QAAQ;QAAK,IAAK;YAC1C,MAAM,IAAI,mJAAA,CAAA,sBAAmB,CAAC;gBAAE;YAAO;QACzC;QAEA,qBAAqB,IAAI,CAAC;YAAC;YAAS;SAAY;IAClD;IACA,OAAO;AACT"}},
    {"offset": {"line": 3703, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3708, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/transaction/serializeTransaction.ts"],"sourcesContent":["import {\n  InvalidLegacyVError,\n  type InvalidLegacyVErrorType,\n} from '../../errors/transaction.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  ByteArray,\n  Hex,\n  Signature,\n  SignatureLegacy,\n} from '../../types/misc.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableGeneric,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionSerializedEIP4844,\n  TransactionSerializedLegacy,\n  TransactionType,\n} from '../../types/transaction.js'\nimport type { OneOf } from '../../types/utils.js'\nimport {\n  type BlobsToCommitmentsErrorType,\n  blobsToCommitments,\n} from '../blob/blobsToCommitments.js'\nimport {\n  blobsToProofs,\n  type blobsToProofsErrorType,\n} from '../blob/blobsToProofs.js'\nimport {\n  type CommitmentsToVersionedHashesErrorType,\n  commitmentsToVersionedHashes,\n} from '../blob/commitmentsToVersionedHashes.js'\nimport {\n  type ToBlobSidecarsErrorType,\n  toBlobSidecars,\n} from '../blob/toBlobSidecars.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport { trim } from '../data/trim.js'\nimport { type ToHexErrorType, bytesToHex, toHex } from '../encoding/toHex.js'\nimport { type ToRlpErrorType, toRlp } from '../encoding/toRlp.js'\n\nimport {\n  type AssertTransactionEIP1559ErrorType,\n  type AssertTransactionEIP2930ErrorType,\n  type AssertTransactionEIP4844ErrorType,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionEIP4844,\n  assertTransactionLegacy,\n} from './assertTransaction.js'\nimport {\n  type GetTransactionType,\n  type GetTransactionTypeErrorType,\n  getTransactionType,\n} from './getTransactionType.js'\nimport {\n  type SerializeAccessListErrorType,\n  serializeAccessList,\n} from './serializeAccessList.js'\n\nexport type SerializedTransactionReturnType<\n  transaction extends TransactionSerializable = TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = GetTransactionType<transaction>,\n> = TransactionSerialized<_transactionType>\n\nexport type SerializeTransactionFn<\n  transaction extends TransactionSerializableGeneric = TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = never,\n> = typeof serializeTransaction<\n  OneOf<TransactionSerializable | transaction>,\n  _transactionType\n>\n\nexport type SerializeTransactionErrorType =\n  | GetTransactionTypeErrorType\n  | SerializeTransactionEIP1559ErrorType\n  | SerializeTransactionEIP2930ErrorType\n  | SerializeTransactionEIP4844ErrorType\n  | SerializeTransactionLegacyErrorType\n  | ErrorType\n\nexport function serializeTransaction<\n  const transaction extends TransactionSerializable,\n  ///\n  _transactionType extends TransactionType = GetTransactionType<transaction>,\n>(\n  transaction: transaction,\n  signature?: Signature | undefined,\n): SerializedTransactionReturnType<transaction, _transactionType> {\n  const type = getTransactionType(transaction) as GetTransactionType\n\n  if (type === 'eip1559')\n    return serializeTransactionEIP1559(\n      transaction as TransactionSerializableEIP1559,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip2930')\n    return serializeTransactionEIP2930(\n      transaction as TransactionSerializableEIP2930,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  if (type === 'eip4844')\n    return serializeTransactionEIP4844(\n      transaction as TransactionSerializableEIP4844,\n      signature,\n    ) as SerializedTransactionReturnType<transaction>\n\n  return serializeTransactionLegacy(\n    transaction as TransactionSerializableLegacy,\n    signature as SignatureLegacy,\n  ) as SerializedTransactionReturnType<transaction>\n}\n\ntype SerializeTransactionEIP4844ErrorType =\n  | AssertTransactionEIP4844ErrorType\n  | BlobsToCommitmentsErrorType\n  | CommitmentsToVersionedHashesErrorType\n  | blobsToProofsErrorType\n  | ToBlobSidecarsErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP4844(\n  transaction: TransactionSerializableEIP4844,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP4844 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP4844(transaction)\n\n  let blobVersionedHashes = transaction.blobVersionedHashes\n  let sidecars = transaction.sidecars\n  // If `blobs` are passed, we will need to compute the KZG commitments & proofs.\n  if (\n    transaction.blobs &&\n    (typeof blobVersionedHashes === 'undefined' ||\n      typeof sidecars === 'undefined')\n  ) {\n    const blobs = (\n      typeof transaction.blobs[0] === 'string'\n        ? transaction.blobs\n        : (transaction.blobs as ByteArray[]).map((x) => bytesToHex(x))\n    ) as Hex[]\n    const kzg = transaction.kzg!\n    const commitments = blobsToCommitments({\n      blobs,\n      kzg,\n    })\n\n    if (typeof blobVersionedHashes === 'undefined')\n      blobVersionedHashes = commitmentsToVersionedHashes({\n        commitments,\n      })\n    if (typeof sidecars === 'undefined') {\n      const proofs = blobsToProofs({ blobs, commitments, kzg })\n      sidecars = toBlobSidecars({ blobs, commitments, proofs })\n    }\n  }\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    maxFeePerBlobGas ? toHex(maxFeePerBlobGas) : '0x',\n    blobVersionedHashes ?? [],\n    ...toYParitySignatureArray(transaction, signature),\n  ] as const\n\n  const blobs: Hex[] = []\n  const commitments: Hex[] = []\n  const proofs: Hex[] = []\n  if (sidecars)\n    for (let i = 0; i < sidecars.length; i++) {\n      const { blob, commitment, proof } = sidecars[i]\n      blobs.push(blob)\n      commitments.push(commitment)\n      proofs.push(proof)\n    }\n\n  return concatHex([\n    '0x03',\n    sidecars\n      ? // If sidecars are enabled, envelope turns into a \"wrapper\":\n        toRlp([serializedTransaction, blobs, commitments, proofs])\n      : // If sidecars are disabled, standard envelope is used:\n        toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP4844\n}\n\ntype SerializeTransactionEIP1559ErrorType =\n  | AssertTransactionEIP1559ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP1559(\n  transaction: TransactionSerializableEIP1559,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP1559 {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = transaction\n\n  assertTransactionEIP1559(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x02',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP1559\n}\n\ntype SerializeTransactionEIP2930ErrorType =\n  | AssertTransactionEIP2930ErrorType\n  | ConcatHexErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | SerializeAccessListErrorType\n  | ErrorType\n\nfunction serializeTransactionEIP2930(\n  transaction: TransactionSerializableEIP2930,\n  signature?: Signature | undefined,\n): TransactionSerializedEIP2930 {\n  const { chainId, gas, data, nonce, to, value, accessList, gasPrice } =\n    transaction\n\n  assertTransactionEIP2930(transaction)\n\n  const serializedAccessList = serializeAccessList(accessList)\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    gasPrice ? toHex(gasPrice) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializedAccessList,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x01',\n    toRlp(serializedTransaction),\n  ]) as TransactionSerializedEIP2930\n}\n\ntype SerializeTransactionLegacyErrorType =\n  | AssertTransactionLegacyErrorType\n  | InvalidLegacyVErrorType\n  | ToHexErrorType\n  | ToRlpErrorType\n  | ErrorType\n\nfunction serializeTransactionLegacy(\n  transaction: TransactionSerializableLegacy,\n  signature?: SignatureLegacy | undefined,\n): TransactionSerializedLegacy {\n  const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction\n\n  assertTransactionLegacy(transaction)\n\n  let serializedTransaction = [\n    nonce ? toHex(nonce) : '0x',\n    gasPrice ? toHex(gasPrice) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n  ]\n\n  if (signature) {\n    const v = (() => {\n      // EIP-155 (inferred chainId)\n      if (signature.v >= 35n) {\n        const inferredChainId = (signature.v - 35n) / 2n\n        if (inferredChainId > 0) return signature.v\n        return 27n + (signature.v === 35n ? 0n : 1n)\n      }\n\n      // EIP-155 (explicit chainId)\n      if (chainId > 0)\n        return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n)\n\n      // Pre-EIP-155 (no chainId)\n      const v = 27n + (signature.v === 27n ? 0n : 1n)\n      if (signature.v !== v) throw new InvalidLegacyVError({ v: signature.v })\n      return v\n    })()\n\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(v),\n      signature.r,\n      signature.s,\n    ]\n  } else if (chainId > 0) {\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(chainId),\n      '0x',\n      '0x',\n    ]\n  }\n\n  return toRlp(serializedTransaction) as TransactionSerializedLegacy\n}\n\nexport function toYParitySignatureArray(\n  transaction: TransactionSerializableGeneric,\n  signature_?: Signature | undefined,\n) {\n  const signature = signature_ ?? transaction\n  const { v, yParity } = signature\n\n  if (typeof signature.r === 'undefined') return []\n  if (typeof signature.s === 'undefined') return []\n  if (typeof v === 'undefined' && typeof yParity === 'undefined') return []\n\n  const r = trim(signature.r)\n  const s = trim(signature.s)\n\n  const yParity_ = (() => {\n    if (typeof yParity === 'number') return yParity ? toHex(1) : '0x'\n    if (v === 0n) return '0x'\n    if (v === 1n) return toHex(1)\n\n    return v === 27n ? '0x' : toHex(1)\n  })()\n\n  return [yParity_, r === '0x00' ? '0x' : r, s === '0x00' ? '0x' : s]\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3912, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3917, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/accounts/utils/signTransaction.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerialized,\n} from '../../types/transaction.js'\nimport {\n  type Keccak256ErrorType,\n  keccak256,\n} from '../../utils/hash/keccak256.js'\nimport type { GetTransactionType } from '../../utils/transaction/getTransactionType.js'\nimport {\n  type SerializeTransactionFn,\n  serializeTransaction,\n} from '../../utils/transaction/serializeTransaction.js'\n\nimport { type SignErrorType, sign } from './sign.js'\n\nexport type SignTransactionParameters<\n  serializer extends\n    SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>,\n  transaction extends Parameters<serializer>[0] = Parameters<serializer>[0],\n> = {\n  privateKey: Hex\n  transaction: transaction\n  serializer?: serializer | undefined\n}\n\nexport type SignTransactionReturnType<\n  serializer extends\n    SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>,\n  transaction extends Parameters<serializer>[0] = Parameters<serializer>[0],\n> = TransactionSerialized<GetTransactionType<transaction>>\n\nexport type SignTransactionErrorType =\n  | Keccak256ErrorType\n  | SignErrorType\n  | ErrorType\n\nexport async function signTransaction<\n  serializer extends\n    SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>,\n  transaction extends Parameters<serializer>[0] = Parameters<serializer>[0],\n>(\n  parameters: SignTransactionParameters<serializer, transaction>,\n): Promise<SignTransactionReturnType<serializer, transaction>> {\n  const {\n    privateKey,\n    transaction,\n    serializer = serializeTransaction,\n  } = parameters\n\n  const signableTransaction = (() => {\n    // For EIP-4844 Transactions, we want to sign the transaction payload body (tx_payload_body) without the sidecars (ie. without the network wrapper).\n    // See: https://github.com/ethereum/EIPs/blob/e00f4daa66bd56e2dbd5f1d36d09fd613811a48b/EIPS/eip-4844.md#networking\n    if (transaction.type === 'eip4844')\n      return {\n        ...transaction,\n        sidecars: false,\n      }\n    return transaction\n  })()\n\n  const signature = await sign({\n    hash: keccak256(serializer(signableTransaction)),\n    privateKey,\n  })\n  return serializer(transaction, signature) as SignTransactionReturnType<\n    serializer,\n    transaction\n  >\n}\n"],"names":[],"mappings":";;;;;;;;;;AAuCO,eAAe,gBAKpB,UAA8D;IAE9D,MAAM,EACJ,UAAU,EACV,WAAW,EACX,aAAa,8KAAA,CAAA,uBAAoB,EAClC,GAAG;IAEJ,MAAM,sBAAsB,CAAC;QAC3B,oJAAoJ;QACpJ,kHAAkH;QAClH,IAAI,YAAY,IAAI,KAAK,WACvB,OAAO;YACL,GAAG,WAAW;YACd,UAAU;;QAEd,OAAO;IACT,CAAC;IAED,MAAM,YAAY,MAAM,CAAA,GAAA,2JAAA,CAAA,OAAI,AAAJ,EAAK;QAC3B,MAAM,CAAA,GAAA,4JAAA,CAAA,YAAS,AAAT,EAAU,WAAW;QAC3B;;IAEF,OAAO,WAAW,aAAa;AAIjC"}},
    {"offset": {"line": 3944, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3949, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/regex.ts"],"sourcesContent":["export const arrayRegex = /^(.*)\\[([0-9]*)\\]$/\n\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n// https://regexr.com/6va55\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/\n\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n// https://regexr.com/6v8hp\nexport const integerRegex =\n  /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/\n"],"names":[],"mappings":";;;;;AAAO,MAAM,aAAa;AAInB,MAAM,aAAa;AAInB,MAAM,eACX"}},
    {"offset": {"line": 3957, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3962, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/stringify.ts"],"sourcesContent":["import type { ErrorType } from '../errors/utils.js'\n\nexport type StringifyErrorType = ErrorType\n\nexport const stringify: typeof JSON.stringify = (value, replacer, space) =>\n  JSON.stringify(\n    value,\n    (key, value_) => {\n      const value = typeof value_ === 'bigint' ? value_.toString() : value_\n      return typeof replacer === 'function' ? replacer(key, value) : value\n    },\n    space,\n  )\n"],"names":[],"mappings":";;;AAIO,MAAM,YAAmC,CAAC,OAAO,UAAU,QAChE,KAAK,SAAS,CACZ,OACA,CAAC,KAAK;QACJ,MAAM,QAAQ,OAAO,WAAW,WAAW,OAAO,QAAQ,KAAK;QAC/D,OAAO,OAAO,aAAa,aAAa,SAAS,KAAK,SAAS;IACjE,GACA"}},
    {"offset": {"line": 3969, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3974, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/typedData.ts"],"sourcesContent":["import type { TypedData, TypedDataDomain, TypedDataParameter } from 'abitype'\n\nimport { BytesSizeMismatchError } from '../errors/abi.js'\nimport { InvalidAddressError } from '../errors/address.js'\nimport type { Hex } from '../types/misc.js'\nimport type { TypedDataDefinition } from '../types/typedData.js'\n\nimport type { ErrorType } from '../errors/utils.js'\nimport { type IsAddressErrorType, isAddress } from './address/isAddress.js'\nimport { type SizeErrorType, size } from './data/size.js'\nimport { type NumberToHexErrorType, numberToHex } from './encoding/toHex.js'\nimport { bytesRegex, integerRegex } from './regex.js'\nimport {\n  type HashDomainErrorType,\n  hashDomain,\n} from './signature/hashTypedData.js'\nimport { stringify } from './stringify.js'\n\nexport type SerializeTypedDataErrorType =\n  | HashDomainErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function serializeTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\n  const {\n    domain: domain_,\n    message: message_,\n    primaryType,\n    types,\n  } = parameters as unknown as TypedDataDefinition\n\n  const normalizeData = (\n    struct: readonly TypedDataParameter[],\n    data_: Record<string, unknown>,\n  ) => {\n    const data = { ...data_ }\n    for (const param of struct) {\n      const { name, type } = param\n      if (type === 'address') data[name] = (data[name] as string).toLowerCase()\n    }\n    return data\n  }\n\n  const domain = (() => {\n    if (!types.EIP712Domain) return {}\n    if (!domain_) return {}\n    return normalizeData(types.EIP712Domain, domain_)\n  })()\n\n  const message = (() => {\n    if (primaryType === 'EIP712Domain') return undefined\n    return normalizeData(types[primaryType], message_)\n  })()\n\n  return stringify({ domain, message, primaryType, types })\n}\n\nexport type ValidateTypedDataErrorType =\n  | HashDomainErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function validateTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\n  const { domain, message, primaryType, types } =\n    parameters as unknown as TypedDataDefinition\n\n  const validateData = (\n    struct: readonly TypedDataParameter[],\n    data: Record<string, unknown>,\n  ) => {\n    for (const param of struct) {\n      const { name, type } = param\n      const value = data[name]\n\n      const integerMatch = type.match(integerRegex)\n      if (\n        integerMatch &&\n        (typeof value === 'number' || typeof value === 'bigint')\n      ) {\n        const [_type, base, size_] = integerMatch\n        // If number cannot be cast to a sized hex value, it is out of range\n        // and will throw.\n        numberToHex(value, {\n          signed: base === 'int',\n          size: Number.parseInt(size_) / 8,\n        })\n      }\n\n      if (type === 'address' && typeof value === 'string' && !isAddress(value))\n        throw new InvalidAddressError({ address: value })\n\n      const bytesMatch = type.match(bytesRegex)\n      if (bytesMatch) {\n        const [_type, size_] = bytesMatch\n        if (size_ && size(value as Hex) !== Number.parseInt(size_))\n          throw new BytesSizeMismatchError({\n            expectedSize: Number.parseInt(size_),\n            givenSize: size(value as Hex),\n          })\n      }\n\n      const struct = types[type]\n      if (struct) validateData(struct, value as Record<string, unknown>)\n    }\n  }\n\n  // Validate domain types.\n  if (types.EIP712Domain && domain) validateData(types.EIP712Domain, domain)\n\n  // Validate message types.\n  if (primaryType !== 'EIP712Domain') validateData(types[primaryType], message)\n}\n\nexport type GetTypesForEIP712DomainErrorType = ErrorType\n\nexport function getTypesForEIP712Domain({\n  domain,\n}: { domain?: TypedDataDomain | undefined }): TypedDataParameter[] {\n  return [\n    typeof domain?.name === 'string' && { name: 'name', type: 'string' },\n    domain?.version && { name: 'version', type: 'string' },\n    typeof domain?.chainId === 'number' && {\n      name: 'chainId',\n      type: 'uint256',\n    },\n    domain?.verifyingContract && {\n      name: 'verifyingContract',\n      type: 'address',\n    },\n    domain?.salt && { name: 'salt', type: 'bytes32' },\n  ].filter(Boolean) as TypedDataParameter[]\n}\n\nexport type DomainSeparatorErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | ErrorType\n\nexport function domainSeparator({ domain }: { domain: TypedDataDomain }): Hex {\n  return hashDomain({\n    domain,\n    types: {\n      EIP712Domain: getTypesForEIP712Domain({ domain }),\n    },\n  })\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4095, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4100, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/utils/signature/hashTypedData.ts"],"sourcesContent":["// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\n\nimport type { AbiParameter, TypedData, TypedDataDomain } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from '../abi/encodeAbiParameters.js'\nimport { concat } from '../data/concat.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type GetTypesForEIP712DomainErrorType,\n  type ValidateTypedDataErrorType,\n  getTypesForEIP712Domain,\n  validateTypedData,\n} from '../typedData.js'\n\ntype MessageTypeProperty = {\n  name: string\n  type: string\n}\n\nexport type HashTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n> = TypedDataDefinition<typedData, primaryType>\n\nexport type HashTypedDataReturnType = Hex\n\nexport type HashTypedDataErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | HashStructErrorType\n  | ValidateTypedDataErrorType\n  | ErrorType\n\nexport function hashTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(\n  parameters: HashTypedDataParameters<typedData, primaryType>,\n): HashTypedDataReturnType {\n  const {\n    domain = {},\n    message,\n    primaryType,\n  } = parameters as HashTypedDataParameters\n  const types = {\n    EIP712Domain: getTypesForEIP712Domain({ domain }),\n    ...parameters.types,\n  }\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types,\n  })\n\n  const parts: Hex[] = ['0x1901']\n  if (domain)\n    parts.push(\n      hashDomain({\n        domain,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  if (primaryType !== 'EIP712Domain')\n    parts.push(\n      hashStruct({\n        data: message,\n        primaryType,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  return keccak256(concat(parts))\n}\n\nexport type HashDomainErrorType = HashStructErrorType | ErrorType\n\nexport function hashDomain({\n  domain,\n  types,\n}: {\n  domain: TypedDataDomain\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types,\n  })\n}\n\ntype HashStructErrorType = EncodeDataErrorType | Keccak256ErrorType | ErrorType\n\nexport function hashStruct({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types,\n  })\n  return keccak256(encoded)\n}\n\ntype EncodeDataErrorType =\n  | EncodeAbiParametersErrorType\n  | EncodeFieldErrorType\n  | HashTypeErrorType\n  | ErrorType\n\nfunction encodeData({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encodedTypes: AbiParameter[] = [{ type: 'bytes32' }]\n  const encodedValues: unknown[] = [hashType({ primaryType, types })]\n\n  for (const field of types[primaryType]) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name],\n    })\n    encodedTypes.push(type)\n    encodedValues.push(value)\n  }\n\n  return encodeAbiParameters(encodedTypes, encodedValues)\n}\n\ntype HashTypeErrorType =\n  | ToHexErrorType\n  | EncodeTypeErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\nfunction hashType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encodedHashType = toHex(encodeType({ primaryType, types }))\n  return keccak256(encodedHashType)\n}\n\ntype EncodeTypeErrorType = FindTypeDependenciesErrorType\n\nexport function encodeType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  let result = ''\n  const unsortedDeps = findTypeDependencies({ primaryType, types })\n  unsortedDeps.delete(primaryType)\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()]\n  for (const type of deps) {\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`\n  }\n\n  return result\n}\n\ntype FindTypeDependenciesErrorType = ErrorType\n\nfunction findTypeDependencies(\n  {\n    primaryType: primaryType_,\n    types,\n  }: {\n    primaryType: string\n    types: Record<string, MessageTypeProperty[]>\n  },\n  results: Set<string> = new Set(),\n): Set<string> {\n  const match = primaryType_.match(/^\\w*/u)\n  const primaryType = match?.[0]!\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results\n  }\n\n  results.add(primaryType)\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies({ primaryType: field.type, types }, results)\n  }\n  return results\n}\n\ntype EncodeFieldErrorType =\n  | Keccak256ErrorType\n  | EncodeAbiParametersErrorType\n  | ToHexErrorType\n  | ErrorType\n\nfunction encodeField({\n  types,\n  name,\n  type,\n  value,\n}: {\n  types: Record<string, MessageTypeProperty[]>\n  name: string\n  type: string\n  value: any\n}): [type: AbiParameter, value: any] {\n  if (types[type] !== undefined) {\n    return [\n      { type: 'bytes32' },\n      keccak256(encodeData({ data: value, primaryType: type, types })),\n    ]\n  }\n\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : ''\n    value = `0x${prepend + value.slice(2)}`\n    return [{ type: 'bytes32' }, keccak256(value)]\n  }\n\n  if (type === 'string') return [{ type: 'bytes32' }, keccak256(toHex(value))]\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['))\n    const typeValuePairs = (value as [AbiParameter, any][]).map((item) =>\n      encodeField({\n        name,\n        type: parsedType,\n        types,\n        value: item,\n      }),\n    )\n    return [\n      { type: 'bytes32' },\n      keccak256(\n        encodeAbiParameters(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ]\n  }\n\n  return [{ type }, value]\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4276, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4281, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/accounts/utils/signTypedData.ts"],"sourcesContent":["import type { TypedData } from 'abitype'\n\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type HashTypedDataErrorType,\n  hashTypedData,\n} from '../../utils/signature/hashTypedData.js'\nimport {\n  type SerializeSignatureErrorType,\n  serializeSignature,\n} from '../../utils/signature/serializeSignature.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type SignErrorType, sign } from './sign.js'\n\nexport type SignTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n> = TypedDataDefinition<typedData, primaryType> & {\n  /** The private key to sign with. */\n  privateKey: Hex\n}\n\nexport type SignTypedDataReturnType = Hex\n\nexport type SignTypedDataErrorType =\n  | HashTypedDataErrorType\n  | SignErrorType\n  | SerializeSignatureErrorType\n  | ErrorType\n\n/**\n * @description Signs typed data and calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191):\n * `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n *\n * @returns The signature.\n */\nexport async function signTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(\n  parameters: SignTypedDataParameters<typedData, primaryType>,\n): Promise<SignTypedDataReturnType> {\n  const { privateKey, ...typedData } =\n    parameters as unknown as SignTypedDataParameters\n  const signature = await sign({\n    hash: hashTypedData(typedData),\n    privateKey,\n  })\n  return serializeSignature(signature)\n}\n"],"names":[],"mappings":";;;;;;;;;;AAsCO,eAAe,cAIpB,UAA2D;IAE3D,MAAM,EAAE,UAAU,EAAE,GAAG,WAAW,GAChC;IACF,MAAM,YAAY,MAAM,CAAA,GAAA,2JAAA,CAAA,OAAI,AAAJ,EAAK;QAC3B,MAAM,CAAA,GAAA,qKAAA,CAAA,gBAAa,AAAb,EAAc;QACpB;;IAEF,OAAO,CAAA,GAAA,0KAAA,CAAA,qBAAkB,AAAlB,EAAmB;AAC5B"}},
    {"offset": {"line": 4299, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4304, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/accounts/privateKeyToAccount.ts"],"sourcesContent":["import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { Hex } from '../types/misc.js'\nimport { type ToHexErrorType, toHex } from '../utils/encoding/toHex.js'\n\nimport type { ErrorType } from '../errors/utils.js'\nimport type { NonceManager } from '../utils/nonceManager.js'\nimport { type ToAccountErrorType, toAccount } from './toAccount.js'\nimport type { PrivateKeyAccount } from './types.js'\nimport {\n  type PublicKeyToAddressErrorType,\n  publicKeyToAddress,\n} from './utils/publicKeyToAddress.js'\nimport { type SignMessageErrorType, signMessage } from './utils/signMessage.js'\nimport {\n  type SignTransactionErrorType,\n  signTransaction,\n} from './utils/signTransaction.js'\nimport {\n  type SignTypedDataErrorType,\n  signTypedData,\n} from './utils/signTypedData.js'\n\nexport type PrivateKeyToAccountOptions = {\n  nonceManager?: NonceManager | undefined\n}\n\nexport type PrivateKeyToAccountErrorType =\n  | ToAccountErrorType\n  | ToHexErrorType\n  | PublicKeyToAddressErrorType\n  | SignMessageErrorType\n  | SignTransactionErrorType\n  | SignTypedDataErrorType\n  | ErrorType\n\n/**\n * @description Creates an Account from a private key.\n *\n * @returns A Private Key Account.\n */\nexport function privateKeyToAccount(\n  privateKey: Hex,\n  options: PrivateKeyToAccountOptions = {},\n): PrivateKeyAccount {\n  const { nonceManager } = options\n  const publicKey = toHex(secp256k1.getPublicKey(privateKey.slice(2), false))\n  const address = publicKeyToAddress(publicKey)\n\n  const account = toAccount({\n    address,\n    nonceManager,\n    async signMessage({ message }) {\n      return signMessage({ message, privateKey })\n    },\n    async signTransaction(transaction, { serializer } = {}) {\n      return signTransaction({ privateKey, transaction, serializer })\n    },\n    async signTypedData(typedData) {\n      return signTypedData({ ...typedData, privateKey })\n    },\n  })\n\n  return {\n    ...account,\n    publicKey,\n    source: 'privateKey',\n  } as PrivateKeyAccount\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAyCM,SAAU,oBACd,UAAe,EACf,UAAsC,CAAA,CAAE;IAExC,MAAM,EAAE,YAAY,EAAE,GAAG;IACzB,MAAM,YAAY,CAAA,GAAA,4JAAA,CAAA,QAAK,AAAL,EAAM,+KAAA,CAAA,YAAS,CAAC,YAAY,CAAC,WAAW,KAAK,CAAC,IAAI;IACpE,MAAM,UAAU,CAAA,GAAA,yKAAA,CAAA,qBAAkB,AAAlB,EAAmB;IAEnC,MAAM,UAAU,CAAA,GAAA,uJAAA,CAAA,YAAS,AAAT,EAAU;QACxB;QACA;QACA,MAAM,aAAY,EAAE,OAAO,EAAE;YAC3B,OAAO,CAAA,GAAA,kKAAA,CAAA,cAAW,AAAX,EAAY;gBAAE;gBAAS;YAAU;QAC1C;QACA,MAAM,iBAAgB,WAAW,EAAE,EAAE,UAAU,EAAE,GAAG,CAAA,CAAE;YACpD,OAAO,CAAA,GAAA,sKAAA,CAAA,kBAAe,AAAf,EAAgB;gBAAE;gBAAY;gBAAa;YAAU;QAC9D;QACA,MAAM,eAAc,SAAS;YAC3B,OAAO,CAAA,GAAA,oKAAA,CAAA,gBAAa,AAAb,EAAc;gBAAE,GAAG,SAAS;gBAAE;YAAU;QACjD;;IAGF,OAAO;QACL,GAAG,OAAO;QACV;QACA,QAAQ;;AAEZ"}},
    {"offset": {"line": 4355, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4360, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/accounts/hdKeyToAccount.ts"],"sourcesContent":["import { type ToHexErrorType, toHex } from '../utils/encoding/toHex.js'\n\nimport type { ErrorType } from '../errors/utils.js'\nimport type { HDKey } from '../types/account.js'\nimport {\n  type PrivateKeyToAccountErrorType,\n  type PrivateKeyToAccountOptions,\n  privateKeyToAccount,\n} from './privateKeyToAccount.js'\nimport type { HDAccount, HDOptions } from './types.js'\n\nexport type HDKeyToAccountOptions = HDOptions & PrivateKeyToAccountOptions\n\nexport type HDKeyToAccountErrorType =\n  | PrivateKeyToAccountErrorType\n  | ToHexErrorType\n  | ErrorType\n\n/**\n * @description Creates an Account from a HD Key.\n *\n * @returns A HD Account.\n */\nexport function hdKeyToAccount(\n  hdKey_: HDKey,\n  {\n    accountIndex = 0,\n    addressIndex = 0,\n    changeIndex = 0,\n    path,\n    ...options\n  }: HDKeyToAccountOptions = {},\n): HDAccount {\n  const hdKey = hdKey_.derive(\n    path || `m/44'/60'/${accountIndex}'/${changeIndex}/${addressIndex}`,\n  )\n  const account = privateKeyToAccount(toHex(hdKey.privateKey!), options)\n  return {\n    ...account,\n    getHdKey: () => hdKey,\n    source: 'hd',\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAuBM,SAAU,eACd,MAAa,EACb,EACE,eAAe,CAAC,EAChB,eAAe,CAAC,EAChB,cAAc,CAAC,EACf,IAAI,EACJ,GAAG,SAAO,GACe,CAAA,CAAE;IAE7B,MAAM,QAAQ,OAAO,MAAM,CACzB,QAAQ,CAAA,UAAA,EAAa,aAAY,EAAA,EAAK,YAAW,CAAA,EAAI,aAAY,CAAE;IAErE,MAAM,UAAU,CAAA,GAAA,iKAAA,CAAA,sBAAmB,AAAnB,EAAoB,CAAA,GAAA,4JAAA,CAAA,QAAK,AAAL,EAAM,MAAM,UAAW,GAAG;IAC9D,OAAO;QACL,GAAG,OAAO;QACV,UAAU,IAAM;QAChB,QAAQ;;AAEZ"}},
    {"offset": {"line": 4377, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4382, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/viem/accounts/mnemonicToAccount.ts"],"sourcesContent":["import { HDKey } from '@scure/bip32'\nimport { mnemonicToSeedSync } from '@scure/bip39'\n\nimport type { ErrorType } from '../errors/utils.js'\nimport {\n  type HDKeyToAccountErrorType,\n  type HDKeyToAccountOptions,\n  hdKeyToAccount,\n} from './hdKeyToAccount.js'\nimport type { HDAccount, HDOptions } from './types.js'\n\nexport type MnemonicToAccountOptions = HDKeyToAccountOptions\n\nexport type MnemonicToAccountErrorType = HDKeyToAccountErrorType | ErrorType\n\n/**\n * @description Creates an Account from a mnemonic phrase.\n *\n * @returns A HD Account.\n */\nexport function mnemonicToAccount(\n  mnemonic: string,\n  opts: HDOptions = {},\n): HDAccount {\n  const seed = mnemonicToSeedSync(mnemonic)\n  return hdKeyToAccount(HDKey.fromMasterSeed(seed), opts)\n}\n"],"names":[],"mappings":";;;;;;;;;;AAoBM,SAAU,kBACd,QAAgB,EAChB,OAAkB,CAAA,CAAE;IAEpB,MAAM,OAAO,CAAA,GAAA,kJAAA,CAAA,qBAAkB,AAAlB,EAAmB;IAChC,OAAO,CAAA,GAAA,4JAAA,CAAA,iBAAc,AAAd,EAAe,yJAAA,CAAA,QAAK,CAAC,cAAc,CAAC,OAAO;AACpD"}},
    {"offset": {"line": 4396, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}