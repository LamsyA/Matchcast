{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/jsx/jsx-dev-runtime/index.ts"],"sourcesContent":["import { type JSXNode, jsx } from 'hono/jsx'\nexport type { JSX } from 'hono/jsx/jsx-runtime'\nimport type { HtmlEscapedString } from 'hono/utils/html'\nexport { Fragment } from 'hono/jsx'\n\nexport function jsxDEV(\n  tag: string | Function,\n  props: Record<string, unknown>,\n  key?: string,\n): JSXNode {\n  let node: JSXNode\n  if (!props || !('children' in props)) {\n    node = jsx(tag, props, ...[])\n  } else {\n    const children = props.children as string | HtmlEscapedString\n    // biome-ignore lint/performance/noDelete:\n    // biome-ignore lint/complexity/useLiteralKeys:\n    delete props['children']\n    node = Array.isArray(children)\n      ? jsx(tag, props, ...children)\n      : jsx(tag, props, ...[children])\n  }\n  node.key = key\n  return node\n}\n"],"names":[],"mappings":";;;;;;;AAKM,SAAU,OACd,GAAsB,EACtB,KAA8B,EAC9B,GAAY;IAEZ,IAAI;IACJ,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,KAAK,GAAG;QACpC,OAAO,CAAA,GAAA,6IAAA,CAAA,MAAG,AAAH,EAAI,KAAK,UAAU,EAAE;IAC9B,OAAO;QACL,MAAM,WAAW,MAAM,QAAsC;QAC7D,0CAA0C;QAC1C,+CAA+C;QAC/C,OAAO,KAAK,CAAC,WAAW;QACxB,OAAO,MAAM,OAAO,CAAC,YACjB,CAAA,GAAA,6IAAA,CAAA,MAAG,AAAH,EAAI,KAAK,UAAU,YACnB,CAAA,GAAA,6IAAA,CAAA,MAAG,AAAH,EAAI,KAAK,UAAU;YAAC;SAAS;IACnC;IACA,KAAK,GAAG,GAAG;IACX,OAAO;AACT"}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/components/Button.tsx"],"sourcesContent":["import type { JSX } from 'hono/jsx/jsx-runtime'\nimport type { HtmlEscapedString } from 'hono/utils/html'\n\nexport const buttonPrefix = {\n  addCastAction: '_a',\n  link: '_l',\n  mint: '_m',\n  redirect: '_r',\n  reset: '_c',\n  transaction: '_t',\n  signature: '_s',\n}\n\nexport type ButtonProps = {\n  children: string | string[]\n}\n\nexport type ButtonRootProps = ButtonProps & {\n  action?: string | undefined\n  value?: string | undefined\n}\n\nButtonRoot.__type = 'button'\nexport function ButtonRoot({\n  action,\n  children,\n  // @ts-ignore - private\n  index = 1,\n  value,\n}: ButtonRootProps): JSX.Element {\n  return [\n    <meta\n      property={`fc:frame:button:${index}`}\n      content={normalizeChildren(children)}\n      {...(value ? { 'data-value': value } : {})}\n    />,\n    <meta property={`fc:frame:button:${index}:action`} content=\"post\" />,\n    action && (\n      <meta property={`fc:frame:button:${index}:target`} content={action} />\n    ),\n  ] as unknown as HtmlEscapedString\n}\n\nexport type ButtonAddCastActionProps = ButtonProps & {\n  /** Action path */\n  action: string\n}\n\nButtonAddCastAction.__type = 'button'\nexport function ButtonAddCastAction({\n  action,\n  children,\n  // @ts-ignore - private\n  index = 1,\n}: ButtonAddCastActionProps) {\n  return [\n    <meta\n      property={`fc:frame:button:${index}`}\n      content={normalizeChildren(children)}\n      data-value={buttonPrefix.addCastAction}\n    />,\n    <meta property={`fc:frame:button:${index}:action`} content=\"link\" />,\n    <meta\n      property={`fc:frame:button:${index}:target`}\n      content={`https://warpcast.com/~/add-cast-action?url=${action}`}\n    />,\n  ] as unknown as HtmlEscapedString\n}\n\nexport type ButtonLinkProps = ButtonProps & {\n  href: string\n}\n\nButtonLink.__type = 'button'\nexport function ButtonLink({\n  children,\n  // @ts-ignore - private\n  index = 1,\n  href,\n}: ButtonLinkProps): JSX.Element {\n  return [\n    <meta\n      property={`fc:frame:button:${index}`}\n      content={normalizeChildren(children)}\n      data-value={buttonPrefix.link}\n    />,\n    <meta property={`fc:frame:button:${index}:action`} content=\"link\" />,\n    <meta property={`fc:frame:button:${index}:target`} content={href} />,\n  ] as unknown as HtmlEscapedString\n}\n\nexport type ButtonMintProps = ButtonProps & {\n  target: string\n}\n\nButtonMint.__type = 'button'\nexport function ButtonMint({\n  children,\n  // @ts-ignore - private\n  index = 1,\n  target,\n}: ButtonMintProps): JSX.Element {\n  return [\n    <meta\n      property={`fc:frame:button:${index}`}\n      content={normalizeChildren(children)}\n      data-value={buttonPrefix.mint}\n    />,\n    <meta property={`fc:frame:button:${index}:action`} content=\"mint\" />,\n    <meta property={`fc:frame:button:${index}:target`} content={target} />,\n  ] as unknown as HtmlEscapedString\n}\n\nexport type ButtonRedirectProps = ButtonProps & {\n  location: string\n}\n\nButtonRedirect.__type = 'button'\nexport function ButtonRedirect({\n  children,\n  // @ts-ignore - private\n  index = 1,\n  location,\n}: ButtonRedirectProps): JSX.Element {\n  return [\n    <meta\n      property={`fc:frame:button:${index}`}\n      content={normalizeChildren(children)}\n      data-type=\"redirect\"\n      data-value={`${buttonPrefix.redirect}:${location}`}\n    />,\n    <meta\n      property={`fc:frame:button:${index}:action`}\n      content=\"post_redirect\"\n    />,\n    // TODO: Add `target` prop so folks can `'post_redirect'` to a different frame\n    // <meta property={`fc:frame:button:${index}:target`} content={target} />,\n  ] as unknown as HtmlEscapedString\n}\n\nexport type ButtonResetProps = ButtonProps\n\nButtonReset.__type = 'button'\nexport function ButtonReset({\n  children,\n  // @ts-ignore - private\n  index = 1,\n}: ButtonResetProps): JSX.Element {\n  return (\n    <meta\n      property={`fc:frame:button:${index}`}\n      content={normalizeChildren(children)}\n      data-value={buttonPrefix.reset}\n      data-type=\"reset\"\n    />\n  )\n}\n\nexport type ButtonTransactionProps = ButtonProps & {\n  action?: string | undefined\n  target: string\n}\n\nButtonTransaction.__type = 'button'\nexport function ButtonTransaction({\n  action,\n  children,\n  // @ts-ignore - private\n  index = 1,\n  target,\n}: ButtonTransactionProps): JSX.Element {\n  return [\n    <meta\n      property={`fc:frame:button:${index}`}\n      content={normalizeChildren(children)}\n      data-value={buttonPrefix.transaction}\n    />,\n    <meta property={`fc:frame:button:${index}:action`} content=\"tx\" />,\n    <meta property={`fc:frame:button:${index}:target`} content={target} />,\n    action && (\n      <meta property={`fc:frame:button:${index}:post_url`} content={action} />\n    ),\n  ] as unknown as HtmlEscapedString\n}\n\nexport type ButtonSignatureProps = ButtonProps & {\n  action?: string | undefined\n  target: string\n}\n\nButtonSignature.__type = 'button'\nexport function ButtonSignature({\n  action,\n  children,\n  // @ts-ignore - private\n  index = 1,\n  target,\n}: ButtonSignatureProps): JSX.Element {\n  return [\n    <meta\n      property={`fc:frame:button:${index}`}\n      content={normalizeChildren(children)}\n      data-value={buttonPrefix.signature}\n    />,\n    <meta property={`fc:frame:button:${index}:action`} content=\"tx\" />,\n    <meta property={`fc:frame:button:${index}:target`} content={target} />,\n    action && (\n      <meta property={`fc:frame:button:${index}:post_url`} content={action} />\n    ),\n  ] as unknown as HtmlEscapedString\n}\n\nexport const Button = Object.assign(ButtonRoot, {\n  AddCastAction: ButtonAddCastAction,\n  Link: ButtonLink,\n  Mint: ButtonMint,\n  Redirect: ButtonRedirect,\n  Reset: ButtonReset,\n  Transaction: ButtonTransaction,\n  Signature: ButtonSignature,\n})\n\nfunction normalizeChildren(children: string | string[]) {\n  return Array.isArray(children) ? children.join('') : children\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/fromQuery.ts"],"sourcesContent":["export function fromQuery<returnType>(query: object): returnType {\n  const obj: Record<string, any> = {}\n  for (const [key, value] of Object.entries(query)) {\n    let decoded: any = decodeURIComponent(value)\n    if (decoded.startsWith('#A_'))\n      decoded = decoded.replace('#A_', '').split(',')\n    else if (decoded.startsWith('#O_'))\n      decoded = JSON.parse(decoded.replace('#O_', ''))\n\n    // Omit any encoded ampersands.\n    obj[key.replace(/^amp;/, '')] = decoded\n  }\n  return obj as returnType\n}\n"],"names":[],"mappings":";;;AAAM,SAAU,UAAsB,KAAa;IACjD,MAAM,MAA2B,CAAA;IACjC,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,OAAO,CAAC,OAAQ;QAChD,IAAI,UAAe,mBAAmB;QACtC,IAAI,QAAQ,UAAU,CAAC,QACrB,UAAU,QAAQ,OAAO,CAAC,OAAO,IAAI,KAAK,CAAC;aACxC,IAAI,QAAQ,UAAU,CAAC,QAC1B,UAAU,KAAK,KAAK,CAAC,QAAQ,OAAO,CAAC,OAAO;QAE9C,+BAA+B;QAC/B,GAAG,CAAC,IAAI,OAAO,CAAC,SAAS,IAAI,GAAG;IAClC;IACA,OAAO;AACT"}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 263, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/getButtonValues.ts"],"sourcesContent":["import type { JSXNode } from 'hono/jsx'\nimport type { FrameButtonValue } from '../types/frame.js'\n\nexport function getButtonValues(\n  intents: readonly JSXNode[] | null,\n): FrameButtonValue[] {\n  if (!intents) return []\n\n  const buttonValues: FrameButtonValue[] = []\n  for (const intent of intents) {\n    if (!intent) continue\n    const { property } = intent.props\n    if (!(property as string).match(/^fc:frame:button:(1|2|3|4)$/)) continue\n    buttonValues.push(intent.props['data-value'])\n  }\n  return buttonValues\n}\n"],"names":[],"mappings":";;;AAGM,SAAU,gBACd,OAAkC;IAElC,IAAI,CAAC,SAAS,OAAO,EAAE;IAEvB,MAAM,eAAmC,EAAE;IAC3C,KAAK,MAAM,UAAU,QAAS;QAC5B,IAAI,CAAC,QAAQ;QACb,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,KAAK;QACjC,IAAI,CAAE,SAAoB,KAAK,CAAC,gCAAgC;QAChE,aAAa,IAAI,CAAC,OAAO,KAAK,CAAC,aAAa;IAC9C;IACA,OAAO;AACT"}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/getCastActionContext.ts"],"sourcesContent":["import type { Input } from 'hono'\nimport type { CastActionContext, Context } from '../types/context.js'\nimport type { Env } from '../types/env.js'\n\ntype GetCastActionContextParameters<\n  env extends Env = Env,\n  path extends string = string,\n  input extends Input = {},\n> = {\n  context: Context<env, path, input>\n}\n\ntype GetCastActionContextReturnType<\n  env extends Env = Env,\n  path extends string = string,\n  input extends Input = {},\n> = {\n  context: CastActionContext<env, path, input>\n}\n\nexport function getCastActionContext<\n  env extends Env,\n  path extends string,\n  input extends Input = {},\n>(\n  parameters: GetCastActionContextParameters<env, path, input>,\n): GetCastActionContextReturnType<env, path, input> {\n  const { context } = parameters\n  const { env, frameData, req, verified } = context || {}\n\n  if (!frameData)\n    throw new Error('Frame data must be present for action handlers.')\n\n  return {\n    context: {\n      actionData: {\n        buttonIndex: 1,\n        castId: frameData.castId,\n        fid: frameData.fid,\n        network: frameData.network,\n        messageHash: frameData.messageHash,\n        timestamp: frameData.timestamp,\n        url: frameData.url,\n      },\n      env,\n      error: (data) => ({\n        error: data,\n        format: 'castAction',\n        status: 'error',\n      }),\n      frame: (data) => ({\n        data: { path: data.path, type: 'frame' },\n        format: 'castAction',\n        status: 'success',\n      }),\n      message: (data) => ({\n        data: { message: data.message, type: 'message' },\n        format: 'castAction',\n        status: 'success',\n      }),\n      req,\n      res: (data) => ({\n        data,\n        format: 'castAction',\n        status: 'success',\n      }),\n      var: context.var,\n      verified,\n    },\n  }\n}\n"],"names":[],"mappings":";;;AAoBM,SAAU,qBAKd,UAA4D;IAE5D,MAAM,EAAE,OAAO,EAAE,GAAG;IACpB,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,WAAW,CAAA;IAErD,IAAI,CAAC,WACH,MAAM,IAAI,MAAM;IAElB,OAAO;QACL,SAAS;YACP,YAAY;gBACV,aAAa;gBACb,QAAQ,UAAU,MAAM;gBACxB,KAAK,UAAU,GAAG;gBAClB,SAAS,UAAU,OAAO;gBAC1B,aAAa,UAAU,WAAW;gBAClC,WAAW,UAAU,SAAS;gBAC9B,KAAK,UAAU,GAAG;;YAEpB;YACA,OAAO,CAAC,OAAS,CAAC;oBAChB,OAAO;oBACP,QAAQ;oBACR,QAAQ;iBACT;YACD,OAAO,CAAC,OAAS,CAAC;oBAChB,MAAM;wBAAE,MAAM,KAAK,IAAI;wBAAE,MAAM;oBAAO;oBACtC,QAAQ;oBACR,QAAQ;iBACT;YACD,SAAS,CAAC,OAAS,CAAC;oBAClB,MAAM;wBAAE,SAAS,KAAK,OAAO;wBAAE,MAAM;oBAAS;oBAC9C,QAAQ;oBACR,QAAQ;iBACT;YACD;YACA,KAAK,CAAC,OAAS,CAAC;oBACd;oBACA,QAAQ;oBACR,QAAQ;iBACT;YACD,KAAK,QAAQ,GAAG;YAChB;;;AAGN"}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 338, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/getIntentState.ts"],"sourcesContent":["import { buttonPrefix } from '../components/Button.js'\nimport type { FrameButtonValue, FrameData } from '../types/frame.js'\n\ntype IntentState = {\n  buttonValue: string | undefined\n  inputText: string | undefined\n  redirect: boolean\n  reset: boolean\n}\n\nexport function getIntentState({\n  buttonValues,\n  frameData,\n}: {\n  buttonValues: readonly FrameButtonValue[] | null\n  frameData: FrameData | undefined\n}) {\n  const { buttonIndex, inputText } = frameData || {}\n  const state: IntentState = {\n    buttonValue: undefined,\n    inputText,\n    redirect: false,\n    reset: false,\n  }\n  if (!buttonValues) return state\n\n  if (buttonIndex) {\n    const buttonIntents = buttonValues\n    const intent = buttonIntents[buttonIndex - 1]\n    if (!intent) return state\n\n    if (intent.startsWith(buttonPrefix.reset)) state.reset = true\n    else if (intent.startsWith(buttonPrefix.redirect)) {\n      state.redirect = true\n      state.buttonValue = intent.slice(3)\n    } else state.buttonValue = intent\n  }\n\n  return state\n}\n"],"names":[],"mappings":";;;;;;AAUM,SAAU,eAAe,EAC7B,YAAY,EACZ,SAAS,EAIV;IACC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG,aAAa,CAAA;IAChD,MAAM,QAAqB;QACzB,aAAa;QACb;QACA,UAAU;QACV,OAAO;;IAET,IAAI,CAAC,cAAc,OAAO;IAE1B,IAAI,aAAa;QACf,MAAM,gBAAgB;QACtB,MAAM,SAAS,aAAa,CAAC,cAAc,EAAE;QAC7C,IAAI,CAAC,QAAQ,OAAO;QAEpB,IAAI,OAAO,UAAU,CAAC,sJAAA,CAAA,eAAY,CAAC,KAAK,GAAG,MAAM,KAAK,GAAG;aACpD,IAAI,OAAO,UAAU,CAAC,sJAAA,CAAA,eAAY,CAAC,QAAQ,GAAG;YACjD,MAAM,QAAQ,GAAG;YACjB,MAAM,WAAW,GAAG,OAAO,KAAK,CAAC;QACnC,OAAO,MAAM,WAAW,GAAG;IAC7B;IAEA,OAAO;AACT"}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/parsePath.ts"],"sourcesContent":["export function parsePath(path_: string): string {\n  let path = path_.split('?')[0]!\n  if (path.endsWith('/')) path = path.slice(0, -1)\n  return path\n}\n"],"names":[],"mappings":";;;AAAM,SAAU,UAAU,KAAa;IACrC,IAAI,OAAO,MAAM,KAAK,CAAC,IAAI,CAAC,EAAG;IAC/B,IAAI,KAAK,QAAQ,CAAC,MAAM,OAAO,KAAK,KAAK,CAAC,GAAG,CAAC;IAC9C,OAAO;AACT"}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/getFrameContext.ts"],"sourcesContent":["import type { Input } from 'hono'\nimport type { Context, FrameContext } from '../types/context.js'\nimport type { Env } from '../types/env.js'\nimport { getIntentState } from './getIntentState.js'\nimport { parsePath } from './parsePath.js'\n\ntype GetFrameContextParameters<\n  env extends Env = Env,\n  path extends string = string,\n  input extends Input = {},\n  //\n  _state = env['State'],\n> = {\n  context: Context<env, path, input>\n  initialState?: _state\n  origin: string\n}\n\ntype GetFrameContextReturnType<\n  env extends Env = Env,\n  path extends string = string,\n  input extends Input = {},\n  //\n  _state = env['State'],\n> = {\n  context: FrameContext<env, path, input>\n  getState: () => _state\n}\n\nexport function getFrameContext<\n  env extends Env,\n  path extends string,\n  input extends Input = {},\n  //\n  _state = env['State'],\n>(\n  parameters: GetFrameContextParameters<env, path, input, _state>,\n): GetFrameContextReturnType<env, path, input, _state> {\n  const { context, origin } = parameters\n  const { env, frameData, initialPath, previousButtonValues, req, verified } =\n    context || {}\n\n  const { buttonValue, inputText, redirect, reset } = getIntentState({\n    buttonValues: previousButtonValues || [],\n    frameData,\n  })\n\n  const status = (() => {\n    if (redirect) return 'redirect'\n    if (reset) return 'initial'\n    return context.status || 'initial'\n  })()\n\n  // If the user has clicked a reset button, we want to set the URL back to the\n  // initial URL.\n  const url = parsePath(reset ? `${origin}${initialPath}` : context.url)\n\n  let previousState = (() => {\n    if (context.status === 'initial') return parameters.initialState\n    return context?.previousState || parameters.initialState\n  })()\n\n  function deriveState(\n    derive?: (state: _state) => void | Promise<void>,\n  ): _state | Promise<_state> {\n    if (!derive) return previousState as _state\n\n    const clone = structuredClone(previousState)\n    if ((derive as any)[Symbol.toStringTag] === 'AsyncFunction')\n      return (derive(clone as _state) as any).then(() => {\n        previousState = clone\n        return previousState\n      })\n\n    derive(clone as _state)\n    previousState = clone\n    return previousState as _state\n  }\n\n  return {\n    context: {\n      buttonIndex: frameData?.buttonIndex,\n      buttonValue,\n      cycle: 'main',\n      deriveState: deriveState as FrameContext['deriveState'],\n      env,\n      error: (data) => ({\n        error: data,\n        format: 'frame',\n        status: 'error',\n      }),\n      frameData,\n      initialPath,\n      inputText,\n      previousButtonValues,\n      previousState: previousState as any,\n      req,\n      res: (data) => ({ data, format: 'frame', status: 'success' }),\n      status,\n      transactionId: frameData?.transactionId,\n      url,\n      var: context.var,\n      verified,\n    },\n    getState: () => previousState as _state,\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AA6BM,SAAU,gBAOd,UAA+D;IAE/D,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG;IAC5B,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,WAAW,EAAE,oBAAoB,EAAE,GAAG,EAAE,QAAQ,EAAE,GACxE,WAAW,CAAA;IAEb,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,yJAAA,CAAA,iBAAc,AAAd,EAAe;QACjE,cAAc,wBAAwB,EAAE;QACxC;;IAGF,MAAM,SAAS,CAAC;QACd,IAAI,UAAU,OAAO;QACrB,IAAI,OAAO,OAAO;QAClB,OAAO,QAAQ,MAAM,IAAI;IAC3B,CAAC;IAED,6EAA6E;IAC7E,eAAe;IACf,MAAM,MAAM,CAAA,GAAA,oJAAA,CAAA,YAAS,AAAT,EAAU,QAAQ,CAAA,EAAG,OAAM,EAAG,YAAW,CAAE,GAAG,QAAQ,GAAG;IAErE,IAAI,gBAAgB,CAAC;QACnB,IAAI,QAAQ,MAAM,KAAK,WAAW,OAAO,WAAW,YAAY;QAChE,OAAO,SAAS,iBAAiB,WAAW,YAAY;IAC1D,CAAC;IAED,SAAS,YACP,MAAgD;QAEhD,IAAI,CAAC,QAAQ,OAAO;QAEpB,MAAM,QAAQ,gBAAgB;QAC9B,IAAK,MAAc,CAAC,OAAO,WAAW,CAAC,KAAK,iBAC1C,OAAQ,OAAO,OAAyB,IAAI,CAAC;YAC3C,gBAAgB;YAChB,OAAO;QACT;QAEF,OAAO;QACP,gBAAgB;QAChB,OAAO;IACT;IAEA,OAAO;QACL,SAAS;YACP,aAAa,WAAW;YACxB;YACA,OAAO;YACP,aAAa;YACb;YACA,OAAO,CAAC,OAAS,CAAC;oBAChB,OAAO;oBACP,QAAQ;oBACR,QAAQ;iBACT;YACD;YACA;YACA;YACA;YACA,eAAe;YACf;YACA,KAAK,CAAC,OAAS,CAAC;oBAAE;oBAAM,QAAQ;oBAAS,QAAQ;gBAAS,CAAE;YAC5D;YACA,eAAe,WAAW;YAC1B;YACA,KAAK,QAAQ,GAAG;YAChB;;QAEF,UAAU,IAAM;;AAEpB"}},
    {"offset": {"line": 453, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/getImageContext.ts"],"sourcesContent":["import type { Context as Context_hono, Input } from 'hono'\nimport type { ImageContext } from '../types/context.js'\nimport type { Env } from '../types/env.js'\n\ntype GetImageContextParameters<\n  env extends Env = Env,\n  path extends string = string,\n  input extends Input = {},\n  //\n  _state = env['State'],\n> = {\n  context: Context_hono<env, path, input>\n}\n\ntype GetImageContextReturnType<\n  env extends Env = Env,\n  path extends string = string,\n  input extends Input = {},\n  //\n  _state = env['State'],\n> = {\n  context: ImageContext<env, path, input>\n}\n\nexport function getImageContext<\n  env extends Env,\n  path extends string,\n  input extends Input = {},\n  //\n  _state = env['State'],\n>(\n  parameters: GetImageContextParameters<env, path, input, _state>,\n): GetImageContextReturnType<env, path, input, _state> {\n  const { context } = parameters\n  const { env, req } = context || {}\n\n  return {\n    context: {\n      env,\n      req,\n      res: (data) => ({ data, format: 'image', status: 'success' }),\n      var: context.var,\n    },\n  }\n}\n"],"names":[],"mappings":";;;AAwBM,SAAU,gBAOd,UAA+D;IAE/D,MAAM,EAAE,OAAO,EAAE,GAAG;IACpB,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,WAAW,CAAA;IAEhC,OAAO;QACL,SAAS;YACP;YACA;YACA,KAAK,CAAC,OAAS,CAAC;oBAAE;oBAAM,QAAQ;oBAAS,QAAQ;gBAAS,CAAE;YAC5D,KAAK,QAAQ,GAAG;;;AAGtB"}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 482, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/getImagePaths.ts"],"sourcesContent":["export function getImagePaths(path: string) {\n  const imagePaths: string[] = []\n  const pathParts = path.split('/')\n\n  // skip the first split result as it's empty\n  for (let i = 1; i < pathParts.length; i++) {\n    if (!pathParts[i]?.startsWith(':') || !pathParts[i]?.endsWith('?')) continue\n    imagePaths.push(`${pathParts.slice(0, i).join('/')}/image`)\n  }\n  imagePaths.push(`${path}/image`)\n  return imagePaths\n}\n"],"names":[],"mappings":";;;AAAM,SAAU,cAAc,IAAY;IACxC,MAAM,aAAuB,EAAE;IAC/B,MAAM,YAAY,KAAK,KAAK,CAAC;IAE7B,4CAA4C;IAC5C,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,MAAM,EAAE,IAAK;QACzC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,WAAW,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,MAAM;QACpE,WAAW,IAAI,CAAC,CAAA,EAAG,UAAU,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,KAAI,MAAA,CAAQ;IAC5D;IACA,WAAW,IAAI,CAAC,CAAA,EAAG,KAAI,MAAA,CAAQ;IAC/B,OAAO;AACT"}},
    {"offset": {"line": 496, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 501, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/getRequestUrl.ts"],"sourcesContent":["import type { Context } from 'hono'\n\nexport function getRequestUrl(req: Context['req']) {\n  const url = new URL(req.url)\n  const forwardedHost = req.header('x-forwarded-host')\n  url.host = forwardedHost ?? url.host\n  url.protocol = req.header('x-forwarded-proto') ?? url.protocol\n  if (forwardedHost !== undefined && !forwardedHost.startsWith('localhost'))\n    url.port = ''\n  return url\n}\n"],"names":[],"mappings":";;;AAEM,SAAU,cAAc,GAAmB;IAC/C,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;IAC3B,MAAM,gBAAgB,IAAI,MAAM,CAAC;IACjC,IAAI,IAAI,GAAG,iBAAiB,IAAI,IAAI;IACpC,IAAI,QAAQ,GAAG,IAAI,MAAM,CAAC,wBAAwB,IAAI,QAAQ;IAC9D,IAAI,kBAAkB,aAAa,CAAC,cAAc,UAAU,CAAC,cAC3D,IAAI,IAAI,GAAG;IACb,OAAO;AACT"}},
    {"offset": {"line": 512, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 517, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/getRouteParameters.ts"],"sourcesContent":["import type { RouteOptions } from '../frog-base.js'\nimport type { Env } from '../types/env.js'\nimport type { MiddlewareHandler } from '../types/routes.js'\n\nexport function getRouteParameters<\n  env extends Env,\n  handler,\n  method extends string,\n>(\n  ...parameters: any[]\n): [\n  string,\n  MiddlewareHandler<env>[],\n  handler,\n  method extends 'castAction'\n    ? RouteOptions<method>\n    : RouteOptions<method> | undefined,\n] {\n  const options: method extends 'castAction'\n    ? RouteOptions<method>\n    : RouteOptions<method> | undefined =\n    typeof parameters[parameters.length - 1] === 'object'\n      ? parameters[parameters.length - 1]\n      : undefined\n\n  const middlewares = [] as MiddlewareHandler<env>[]\n  let handler: handler | undefined\n  for (let i = parameters.length - (options ? 2 : 1); i > 0; i--) {\n    if (!handler) handler = parameters[i]\n    else middlewares.push(parameters[i])\n  }\n\n  return [parameters[0], middlewares, handler!, options] as const\n}\n"],"names":[],"mappings":";;;AAIM,SAAU,mBAKd,GAAG,UAAiB;IASpB,MAAM,UAGJ,OAAO,UAAU,CAAC,WAAW,MAAM,GAAG,EAAE,KAAK,WACzC,UAAU,CAAC,WAAW,MAAM,GAAG,EAAE,GACjC;IAEN,MAAM,cAAc,EAA8B;IAClD,IAAI;IACJ,IAAK,IAAI,IAAI,WAAW,MAAM,GAAG,CAAC,UAAU,IAAI,CAAC,GAAG,IAAI,GAAG,IAAK;QAC9D,IAAI,CAAC,SAAS,UAAU,UAAU,CAAC,EAAE;aAChC,YAAY,IAAI,CAAC,UAAU,CAAC,EAAE;IACrC;IAEA,OAAO;QAAC,UAAU,CAAC,EAAE;QAAE;QAAa;QAAU;KAAiB;AACjE"}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 540, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/getSignatureContext.ts"],"sourcesContent":["import type { HonoRequest, Input } from 'hono'\nimport type { Context, SignatureContext } from '../types/context.js'\nimport type { Env } from '../types/env.js'\nimport type { SignatureResponse } from '../types/signature.js'\nimport { getIntentState } from './getIntentState.js'\n\ntype GetSignatureContextParameters<\n  env extends Env = Env,\n  path extends string = string,\n  input extends Input = {},\n  //\n  _state = env['State'],\n> = {\n  context: Context<env, path, input, _state>\n  req: HonoRequest\n}\n\ntype GetSignatureContextReturnType<\n  env extends Env = Env,\n  path extends string = string,\n  input extends Input = {},\n  //\n  _state = env['State'],\n> = {\n  context: SignatureContext<env, path, input, _state>\n}\n\nexport function getSignatureContext<\n  env extends Env,\n  path extends string,\n  input extends Input,\n  //\n  _state = env['State'],\n>(\n  parameters: GetSignatureContextParameters<env, path, input, _state>,\n): GetSignatureContextReturnType<env, path, input, _state> {\n  const { context } = parameters\n  const {\n    env,\n    frameData,\n    initialPath,\n    previousButtonValues,\n    previousState,\n    req,\n    status,\n    verified,\n    url,\n  } = context || {}\n\n  const { buttonValue, inputText } = getIntentState({\n    buttonValues: previousButtonValues || [],\n    frameData,\n  })\n\n  return {\n    context: {\n      address: frameData?.address!,\n      buttonIndex: frameData?.buttonIndex,\n      buttonValue,\n      env,\n      error: (data) => ({\n        error: data,\n        format: 'signature',\n        status: 'error',\n      }),\n      frameData,\n      initialPath,\n      inputText,\n      previousButtonValues,\n      previousState,\n      req,\n      res(parameters) {\n        const { chainId, method, params } = parameters\n\n        const { domain, types, primaryType, message } = params\n        const response: SignatureResponse = {\n          chainId,\n          method,\n          params: {\n            domain,\n            types,\n            primaryType,\n            // @TODO: fix typing\n            message: message!,\n          },\n        }\n\n        return { data: response, format: 'signature', status: 'success' }\n      },\n      signTypedData(parameters) {\n        const { chainId, ...params } = parameters\n        return this.res({\n          params: params as any,\n          chainId,\n          method: 'eth_signTypedData_v4',\n        })\n      },\n      status,\n      var: context.var,\n      verified,\n      url,\n    },\n  }\n}\n"],"names":[],"mappings":";;;;;;AA2BM,SAAU,oBAOd,UAAmE;IAEnE,MAAM,EAAE,OAAO,EAAE,GAAG;IACpB,MAAM,EACJ,GAAG,EACH,SAAS,EACT,WAAW,EACX,oBAAoB,EACpB,aAAa,EACb,GAAG,EACH,MAAM,EACN,QAAQ,EACR,GAAG,EACJ,GAAG,WAAW,CAAA;IAEf,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,yJAAA,CAAA,iBAAc,AAAd,EAAe;QAChD,cAAc,wBAAwB,EAAE;QACxC;;IAGF,OAAO;QACL,SAAS;YACP,SAAS,WAAW;YACpB,aAAa,WAAW;YACxB;YACA;YACA,OAAO,CAAC,OAAS,CAAC;oBAChB,OAAO;oBACP,QAAQ;oBACR,QAAQ;iBACT;YACD;YACA;YACA;YACA;YACA;YACA;YACA,KAAI,UAAU;gBACZ,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG;gBAEpC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG;gBAChD,MAAM,WAA8B;oBAClC;oBACA;oBACA,QAAQ;wBACN;wBACA;wBACA;wBACA,oBAAoB;wBACpB,SAAS;;;gBAIb,OAAO;oBAAE,MAAM;oBAAU,QAAQ;oBAAa,QAAQ;gBAAS;YACjE;YACA,eAAc,UAAU;gBACtB,MAAM,EAAE,OAAO,EAAE,GAAG,QAAQ,GAAG;gBAC/B,OAAO,IAAI,CAAC,GAAG,CAAC;oBACd,QAAQ;oBACR;oBACA,QAAQ;;YAEZ;YACA;YACA,KAAK,QAAQ,GAAG;YAChB;YACA;;;AAGN"}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 610, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/getTransactionContext.ts"],"sourcesContent":["import type { HonoRequest, Input } from 'hono'\nimport {\n  type Abi,\n  AbiFunctionNotFoundError,\n  type EncodeFunctionDataParameters,\n  type GetAbiItemParameters,\n  encodeFunctionData,\n  getAbiItem,\n} from 'viem'\nimport type { Context, TransactionContext } from '../types/context.js'\nimport type { Env } from '../types/env.js'\nimport type { TransactionResponse } from '../types/transaction.js'\nimport { getIntentState } from './getIntentState.js'\n\ntype GetTransactionContextParameters<\n  env extends Env = Env,\n  path extends string = string,\n  input extends Input = {},\n  //\n  _state = env['State'],\n> = {\n  context: Context<env, path, input, _state>\n  req: HonoRequest\n}\n\ntype GetTransactionContextReturnType<\n  env extends Env = Env,\n  path extends string = string,\n  input extends Input = {},\n  //\n  _state = env['State'],\n> = {\n  context: TransactionContext<env, path, input, _state>\n}\n\nexport function getTransactionContext<\n  env extends Env,\n  path extends string,\n  input extends Input,\n  //\n  _state = env['State'],\n>(\n  parameters: GetTransactionContextParameters<env, path, input, _state>,\n): GetTransactionContextReturnType<env, path, input, _state> {\n  const { context } = parameters\n  const {\n    env,\n    frameData,\n    initialPath,\n    previousButtonValues,\n    previousState,\n    req,\n    status,\n    verified,\n    url,\n  } = context || {}\n\n  const { buttonValue, inputText } = getIntentState({\n    buttonValues: previousButtonValues || [],\n    frameData,\n  })\n\n  return {\n    context: {\n      address: frameData?.address!,\n      buttonIndex: frameData?.buttonIndex,\n      buttonValue,\n      contract(parameters) {\n        const {\n          abi,\n          chainId,\n          functionName,\n          gas,\n          to,\n          args,\n          attribution,\n          value,\n        } = parameters\n\n        const abiItem = getAbiItem({\n          abi: abi,\n          name: functionName,\n          args,\n        } as GetAbiItemParameters)\n        if (!abiItem) throw new AbiFunctionNotFoundError(functionName)\n\n        const abiErrorItems = (abi as Abi).filter(\n          (item) => item.type === 'error',\n        )\n\n        return this.send({\n          abi: [abiItem, ...abiErrorItems],\n          attribution,\n          chainId,\n          data: encodeFunctionData({\n            abi,\n            args,\n            functionName,\n          } as EncodeFunctionDataParameters),\n          gas,\n          to,\n          value,\n        })\n      },\n      env,\n      error: (data) => ({\n        error: data,\n        format: 'transaction',\n        status: 'error',\n      }),\n      frameData,\n      initialPath,\n      inputText,\n      previousButtonValues,\n      previousState,\n      req,\n      res(parameters) {\n        const { attribution, chainId, method, params } = parameters\n        const { abi, data, gas, to, value } = params\n        const response: TransactionResponse = {\n          attribution,\n          chainId,\n          method,\n          params: {\n            abi,\n            data,\n            to,\n          },\n        }\n        if (gas) response.params.gas = gas.toString()\n        if (value) response.params.value = value.toString()\n        return { data: response, format: 'transaction', status: 'success' }\n      },\n      send(parameters) {\n        return this.res({\n          attribution: parameters.attribution ?? false,\n          chainId: parameters.chainId,\n          method: 'eth_sendTransaction',\n          params: parameters,\n        })\n      },\n      status,\n      var: context.var,\n      verified,\n      url,\n    },\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAmCM,SAAU,sBAOd,UAAqE;IAErE,MAAM,EAAE,OAAO,EAAE,GAAG;IACpB,MAAM,EACJ,GAAG,EACH,SAAS,EACT,WAAW,EACX,oBAAoB,EACpB,aAAa,EACb,GAAG,EACH,MAAM,EACN,QAAQ,EACR,GAAG,EACJ,GAAG,WAAW,CAAA;IAEf,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,yJAAA,CAAA,iBAAc,AAAd,EAAe;QAChD,cAAc,wBAAwB,EAAE;QACxC;;IAGF,OAAO;QACL,SAAS;YACP,SAAS,WAAW;YACpB,aAAa,WAAW;YACxB;YACA,UAAS,UAAU;gBACjB,MAAM,EACJ,GAAG,EACH,OAAO,EACP,YAAY,EACZ,GAAG,EACH,EAAE,EACF,IAAI,EACJ,WAAW,EACX,KAAK,EACN,GAAG;gBAEJ,MAAM,UAAU,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW;oBACzB,KAAK;oBACL,MAAM;oBACN;;gBAEF,IAAI,CAAC,SAAS,MAAM,IAAI,+IAAA,CAAA,2BAAwB,CAAC;gBAEjD,MAAM,gBAAiB,IAAY,MAAM,CACvC,CAAC,OAAS,KAAK,IAAI,KAAK;gBAG1B,OAAO,IAAI,CAAC,IAAI,CAAC;oBACf,KAAK;wBAAC;2BAAY;qBAAc;oBAChC;oBACA;oBACA,MAAM,CAAA,GAAA,oKAAA,CAAA,qBAAkB,AAAlB,EAAmB;wBACvB;wBACA;wBACA;;oBAEF;oBACA;oBACA;;YAEJ;YACA;YACA,OAAO,CAAC,OAAS,CAAC;oBAChB,OAAO;oBACP,QAAQ;oBACR,QAAQ;iBACT;YACD;YACA;YACA;YACA;YACA;YACA;YACA,KAAI,UAAU;gBACZ,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG;gBACjD,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,GAAG;gBACtC,MAAM,WAAgC;oBACpC;oBACA;oBACA;oBACA,QAAQ;wBACN;wBACA;wBACA;;;gBAGJ,IAAI,KAAK,SAAS,MAAM,CAAC,GAAG,GAAG,IAAI,QAAQ;gBAC3C,IAAI,OAAO,SAAS,MAAM,CAAC,KAAK,GAAG,MAAM,QAAQ;gBACjD,OAAO;oBAAE,MAAM;oBAAU,QAAQ;oBAAe,QAAQ;gBAAS;YACnE;YACA,MAAK,UAAU;gBACb,OAAO,IAAI,CAAC,GAAG,CAAC;oBACd,aAAa,WAAW,WAAW,IAAI;oBACvC,SAAS,WAAW,OAAO;oBAC3B,QAAQ;oBACR,QAAQ;;YAEZ;YACA;YACA,KAAK,QAAQ,GAAG;YAChB;YACA;;;AAGN"}},
    {"offset": {"line": 706, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 711, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/jws.ts"],"sourcesContent":["import { CompactSign, compactVerify } from 'jose'\n\nconst decoder = new TextDecoder()\nconst encoder = new TextEncoder()\n\nexport async function verify(signature: string, secret: string) {\n  const { payload } = await compactVerify(signature, encoder.encode(secret))\n  return decoder.decode(payload)\n}\n\nexport async function sign(message: string, secret: string) {\n  return new CompactSign(encoder.encode(message))\n    .setProtectedHeader({ alg: 'HS256' })\n    .sign(encoder.encode(secret))\n}\n"],"names":[],"mappings":";;;;;;;;AAEA,MAAM,UAAU,IAAI;AACpB,MAAM,UAAU,IAAI;AAEb,eAAe,OAAO,SAAiB,EAAE,MAAc;IAC5D,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yKAAA,CAAA,gBAAa,AAAb,EAAc,WAAW,QAAQ,MAAM,CAAC;IAClE,OAAO,QAAQ,MAAM,CAAC;AACxB;AAEO,eAAe,KAAK,OAAe,EAAE,MAAc;IACxD,OAAO,IAAI,uKAAA,CAAA,cAAW,CAAC,QAAQ,MAAM,CAAC,UACnC,kBAAkB,CAAC;QAAE,KAAK;IAAO,GACjC,IAAI,CAAC,QAAQ,MAAM,CAAC;AACzB"}},
    {"offset": {"line": 730, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 735, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/parseBrowserLocation.ts"],"sourcesContent":["import type { Context } from 'hono'\n\nexport function parseBrowserLocation(\n  c: Context,\n  location_: string | undefined,\n  { basePath, path }: { basePath: string; path: string },\n) {\n  let location = location_ || ''\n  if (location?.includes(':path') && !path.includes(':path'))\n    location = location.replace(':path', path.replace(/(^\\/)|(\\/$)/, ''))\n  else if (location?.includes(':'))\n    for (const [key, value] of Object.entries(c.req.param() as any))\n      location = location.replace(`:${key}`, value as string)\n  if (location.includes(':basePath'))\n    location = location.replace(\n      ':basePath',\n      basePath.replace(/(^\\/)|(\\/$)/, ''),\n    )\n  location = location.replace(/^\\/\\//, '/')\n  return location\n}\n"],"names":[],"mappings":";;;AAEM,SAAU,qBACd,CAAU,EACV,SAA6B,EAC7B,EAAE,QAAQ,EAAE,IAAI,EAAsC;IAEtD,IAAI,WAAW,aAAa;IAC5B,IAAI,UAAU,SAAS,YAAY,CAAC,KAAK,QAAQ,CAAC,UAChD,WAAW,SAAS,OAAO,CAAC,SAAS,KAAK,OAAO,CAAC,eAAe;SAC9D,IAAI,UAAU,SAAS,MAC1B,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,OAAO,CAAC,EAAE,GAAG,CAAC,KAAK,IACnD,WAAW,SAAS,OAAO,CAAC,CAAA,CAAA,EAAI,IAAG,CAAE,EAAE;IAC3C,IAAI,SAAS,QAAQ,CAAC,cACpB,WAAW,SAAS,OAAO,CACzB,aACA,SAAS,OAAO,CAAC,eAAe;IAEpC,WAAW,SAAS,OAAO,CAAC,SAAS;IACrC,OAAO;AACT"}},
    {"offset": {"line": 746, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 751, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/parseFonts.ts"],"sourcesContent":["import { loadGoogleFont } from 'hono-og'\nimport type { Font } from '../types/frame.js'\n\nexport async function parseFonts(fonts: Font[] | undefined) {\n  if (!fonts) return undefined\n  return await Promise.all(\n    fonts.map(async (font) => {\n      if (font.source === 'google')\n        return {\n          ...font,\n          data: await loadGoogleFont({\n            family: font.name,\n            weight: font.weight,\n            style: font.style,\n          }),\n        }\n      return font\n    }),\n  )\n}\n"],"names":[],"mappings":";;;;;;AAGO,eAAe,WAAW,KAAyB;IACxD,IAAI,CAAC,OAAO,OAAO;IACnB,OAAO,MAAM,QAAQ,GAAG,CACtB,MAAM,GAAG,CAAC,OAAO;QACf,IAAI,KAAK,MAAM,KAAK,UAClB,OAAO;YACL,GAAG,IAAI;YACP,MAAM,MAAM,CAAA,GAAA,8JAAA,CAAA,iBAAc,AAAd,EAAe;gBACzB,QAAQ,KAAK,IAAI;gBACjB,QAAQ,KAAK,MAAM;gBACnB,OAAO,KAAK,KAAK;;;QAGvB,OAAO;IACT;AAEJ"}},
    {"offset": {"line": 771, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 776, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/parseHonoPath.ts"],"sourcesContent":["export function parseHonoPath(path: string) {\n  if (path.endsWith('/')) return path.slice(0, -1)\n  return path\n}\n"],"names":[],"mappings":";;;AAAM,SAAU,cAAc,IAAY;IACxC,IAAI,KAAK,QAAQ,CAAC,MAAM,OAAO,KAAK,KAAK,CAAC,GAAG,CAAC;IAC9C,OAAO;AACT"}},
    {"offset": {"line": 783, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 788, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/parseImage.ts"],"sourcesContent":["import type { JSXNode } from 'hono/jsx'\n\nimport type { Frog } from '../frog.js'\nimport type { Child, Direction } from '../ui/types.js'\nimport { parsePath } from './parsePath.js'\n\nexport async function parseImage(\n  node_: Child,\n  options: {\n    assetsUrl: string\n    ui: Frog['ui'] & { direction?: Direction | undefined }\n  },\n): Promise<Child> {\n  if (!node_) return node_\n\n  const { assetsUrl, ui } = options\n\n  if (typeof node_ !== 'object') return node_\n  if (Array.isArray(node_))\n    return (await Promise.all(\n      node_.map(async (e) => await parseImage(e, { assetsUrl, ui })),\n    )) as Child\n\n  if (node_ instanceof Promise) return await node_\n\n  // Handle Fragment `<></>`\n  if (node_.tag === '')\n    return (await Promise.all(\n      node_.children.map(async (e) => await parseImage(e, { assetsUrl, ui })),\n    )) as Child\n\n  let node = node_\n  const direction =\n    (node.tag as unknown as { direction: Direction } | undefined)?.direction ??\n    options.ui.direction ??\n    (node.props.flexDirection\n      ? node.props.flexDirection === 'column'\n        ? 'horizontal'\n        : 'vertical'\n      : undefined)\n\n  if (typeof node.tag === 'function') {\n    node = await node.tag({\n      ...node.props,\n      __context: {\n        direction,\n        vars: { ...node.props?.__context?.vars, ...ui?.vars },\n      },\n      children: node.children,\n    })\n    if (!node) return node\n    node.props.__context = undefined\n    node = (await parseImage(node, {\n      assetsUrl,\n      ui: { ...ui, direction },\n    })) as JSXNode\n  }\n  if (node.children)\n    node.children = await Promise.all(\n      node.children.map(\n        async (e) =>\n          await parseImage(e, { assetsUrl, ui: { ...ui, direction } }),\n      ),\n    )\n  if (node.tag === 'img') {\n    const src = node.props.src\n    if (src.startsWith('/')) node.props.src = `${assetsUrl + parsePath(src)}`\n  }\n\n  return node\n}\n"],"names":[],"mappings":";;;;;;AAMO,eAAe,WACpB,KAAY,EACZ,OAGC;IAED,IAAI,CAAC,OAAO,OAAO;IAEnB,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE,GAAG;IAE1B,IAAI,OAAO,UAAU,UAAU,OAAO;IACtC,IAAI,MAAM,OAAO,CAAC,QAChB,OAAQ,MAAM,QAAQ,GAAG,CACvB,MAAM,GAAG,CAAC,OAAO,IAAM,MAAM,WAAW,GAAG;YAAE;YAAW;QAAE;IAG9D,IAAI,iBAAiB,SAAS,OAAO,MAAM;IAE3C,0BAA0B;IAC1B,IAAI,MAAM,GAAG,KAAK,IAChB,OAAQ,MAAM,QAAQ,GAAG,CACvB,MAAM,QAAQ,CAAC,GAAG,CAAC,OAAO,IAAM,MAAM,WAAW,GAAG;YAAE;YAAW;QAAE;IAGvE,IAAI,OAAO;IACX,MAAM,YACH,KAAK,GAAuD,EAAE,aAC/D,QAAQ,EAAE,CAAC,SAAS,IACpB,CAAC,KAAK,KAAK,CAAC,aAAa,GACrB,KAAK,KAAK,CAAC,aAAa,KAAK,WAC3B,eACA,aACF,SAAS;IAEf,IAAI,OAAO,KAAK,GAAG,KAAK,YAAY;QAClC,OAAO,MAAM,KAAK,GAAG,CAAC;YACpB,GAAG,KAAK,KAAK;YACb,WAAW;gBACT;gBACA,MAAM;oBAAE,GAAG,KAAK,KAAK,EAAE,WAAW,IAAI;oBAAE,GAAG,IAAI,IAAI;gBAAA;;YAErD,UAAU,KAAK,QAAQ;;QAEzB,IAAI,CAAC,MAAM,OAAO;QAClB,KAAK,KAAK,CAAC,SAAS,GAAG;QACvB,OAAQ,MAAM,WAAW,MAAM;YAC7B;YACA,IAAI;gBAAE,GAAG,EAAE;gBAAE;YAAS;;IAE1B;IACA,IAAI,KAAK,QAAQ,EACf,KAAK,QAAQ,GAAG,MAAM,QAAQ,GAAG,CAC/B,KAAK,QAAQ,CAAC,GAAG,CACf,OAAO,IACL,MAAM,WAAW,GAAG;YAAE;YAAW,IAAI;gBAAE,GAAG,EAAE;gBAAE;YAAS;QAAE;IAGjE,IAAI,KAAK,GAAG,KAAK,OAAO;QACtB,MAAM,MAAM,KAAK,KAAK,CAAC,GAAG;QAC1B,IAAI,IAAI,UAAU,CAAC,MAAM,KAAK,KAAK,CAAC,GAAG,GAAG,CAAA,EAAG,YAAY,CAAA,GAAA,oJAAA,CAAA,YAAS,AAAT,EAAU,KAAI,CAAE;IAC3E;IAEA,OAAO;AACT"}},
    {"offset": {"line": 845, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 850, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/parseIntents.ts"],"sourcesContent":["import type { JSXNode } from 'hono/jsx'\n\nimport { buttonPrefix } from '../components/Button.js'\nimport type { FrameIntent } from '../types/frame.js'\nimport { parsePath } from './parsePath.js'\n\ntype Counter = { button: number }\n\ntype ParseIntentsOptions = {\n  baseUrl: string\n  initialBaseUrl: string | undefined\n  search?: string\n}\n\nexport function parseIntents(\n  intents_: FrameIntent | FrameIntent[] | undefined,\n  options: ParseIntentsOptions,\n  counter: Counter = { button: 1 },\n): JSXNode[] {\n  if (!intents_) return []\n  const nodes = intents_ as unknown as JSXNode | JSXNode[]\n\n  const intents = (() => {\n    if (Array.isArray(nodes))\n      return nodes.map((e) => parseIntent(e as JSXNode, options, counter))\n    if (typeof nodes.children[0] === 'object')\n      return Object.assign(nodes, {\n        children: nodes.children.map((e) =>\n          parseIntent(e as JSXNode, options, counter),\n        ),\n      })\n    return parseIntent(nodes, options, counter)\n  })()\n\n  return (Array.isArray(intents) ? intents : [intents]).flat()\n}\n\nfunction parseIntent(\n  node_: JSXNode,\n  options: ParseIntentsOptions,\n  counter: Counter,\n): JSXNode | JSXNode[] {\n  // Check if the node is a \"falsy\" node (ie. `null`, `undefined`, `false`, etc).\n  const node = (\n    !node_ ? { children: [], props: {}, tag() {} } : node_\n  ) as JSXNode\n\n  const props = (() => {\n    if ((node.tag as any).__type === 'button') {\n      const value = (node.tag as any)({})?.[0]?.props?.['data-value']\n\n      const buttonProps: Record<string, unknown> = {\n        ...node.props,\n        action: node.props.action\n          ? node.props.action.startsWith('http')\n            ? node.props.action\n            : parsePath(\n                node.props.action.startsWith('~')\n                  ? options.initialBaseUrl + node.props.action.slice(1)\n                  : options.baseUrl + node.props.action,\n              ) +\n              (options.search && !value?.startsWith(buttonPrefix.addCastAction)\n                ? `?${options.search}`\n                : '')\n          : undefined,\n        children: node.children,\n        index: counter.button++,\n      }\n\n      if (\n        (value?.startsWith(buttonPrefix.transaction) ||\n          value?.startsWith(buttonPrefix.signature)) &&\n        node.props.target\n      ) {\n        const search = (node.props.target ?? '').split('?')[1]\n        buttonProps.target = node.props.target?.startsWith('http')\n          ? node.props.target\n          : parsePath(options.baseUrl + node.props.target) +\n            (search ? `?${search}` : '')\n      }\n\n      return buttonProps\n    }\n    if ((node.tag as any).__type === 'text-input')\n      return { ...node.props, children: node.children }\n    return {}\n  })()\n\n  const intent = (\n    typeof node.tag === 'function' ? node.tag(props) : node\n  ) as JSXNode\n\n  if (intent?.tag === '' && Object.keys(intent.props).length === 0)\n    throw new InvalidIntentComponentError()\n\n  if (typeof intent?.tag === 'function' && typeof node.tag === 'function') {\n    if (intent.children.length > 1) throw new InvalidIntentComponentError()\n    return parseIntent(node.tag(node.props), options, counter)\n  }\n  return intent\n}\n\nclass InvalidIntentComponentError extends Error {\n  constructor() {\n    super(\n      [\n        'Intent components must return a single intent element.',\n        '',\n        'Example:',\n        '',\n        '```',\n        \"import { Button } from 'frog'\",\n        '',\n        'function CustomIntent() {',\n        '  return <Button>Foo</Button>',\n        '}',\n        '```',\n      ].join('\\n'),\n    )\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 927, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 932, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/deserializeJson.ts"],"sourcesContent":["export function deserializeJson<returnType>(data = '{}'): returnType {\n  if (data === 'undefined') return {} as returnType\n  return JSON.parse(decodeURIComponent(data))\n}\n"],"names":[],"mappings":";;;AAAM,SAAU,gBAA4B,OAAO,IAAI;IACrD,IAAI,SAAS,aAAa,OAAO,CAAA;IACjC,OAAO,KAAK,KAAK,CAAC,mBAAmB;AACvC"}},
    {"offset": {"line": 939, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 944, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/protobufs/generated/username_proof_pb.ts"],"sourcesContent":["// @generated by protoc-gen-es v1.7.2 with parameter \"target=ts\"\n// @generated from file username_proof.proto (syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto3, protoInt64 } from \"@bufbuild/protobuf\";\n\n/**\n * @generated from enum UserNameType\n */\nexport enum UserNameType {\n  /**\n   * @generated from enum value: USERNAME_TYPE_NONE = 0;\n   */\n  USERNAME_TYPE_NONE = 0,\n\n  /**\n   * @generated from enum value: USERNAME_TYPE_FNAME = 1;\n   */\n  USERNAME_TYPE_FNAME = 1,\n\n  /**\n   * @generated from enum value: USERNAME_TYPE_ENS_L1 = 2;\n   */\n  USERNAME_TYPE_ENS_L1 = 2,\n}\n// Retrieve enum metadata with: proto3.getEnumType(UserNameType)\nproto3.util.setEnumType(UserNameType, \"UserNameType\", [\n  { no: 0, name: \"USERNAME_TYPE_NONE\" },\n  { no: 1, name: \"USERNAME_TYPE_FNAME\" },\n  { no: 2, name: \"USERNAME_TYPE_ENS_L1\" },\n]);\n\n/**\n * @generated from message UserNameProof\n */\nexport class UserNameProof extends Message<UserNameProof> {\n  /**\n   * @generated from field: uint64 timestamp = 1;\n   */\n  timestamp = protoInt64.zero;\n\n  /**\n   * @generated from field: bytes name = 2;\n   */\n  name = new Uint8Array(0);\n\n  /**\n   * @generated from field: bytes owner = 3;\n   */\n  owner = new Uint8Array(0);\n\n  /**\n   * @generated from field: bytes signature = 4;\n   */\n  signature = new Uint8Array(0);\n\n  /**\n   * @generated from field: uint64 fid = 5;\n   */\n  fid = protoInt64.zero;\n\n  /**\n   * @generated from field: UserNameType type = 6;\n   */\n  type = UserNameType.USERNAME_TYPE_NONE;\n\n  constructor(data?: PartialMessage<UserNameProof>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"UserNameProof\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"timestamp\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 2, name: \"name\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 3, name: \"owner\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 4, name: \"signature\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 5, name: \"fid\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 6, name: \"type\", kind: \"enum\", T: proto3.getEnumType(UserNameType) },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserNameProof {\n    return new UserNameProof().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserNameProof {\n    return new UserNameProof().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserNameProof {\n    return new UserNameProof().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UserNameProof | PlainMessage<UserNameProof> | undefined, b: UserNameProof | PlainMessage<UserNameProof> | undefined): boolean {\n    return proto3.util.equals(UserNameProof, a, b);\n  }\n}\n\n"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,4DAA4D;AAC5D,kBAAA,GACA,cAAc;;;;;;;;;;AAQd,IAAY;AAAZ,CAAA,SAAY,YAAY;IACtB;;QAGA,YAAA,CAAA,YAAA,CAAA,qBAAA,GAAA,EAAA,GAAA;IAEA;;QAGA,YAAA,CAAA,YAAA,CAAA,sBAAA,GAAA,EAAA,GAAA;IAEA;;QAGA,YAAA,CAAA,YAAA,CAAA,uBAAA,GAAA,EAAA,GAAA;AACF,CAAC,EAfW,gBAAY,CAAZ,eAAY,CAAA,CAAA;AAgBxB,gEAAgE;AAChE,iKAAA,CAAA,SAAM,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,gBAAgB;IACpD;QAAE,IAAI;QAAG,MAAM;IAAoB;IACnC;QAAE,IAAI;QAAG,MAAM;IAAqB;IACpC;QAAE,IAAI;QAAG,MAAM;IAAsB;CACtC;AAKK,MAAO,sBAAsB,kKAAA,CAAA,UAAsB;IA+BvD,YAAY,IAAoC,CAAA;QAC9C,KAAK;QA/BP;;YAGA,OAAA,cAAA,CAAA,IAAA,EAAA,aAAA;;;;mBAAY,yKAAA,CAAA,aAAU,CAAC,IAAI;;QAE3B;;YAGA,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO,IAAI,WAAW;;QAEtB;;YAGA,OAAA,cAAA,CAAA,IAAA,EAAA,SAAA;;;;mBAAQ,IAAI,WAAW;;QAEvB;;YAGA,OAAA,cAAA,CAAA,IAAA,EAAA,aAAA;;;;mBAAY,IAAI,WAAW;;QAE3B;;YAGA,OAAA,cAAA,CAAA,IAAA,EAAA,OAAA;;;;mBAAM,yKAAA,CAAA,aAAU,CAAC,IAAI;;QAErB;;YAGA,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO,aAAa,kBAAkB;;QAIpC,iKAAA,CAAA,SAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI;IACpC;IAaA,OAAO,WAAW,KAAiB,EAAE,OAAoC,EAAA;QACvE,OAAO,IAAI,gBAAgB,UAAU,CAAC,OAAO;IAC/C;IAEA,OAAO,SAAS,SAAoB,EAAE,OAAkC,EAAA;QACtE,OAAO,IAAI,gBAAgB,QAAQ,CAAC,WAAW;IACjD;IAEA,OAAO,eAAe,UAAkB,EAAE,OAAkC,EAAA;QAC1E,OAAO,IAAI,gBAAgB,cAAc,CAAC,YAAY;IACxD;IAEA,OAAO,OAAO,CAA0D,EAAE,CAA0D,EAAA;QAClI,OAAO,iKAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG;IAC9C;;AAzBgB,OAAA,cAAA,CAAA,eAAA,WAAA;;;;WAAyB,iKAAA,CAAA,SAAM;;AAC/B,OAAA,cAAA,CAAA,eAAA,YAAA;;;;WAAW;;AACX,OAAA,cAAA,CAAA,eAAA,UAAA;;;;WAAoB,iKAAA,CAAA,SAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAM;YACjE;gBAAE,IAAI;gBAAG,MAAM;gBAAa,MAAM;gBAAU,GAAG,EAAE,qBAAA;YAAuB;YACxE;gBAAE,IAAI;gBAAG,MAAM;gBAAQ,MAAM;gBAAU,GAAG,GAAG,oBAAA;YAAsB;YACnE;gBAAE,IAAI;gBAAG,MAAM;gBAAS,MAAM;gBAAU,GAAG,GAAG,oBAAA;YAAsB;YACpE;gBAAE,IAAI;gBAAG,MAAM;gBAAa,MAAM;gBAAU,GAAG,GAAG,oBAAA;YAAsB;YACxE;gBAAE,IAAI;gBAAG,MAAM;gBAAO,MAAM;gBAAU,GAAG,EAAE,qBAAA;YAAuB;YAClE;gBAAE,IAAI;gBAAG,MAAM;gBAAQ,MAAM;gBAAQ,GAAG,iKAAA,CAAA,SAAM,CAAC,WAAW,CAAC;YAAa;SACzE"}},
    {"offset": {"line": 1104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1109, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/protobufs/generated/message_pb.ts"],"sourcesContent":["// @generated by protoc-gen-es v1.7.2 with parameter \"target=ts\"\n// @generated from file message.proto (syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message as Message$1, proto3, protoInt64 } from \"@bufbuild/protobuf\";\nimport { UserNameProof } from \"./username_proof_pb.js\";\n\n/**\n * * Type of hashing scheme used to produce a digest of MessageData \n *\n * @generated from enum HashScheme\n */\nexport enum HashScheme {\n  /**\n   * @generated from enum value: HASH_SCHEME_NONE = 0;\n   */\n  NONE = 0,\n\n  /**\n   * Default scheme for hashing MessageData\n   *\n   * @generated from enum value: HASH_SCHEME_BLAKE3 = 1;\n   */\n  BLAKE3 = 1,\n}\n// Retrieve enum metadata with: proto3.getEnumType(HashScheme)\nproto3.util.setEnumType(HashScheme, \"HashScheme\", [\n  { no: 0, name: \"HASH_SCHEME_NONE\" },\n  { no: 1, name: \"HASH_SCHEME_BLAKE3\" },\n]);\n\n/**\n * * Type of signature scheme used to sign the Message hash  \n *\n * @generated from enum SignatureScheme\n */\nexport enum SignatureScheme {\n  /**\n   * @generated from enum value: SIGNATURE_SCHEME_NONE = 0;\n   */\n  NONE = 0,\n\n  /**\n   * Ed25519 signature (default)\n   *\n   * @generated from enum value: SIGNATURE_SCHEME_ED25519 = 1;\n   */\n  ED25519 = 1,\n\n  /**\n   * ECDSA signature using EIP-712 scheme\n   *\n   * @generated from enum value: SIGNATURE_SCHEME_EIP712 = 2;\n   */\n  EIP712 = 2,\n}\n// Retrieve enum metadata with: proto3.getEnumType(SignatureScheme)\nproto3.util.setEnumType(SignatureScheme, \"SignatureScheme\", [\n  { no: 0, name: \"SIGNATURE_SCHEME_NONE\" },\n  { no: 1, name: \"SIGNATURE_SCHEME_ED25519\" },\n  { no: 2, name: \"SIGNATURE_SCHEME_EIP712\" },\n]);\n\n/**\n * * Type of the MessageBody \n *\n * @generated from enum MessageType\n */\nexport enum MessageType {\n  /**\n   * @generated from enum value: MESSAGE_TYPE_NONE = 0;\n   */\n  NONE = 0,\n\n  /**\n   * Add a new Cast\n   *\n   * @generated from enum value: MESSAGE_TYPE_CAST_ADD = 1;\n   */\n  CAST_ADD = 1,\n\n  /**\n   * Remove an existing Cast\n   *\n   * @generated from enum value: MESSAGE_TYPE_CAST_REMOVE = 2;\n   */\n  CAST_REMOVE = 2,\n\n  /**\n   * Add a Reaction to a Cast\n   *\n   * @generated from enum value: MESSAGE_TYPE_REACTION_ADD = 3;\n   */\n  REACTION_ADD = 3,\n\n  /**\n   * Remove a Reaction from a Cast\n   *\n   * @generated from enum value: MESSAGE_TYPE_REACTION_REMOVE = 4;\n   */\n  REACTION_REMOVE = 4,\n\n  /**\n   * Add a new Link\n   *\n   * @generated from enum value: MESSAGE_TYPE_LINK_ADD = 5;\n   */\n  LINK_ADD = 5,\n\n  /**\n   * Remove an existing Link\n   *\n   * @generated from enum value: MESSAGE_TYPE_LINK_REMOVE = 6;\n   */\n  LINK_REMOVE = 6,\n\n  /**\n   * Add a Verification of an Ethereum Address\n   *\n   * @generated from enum value: MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS = 7;\n   */\n  VERIFICATION_ADD_ETH_ADDRESS = 7,\n\n  /**\n   * Remove a Verification\n   *\n   * @generated from enum value: MESSAGE_TYPE_VERIFICATION_REMOVE = 8;\n   */\n  VERIFICATION_REMOVE = 8,\n\n  /**\n   *  Deprecated\n   *  MESSAGE_TYPE_SIGNER_ADD = 9; // Add a new Ed25519 key pair that signs messages for a user\n   *  MESSAGE_TYPE_SIGNER_REMOVE = 10; // Remove an Ed25519 key pair that signs messages for a user\n   *\n   * Add metadata about a user\n   *\n   * @generated from enum value: MESSAGE_TYPE_USER_DATA_ADD = 11;\n   */\n  USER_DATA_ADD = 11,\n\n  /**\n   * Add or replace a username proof\n   *\n   * @generated from enum value: MESSAGE_TYPE_USERNAME_PROOF = 12;\n   */\n  USERNAME_PROOF = 12,\n\n  /**\n   * A Farcaster Frame action\n   *\n   * @generated from enum value: MESSAGE_TYPE_FRAME_ACTION = 13;\n   */\n  FRAME_ACTION = 13,\n}\n// Retrieve enum metadata with: proto3.getEnumType(MessageType)\nproto3.util.setEnumType(MessageType, \"MessageType\", [\n  { no: 0, name: \"MESSAGE_TYPE_NONE\" },\n  { no: 1, name: \"MESSAGE_TYPE_CAST_ADD\" },\n  { no: 2, name: \"MESSAGE_TYPE_CAST_REMOVE\" },\n  { no: 3, name: \"MESSAGE_TYPE_REACTION_ADD\" },\n  { no: 4, name: \"MESSAGE_TYPE_REACTION_REMOVE\" },\n  { no: 5, name: \"MESSAGE_TYPE_LINK_ADD\" },\n  { no: 6, name: \"MESSAGE_TYPE_LINK_REMOVE\" },\n  { no: 7, name: \"MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS\" },\n  { no: 8, name: \"MESSAGE_TYPE_VERIFICATION_REMOVE\" },\n  { no: 11, name: \"MESSAGE_TYPE_USER_DATA_ADD\" },\n  { no: 12, name: \"MESSAGE_TYPE_USERNAME_PROOF\" },\n  { no: 13, name: \"MESSAGE_TYPE_FRAME_ACTION\" },\n]);\n\n/**\n * * Farcaster network the message is intended for \n *\n * @generated from enum FarcasterNetwork\n */\nexport enum FarcasterNetwork {\n  /**\n   * @generated from enum value: FARCASTER_NETWORK_NONE = 0;\n   */\n  NONE = 0,\n\n  /**\n   * Public primary network\n   *\n   * @generated from enum value: FARCASTER_NETWORK_MAINNET = 1;\n   */\n  MAINNET = 1,\n\n  /**\n   * Public test network\n   *\n   * @generated from enum value: FARCASTER_NETWORK_TESTNET = 2;\n   */\n  TESTNET = 2,\n\n  /**\n   * Private test network\n   *\n   * @generated from enum value: FARCASTER_NETWORK_DEVNET = 3;\n   */\n  DEVNET = 3,\n}\n// Retrieve enum metadata with: proto3.getEnumType(FarcasterNetwork)\nproto3.util.setEnumType(FarcasterNetwork, \"FarcasterNetwork\", [\n  { no: 0, name: \"FARCASTER_NETWORK_NONE\" },\n  { no: 1, name: \"FARCASTER_NETWORK_MAINNET\" },\n  { no: 2, name: \"FARCASTER_NETWORK_TESTNET\" },\n  { no: 3, name: \"FARCASTER_NETWORK_DEVNET\" },\n]);\n\n/**\n * * Type of UserData \n *\n * @generated from enum UserDataType\n */\nexport enum UserDataType {\n  /**\n   * @generated from enum value: USER_DATA_TYPE_NONE = 0;\n   */\n  NONE = 0,\n\n  /**\n   * Profile Picture for the user\n   *\n   * @generated from enum value: USER_DATA_TYPE_PFP = 1;\n   */\n  PFP = 1,\n\n  /**\n   * Display Name for the user\n   *\n   * @generated from enum value: USER_DATA_TYPE_DISPLAY = 2;\n   */\n  DISPLAY = 2,\n\n  /**\n   * Bio for the user\n   *\n   * @generated from enum value: USER_DATA_TYPE_BIO = 3;\n   */\n  BIO = 3,\n\n  /**\n   * URL of the user\n   *\n   * @generated from enum value: USER_DATA_TYPE_URL = 5;\n   */\n  URL = 5,\n\n  /**\n   * Preferred Name for the user\n   *\n   * @generated from enum value: USER_DATA_TYPE_USERNAME = 6;\n   */\n  USERNAME = 6,\n}\n// Retrieve enum metadata with: proto3.getEnumType(UserDataType)\nproto3.util.setEnumType(UserDataType, \"UserDataType\", [\n  { no: 0, name: \"USER_DATA_TYPE_NONE\" },\n  { no: 1, name: \"USER_DATA_TYPE_PFP\" },\n  { no: 2, name: \"USER_DATA_TYPE_DISPLAY\" },\n  { no: 3, name: \"USER_DATA_TYPE_BIO\" },\n  { no: 5, name: \"USER_DATA_TYPE_URL\" },\n  { no: 6, name: \"USER_DATA_TYPE_USERNAME\" },\n]);\n\n/**\n * * Type of Reaction \n *\n * @generated from enum ReactionType\n */\nexport enum ReactionType {\n  /**\n   * @generated from enum value: REACTION_TYPE_NONE = 0;\n   */\n  NONE = 0,\n\n  /**\n   * Like the target cast\n   *\n   * @generated from enum value: REACTION_TYPE_LIKE = 1;\n   */\n  LIKE = 1,\n\n  /**\n   * Share target cast to the user's audience\n   *\n   * @generated from enum value: REACTION_TYPE_RECAST = 2;\n   */\n  RECAST = 2,\n}\n// Retrieve enum metadata with: proto3.getEnumType(ReactionType)\nproto3.util.setEnumType(ReactionType, \"ReactionType\", [\n  { no: 0, name: \"REACTION_TYPE_NONE\" },\n  { no: 1, name: \"REACTION_TYPE_LIKE\" },\n  { no: 2, name: \"REACTION_TYPE_RECAST\" },\n]);\n\n/**\n * * Type of Protocol to disambiguate verification addresses \n *\n * @generated from enum Protocol\n */\nexport enum Protocol {\n  /**\n   * @generated from enum value: PROTOCOL_ETHEREUM = 0;\n   */\n  ETHEREUM = 0,\n\n  /**\n   * @generated from enum value: PROTOCOL_SOLANA = 1;\n   */\n  SOLANA = 1,\n}\n// Retrieve enum metadata with: proto3.getEnumType(Protocol)\nproto3.util.setEnumType(Protocol, \"Protocol\", [\n  { no: 0, name: \"PROTOCOL_ETHEREUM\" },\n  { no: 1, name: \"PROTOCOL_SOLANA\" },\n]);\n\n/**\n * *\n * A Message is a delta operation on the Farcaster network. The message protobuf is an envelope\n * that wraps a MessageData object and contains a hash and signature which can verify its authenticity.\n *\n * @generated from message Message\n */\nexport class Message extends Message$1<Message> {\n  /**\n   * Contents of the message\n   *\n   * @generated from field: MessageData data = 1;\n   */\n  data?: MessageData;\n\n  /**\n   * Hash digest of data\n   *\n   * @generated from field: bytes hash = 2;\n   */\n  hash = new Uint8Array(0);\n\n  /**\n   * Hash scheme that produced the hash digest\n   *\n   * @generated from field: HashScheme hash_scheme = 3;\n   */\n  hashScheme = HashScheme.NONE;\n\n  /**\n   * Signature of the hash digest\n   *\n   * @generated from field: bytes signature = 4;\n   */\n  signature = new Uint8Array(0);\n\n  /**\n   * Signature scheme that produced the signature\n   *\n   * @generated from field: SignatureScheme signature_scheme = 5;\n   */\n  signatureScheme = SignatureScheme.NONE;\n\n  /**\n   * Public key or address of the key pair that produced the signature\n   *\n   * @generated from field: bytes signer = 6;\n   */\n  signer = new Uint8Array(0);\n\n  /**\n   * MessageData serialized to bytes if using protobuf serialization other than ts-proto\n   *\n   * @generated from field: optional bytes data_bytes = 7;\n   */\n  dataBytes?: Uint8Array;\n\n  constructor(data?: PartialMessage<Message>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"Message\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"data\", kind: \"message\", T: MessageData },\n    { no: 2, name: \"hash\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 3, name: \"hash_scheme\", kind: \"enum\", T: proto3.getEnumType(HashScheme) },\n    { no: 4, name: \"signature\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 5, name: \"signature_scheme\", kind: \"enum\", T: proto3.getEnumType(SignatureScheme) },\n    { no: 6, name: \"signer\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 7, name: \"data_bytes\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */, opt: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {\n    return new Message().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {\n    return new Message().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {\n    return new Message().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {\n    return proto3.util.equals(Message, a, b);\n  }\n}\n\n/**\n * *\n * A MessageData object contains properties common to all messages and wraps a body object which\n * contains properties specific to the MessageType.\n *\n * @generated from message MessageData\n */\nexport class MessageData extends Message$1<MessageData> {\n  /**\n   * Type of message contained in the body\n   *\n   * @generated from field: MessageType type = 1;\n   */\n  type = MessageType.NONE;\n\n  /**\n   * Farcaster ID of the user producing the message\n   *\n   * @generated from field: uint64 fid = 2;\n   */\n  fid = protoInt64.zero;\n\n  /**\n   * Farcaster epoch timestamp in seconds\n   *\n   * @generated from field: uint32 timestamp = 3;\n   */\n  timestamp = 0;\n\n  /**\n   * Farcaster network the message is intended for\n   *\n   * @generated from field: FarcasterNetwork network = 4;\n   */\n  network = FarcasterNetwork.NONE;\n\n  /**\n   * @generated from oneof MessageData.body\n   */\n  body: {\n    /**\n     * @generated from field: CastAddBody cast_add_body = 5;\n     */\n    value: CastAddBody;\n    case: \"castAddBody\";\n  } | {\n    /**\n     * @generated from field: CastRemoveBody cast_remove_body = 6;\n     */\n    value: CastRemoveBody;\n    case: \"castRemoveBody\";\n  } | {\n    /**\n     * @generated from field: ReactionBody reaction_body = 7;\n     */\n    value: ReactionBody;\n    case: \"reactionBody\";\n  } | {\n    /**\n     * @generated from field: VerificationAddAddressBody verification_add_address_body = 9;\n     */\n    value: VerificationAddAddressBody;\n    case: \"verificationAddAddressBody\";\n  } | {\n    /**\n     * @generated from field: VerificationRemoveBody verification_remove_body = 10;\n     */\n    value: VerificationRemoveBody;\n    case: \"verificationRemoveBody\";\n  } | {\n    /**\n     * SignerAddBody signer_add_body = 11; // Deprecated\n     *\n     * @generated from field: UserDataBody user_data_body = 12;\n     */\n    value: UserDataBody;\n    case: \"userDataBody\";\n  } | {\n    /**\n     * SignerRemoveBody signer_remove_body = 13; // Deprecated\n     *\n     * @generated from field: LinkBody link_body = 14;\n     */\n    value: LinkBody;\n    case: \"linkBody\";\n  } | {\n    /**\n     * @generated from field: UserNameProof username_proof_body = 15;\n     */\n    value: UserNameProof;\n    case: \"usernameProofBody\";\n  } | {\n    /**\n     * @generated from field: FrameActionBody frame_action_body = 16;\n     */\n    value: FrameActionBody;\n    case: \"frameActionBody\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<MessageData>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"MessageData\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"type\", kind: \"enum\", T: proto3.getEnumType(MessageType) },\n    { no: 2, name: \"fid\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 3, name: \"timestamp\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"network\", kind: \"enum\", T: proto3.getEnumType(FarcasterNetwork) },\n    { no: 5, name: \"cast_add_body\", kind: \"message\", T: CastAddBody, oneof: \"body\" },\n    { no: 6, name: \"cast_remove_body\", kind: \"message\", T: CastRemoveBody, oneof: \"body\" },\n    { no: 7, name: \"reaction_body\", kind: \"message\", T: ReactionBody, oneof: \"body\" },\n    { no: 9, name: \"verification_add_address_body\", kind: \"message\", T: VerificationAddAddressBody, oneof: \"body\" },\n    { no: 10, name: \"verification_remove_body\", kind: \"message\", T: VerificationRemoveBody, oneof: \"body\" },\n    { no: 12, name: \"user_data_body\", kind: \"message\", T: UserDataBody, oneof: \"body\" },\n    { no: 14, name: \"link_body\", kind: \"message\", T: LinkBody, oneof: \"body\" },\n    { no: 15, name: \"username_proof_body\", kind: \"message\", T: UserNameProof, oneof: \"body\" },\n    { no: 16, name: \"frame_action_body\", kind: \"message\", T: FrameActionBody, oneof: \"body\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageData {\n    return new MessageData().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageData {\n    return new MessageData().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageData {\n    return new MessageData().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: MessageData | PlainMessage<MessageData> | undefined, b: MessageData | PlainMessage<MessageData> | undefined): boolean {\n    return proto3.util.equals(MessageData, a, b);\n  }\n}\n\n/**\n * * Adds metadata about a user \n *\n * @generated from message UserDataBody\n */\nexport class UserDataBody extends Message$1<UserDataBody> {\n  /**\n   * Type of metadata\n   *\n   * @generated from field: UserDataType type = 1;\n   */\n  type = UserDataType.NONE;\n\n  /**\n   * Value of the metadata\n   *\n   * @generated from field: string value = 2;\n   */\n  value = \"\";\n\n  constructor(data?: PartialMessage<UserDataBody>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"UserDataBody\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"type\", kind: \"enum\", T: proto3.getEnumType(UserDataType) },\n    { no: 2, name: \"value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserDataBody {\n    return new UserDataBody().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserDataBody {\n    return new UserDataBody().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserDataBody {\n    return new UserDataBody().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UserDataBody | PlainMessage<UserDataBody> | undefined, b: UserDataBody | PlainMessage<UserDataBody> | undefined): boolean {\n    return proto3.util.equals(UserDataBody, a, b);\n  }\n}\n\n/**\n * @generated from message Embed\n */\nexport class Embed extends Message$1<Embed> {\n  /**\n   * @generated from oneof Embed.embed\n   */\n  embed: {\n    /**\n     * @generated from field: string url = 1;\n     */\n    value: string;\n    case: \"url\";\n  } | {\n    /**\n     * @generated from field: CastId cast_id = 2;\n     */\n    value: CastId;\n    case: \"castId\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<Embed>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"Embed\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, oneof: \"embed\" },\n    { no: 2, name: \"cast_id\", kind: \"message\", T: CastId, oneof: \"embed\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Embed {\n    return new Embed().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Embed {\n    return new Embed().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Embed {\n    return new Embed().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Embed | PlainMessage<Embed> | undefined, b: Embed | PlainMessage<Embed> | undefined): boolean {\n    return proto3.util.equals(Embed, a, b);\n  }\n}\n\n/**\n * * Adds a new Cast \n *\n * @generated from message CastAddBody\n */\nexport class CastAddBody extends Message$1<CastAddBody> {\n  /**\n   * URLs to be embedded in the cast\n   *\n   * @generated from field: repeated string embeds_deprecated = 1;\n   */\n  embedsDeprecated: string[] = [];\n\n  /**\n   * Fids mentioned in the cast\n   *\n   * @generated from field: repeated uint64 mentions = 2;\n   */\n  mentions: bigint[] = [];\n\n  /**\n   * @generated from oneof CastAddBody.parent\n   */\n  parent: {\n    /**\n     * Parent cast of the cast\n     *\n     * @generated from field: CastId parent_cast_id = 3;\n     */\n    value: CastId;\n    case: \"parentCastId\";\n  } | {\n    /**\n     * Parent URL\n     *\n     * @generated from field: string parent_url = 7;\n     */\n    value: string;\n    case: \"parentUrl\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  /**\n   * Text of the cast\n   *\n   * @generated from field: string text = 4;\n   */\n  text = \"\";\n\n  /**\n   * Positions of the mentions in the text\n   *\n   * @generated from field: repeated uint32 mentions_positions = 5;\n   */\n  mentionsPositions: number[] = [];\n\n  /**\n   * URLs or cast ids to be embedded in the cast\n   *\n   * @generated from field: repeated Embed embeds = 6;\n   */\n  embeds: Embed[] = [];\n\n  constructor(data?: PartialMessage<CastAddBody>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"CastAddBody\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"embeds_deprecated\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 2, name: \"mentions\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */, repeated: true },\n    { no: 3, name: \"parent_cast_id\", kind: \"message\", T: CastId, oneof: \"parent\" },\n    { no: 7, name: \"parent_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, oneof: \"parent\" },\n    { no: 4, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"mentions_positions\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, repeated: true },\n    { no: 6, name: \"embeds\", kind: \"message\", T: Embed, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CastAddBody {\n    return new CastAddBody().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CastAddBody {\n    return new CastAddBody().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CastAddBody {\n    return new CastAddBody().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CastAddBody | PlainMessage<CastAddBody> | undefined, b: CastAddBody | PlainMessage<CastAddBody> | undefined): boolean {\n    return proto3.util.equals(CastAddBody, a, b);\n  }\n}\n\n/**\n * * Removes an existing Cast \n *\n * @generated from message CastRemoveBody\n */\nexport class CastRemoveBody extends Message$1<CastRemoveBody> {\n  /**\n   * Hash of the cast to remove\n   *\n   * @generated from field: bytes target_hash = 1;\n   */\n  targetHash = new Uint8Array(0);\n\n  constructor(data?: PartialMessage<CastRemoveBody>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"CastRemoveBody\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"target_hash\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CastRemoveBody {\n    return new CastRemoveBody().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CastRemoveBody {\n    return new CastRemoveBody().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CastRemoveBody {\n    return new CastRemoveBody().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CastRemoveBody | PlainMessage<CastRemoveBody> | undefined, b: CastRemoveBody | PlainMessage<CastRemoveBody> | undefined): boolean {\n    return proto3.util.equals(CastRemoveBody, a, b);\n  }\n}\n\n/**\n * * Identifier used to look up a Cast \n *\n * @generated from message CastId\n */\nexport class CastId extends Message$1<CastId> {\n  /**\n   * Fid of the user who created the cast\n   *\n   * @generated from field: uint64 fid = 1;\n   */\n  fid = protoInt64.zero;\n\n  /**\n   * Hash of the cast\n   *\n   * @generated from field: bytes hash = 2;\n   */\n  hash = new Uint8Array(0);\n\n  constructor(data?: PartialMessage<CastId>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"CastId\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"fid\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 2, name: \"hash\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CastId {\n    return new CastId().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CastId {\n    return new CastId().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CastId {\n    return new CastId().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CastId | PlainMessage<CastId> | undefined, b: CastId | PlainMessage<CastId> | undefined): boolean {\n    return proto3.util.equals(CastId, a, b);\n  }\n}\n\n/**\n * * Adds or removes a Reaction from a Cast \n *\n * @generated from message ReactionBody\n */\nexport class ReactionBody extends Message$1<ReactionBody> {\n  /**\n   * Type of reaction\n   *\n   * @generated from field: ReactionType type = 1;\n   */\n  type = ReactionType.NONE;\n\n  /**\n   * @generated from oneof ReactionBody.target\n   */\n  target: {\n    /**\n     * CastId of the Cast to react to\n     *\n     * @generated from field: CastId target_cast_id = 2;\n     */\n    value: CastId;\n    case: \"targetCastId\";\n  } | {\n    /**\n     * URL to react to\n     *\n     * @generated from field: string target_url = 3;\n     */\n    value: string;\n    case: \"targetUrl\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<ReactionBody>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"ReactionBody\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"type\", kind: \"enum\", T: proto3.getEnumType(ReactionType) },\n    { no: 2, name: \"target_cast_id\", kind: \"message\", T: CastId, oneof: \"target\" },\n    { no: 3, name: \"target_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, oneof: \"target\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReactionBody {\n    return new ReactionBody().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReactionBody {\n    return new ReactionBody().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReactionBody {\n    return new ReactionBody().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReactionBody | PlainMessage<ReactionBody> | undefined, b: ReactionBody | PlainMessage<ReactionBody> | undefined): boolean {\n    return proto3.util.equals(ReactionBody, a, b);\n  }\n}\n\n/**\n * * Adds a Verification of ownership of an Address based on Protocol \n *\n * @generated from message VerificationAddAddressBody\n */\nexport class VerificationAddAddressBody extends Message$1<VerificationAddAddressBody> {\n  /**\n   * Address being verified for a given Protocol\n   *\n   * @generated from field: bytes address = 1;\n   */\n  address = new Uint8Array(0);\n\n  /**\n   * Signature produced by the user's address for a given Protocol\n   *\n   * @generated from field: bytes claim_signature = 2;\n   */\n  claimSignature = new Uint8Array(0);\n\n  /**\n   * Hash of the latest Ethereum block when the signature was produced\n   *\n   * @generated from field: bytes block_hash = 3;\n   */\n  blockHash = new Uint8Array(0);\n\n  /**\n   * Type of verification. 0 = EOA, 1 = contract\n   *\n   * @generated from field: uint32 verification_type = 4;\n   */\n  verificationType = 0;\n\n  /**\n   * 0 for EOA verifications, 1 or 10 for contract verifications\n   *\n   * @generated from field: uint32 chain_id = 5;\n   */\n  chainId = 0;\n\n  /**\n   * Protocol of the Verification\n   *\n   * @generated from field: Protocol protocol = 7;\n   */\n  protocol = Protocol.ETHEREUM;\n\n  constructor(data?: PartialMessage<VerificationAddAddressBody>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"VerificationAddAddressBody\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"address\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 2, name: \"claim_signature\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 3, name: \"block_hash\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 4, name: \"verification_type\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"chain_id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"protocol\", kind: \"enum\", T: proto3.getEnumType(Protocol) },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerificationAddAddressBody {\n    return new VerificationAddAddressBody().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerificationAddAddressBody {\n    return new VerificationAddAddressBody().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerificationAddAddressBody {\n    return new VerificationAddAddressBody().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: VerificationAddAddressBody | PlainMessage<VerificationAddAddressBody> | undefined, b: VerificationAddAddressBody | PlainMessage<VerificationAddAddressBody> | undefined): boolean {\n    return proto3.util.equals(VerificationAddAddressBody, a, b);\n  }\n}\n\n/**\n * * Removes a Verification of a given protocol \n *\n * @generated from message VerificationRemoveBody\n */\nexport class VerificationRemoveBody extends Message$1<VerificationRemoveBody> {\n  /**\n   * Address of the Verification to remove\n   *\n   * @generated from field: bytes address = 1;\n   */\n  address = new Uint8Array(0);\n\n  /**\n   * Protocol of the Verification to remove\n   *\n   * @generated from field: Protocol protocol = 2;\n   */\n  protocol = Protocol.ETHEREUM;\n\n  constructor(data?: PartialMessage<VerificationRemoveBody>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"VerificationRemoveBody\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"address\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 2, name: \"protocol\", kind: \"enum\", T: proto3.getEnumType(Protocol) },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerificationRemoveBody {\n    return new VerificationRemoveBody().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerificationRemoveBody {\n    return new VerificationRemoveBody().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerificationRemoveBody {\n    return new VerificationRemoveBody().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: VerificationRemoveBody | PlainMessage<VerificationRemoveBody> | undefined, b: VerificationRemoveBody | PlainMessage<VerificationRemoveBody> | undefined): boolean {\n    return proto3.util.equals(VerificationRemoveBody, a, b);\n  }\n}\n\n/**\n * * Adds or removes a Link \n *\n * @generated from message LinkBody\n */\nexport class LinkBody extends Message$1<LinkBody> {\n  /**\n   * Type of link, <= 8 characters\n   *\n   * @generated from field: string type = 1;\n   */\n  type = \"\";\n\n  /**\n   * User-defined timestamp that preserves original timestamp when message.data.timestamp needs to be updated for compaction\n   *\n   * @generated from field: optional uint32 displayTimestamp = 2;\n   */\n  displayTimestamp?: number;\n\n  /**\n   * @generated from oneof LinkBody.target\n   */\n  target: {\n    /**\n     * The fid the link relates to\n     *\n     * @generated from field: uint64 target_fid = 3;\n     */\n    value: bigint;\n    case: \"targetFid\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<LinkBody>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"LinkBody\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"type\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"displayTimestamp\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */, opt: true },\n    { no: 3, name: \"target_fid\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */, oneof: \"target\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LinkBody {\n    return new LinkBody().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LinkBody {\n    return new LinkBody().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LinkBody {\n    return new LinkBody().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: LinkBody | PlainMessage<LinkBody> | undefined, b: LinkBody | PlainMessage<LinkBody> | undefined): boolean {\n    return proto3.util.equals(LinkBody, a, b);\n  }\n}\n\n/**\n * * A Farcaster Frame action \n *\n * @generated from message FrameActionBody\n */\nexport class FrameActionBody extends Message$1<FrameActionBody> {\n  /**\n   * URL of the Frame triggering the action\n   *\n   * @generated from field: bytes url = 1;\n   */\n  url = new Uint8Array(0);\n\n  /**\n   * The index of the button pressed (1-4)\n   *\n   * @generated from field: uint32 button_index = 2;\n   */\n  buttonIndex = 0;\n\n  /**\n   * The cast which contained the frame url\n   *\n   * @generated from field: CastId cast_id = 3;\n   */\n  castId?: CastId;\n\n  /**\n   * Text input from the user, if present\n   *\n   * @generated from field: bytes input_text = 4;\n   */\n  inputText = new Uint8Array(0);\n\n  /**\n   * Serialized frame state value\n   *\n   * @generated from field: bytes state = 5;\n   */\n  state = new Uint8Array(0);\n\n  /**\n   * Chain-specific transaction ID for tx actions\n   *\n   * @generated from field: bytes transaction_id = 6;\n   */\n  transactionId = new Uint8Array(0);\n\n  /**\n   * Chain-specific address for tx actions\n   *\n   * @generated from field: bytes address = 7;\n   */\n  address = new Uint8Array(0);\n\n  constructor(data?: PartialMessage<FrameActionBody>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"FrameActionBody\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"url\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 2, name: \"button_index\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"cast_id\", kind: \"message\", T: CastId },\n    { no: 4, name: \"input_text\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 5, name: \"state\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 6, name: \"transaction_id\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 7, name: \"address\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrameActionBody {\n    return new FrameActionBody().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrameActionBody {\n    return new FrameActionBody().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrameActionBody {\n    return new FrameActionBody().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: FrameActionBody | PlainMessage<FrameActionBody> | undefined, b: FrameActionBody | PlainMessage<FrameActionBody> | undefined): boolean {\n    return proto3.util.equals(FrameActionBody, a, b);\n  }\n}\n\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2694, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2699, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/verifyFrame.ts"],"sourcesContent":["import { bytesToHex, bytesToString, hexToBytes } from 'viem'\nimport {\n  type FrameActionBody,\n  Message,\n} from '../protobufs/generated/message_pb.js'\nimport type { FrameData, TrustedData } from '../types/frame.js'\nimport type { Hub } from '../types/hub.js'\n\nexport type VerifyFrameParameters = {\n  frameUrl: string\n  hub: Hub\n  trustedData: TrustedData\n  url: string\n}\n\nexport type VerifyFrameReturnType = {\n  frameData: FrameData\n}\n\nexport async function verifyFrame({\n  frameUrl,\n  hub,\n  trustedData,\n  url,\n}: VerifyFrameParameters): Promise<VerifyFrameReturnType> {\n  const body = hexToBytes(`0x${trustedData.messageBytes}`)\n\n  const response = hub.verifyFrame\n    ? await hub.verifyFrame({ trustedData })\n    : await fetch(`${hub.apiUrl}/v1/validateMessage`, {\n        ...hub.fetchOptions,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/octet-stream',\n          ...hub.fetchOptions?.headers,\n        },\n        body,\n      }).then((res) => res.json())\n\n  if (!response.valid)\n    throw new Error(\n      `message is invalid. ${response.details || response.message}`,\n    )\n\n  if (new URL(url).origin !== new URL(frameUrl).origin)\n    throw new Error(`Invalid frame url: ${frameUrl}. Expected: ${url}.`)\n\n  const message = Message.fromBinary(body)\n  const frameData = messageToFrameData(message)\n  return { frameData }\n}\n\n////////////////////////////////////////////////////////////////////\n// Utilties\n\nexport function messageToFrameData(message: Message): FrameData {\n  const frameActionBody = message.data?.body.value as FrameActionBody\n  const frameData: FrameData = {\n    address: frameActionBody.address\n      ? bytesToHex(frameActionBody.address)\n      : undefined,\n    castId: {\n      fid: Number(frameActionBody.castId?.fid),\n      hash: bytesToHex(frameActionBody.castId?.hash!),\n    },\n    fid: Number(message.data?.fid!),\n    messageHash: bytesToHex(message.hash),\n    network: message.data?.network!,\n    timestamp: message.data?.timestamp!,\n    url: bytesToString(frameActionBody.url),\n    buttonIndex: frameActionBody.buttonIndex as any,\n    inputText: bytesToString(frameActionBody.inputText),\n    state: bytesToString(frameActionBody.state),\n    transactionId: frameActionBody.transactionId\n      ? bytesToHex(frameActionBody.transactionId)\n      : undefined,\n  }\n\n  return frameData\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAmBO,eAAe,YAAY,EAChC,QAAQ,EACR,GAAG,EACH,WAAW,EACX,GAAG,EACmB;IACtB,MAAM,OAAO,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAV,EAAW,CAAA,EAAA,EAAK,YAAY,YAAY,CAAA,CAAE;IAEvD,MAAM,WAAW,IAAI,WAAW,GAC5B,MAAM,IAAI,WAAW,CAAC;QAAE;IAAW,KACnC,MAAM,MAAM,CAAA,EAAG,IAAI,MAAM,CAAA,mBAAA,CAAqB,EAAE;QAC9C,GAAG,IAAI,YAAY;QACnB,QAAQ;QACR,SAAS;YACP,gBAAgB;YAChB,GAAG,IAAI,YAAY,EAAE,OAAO;;QAE9B;OACC,IAAI,CAAC,CAAC,MAAQ,IAAI,IAAI;IAE7B,IAAI,CAAC,SAAS,KAAK,EACjB,MAAM,IAAI,MACR,CAAA,oBAAA,EAAuB,SAAS,OAAO,IAAI,SAAS,OAAO,CAAA,CAAE;IAGjE,IAAI,IAAI,IAAI,KAAK,MAAM,KAAK,IAAI,IAAI,UAAU,MAAM,EAClD,MAAM,IAAI,MAAM,CAAA,mBAAA,EAAsB,SAAQ,YAAA,EAAe,IAAG,CAAA,CAAG;IAErE,MAAM,UAAU,sKAAA,CAAA,UAAO,CAAC,UAAU,CAAC;IACnC,MAAM,YAAY,mBAAmB;IACrC,OAAO;QAAE;IAAS;AACpB;AAKM,SAAU,mBAAmB,OAAgB;IACjD,MAAM,kBAAkB,QAAQ,IAAI,EAAE,KAAK;IAC3C,MAAM,YAAuB;QAC3B,SAAS,gBAAgB,OAAO,GAC5B,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW,gBAAgB,OAAO,IAClC;QACJ,QAAQ;YACN,KAAK,OAAO,gBAAgB,MAAM,EAAE;YACpC,MAAM,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW,gBAAgB,MAAM,EAAE;;QAE3C,KAAK,OAAO,QAAQ,IAAI,EAAE;QAC1B,aAAa,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW,QAAQ,IAAI;QACpC,SAAS,QAAQ,IAAI,EAAE;QACvB,WAAW,QAAQ,IAAI,EAAE;QACzB,KAAK,CAAA,GAAA,gKAAA,CAAA,gBAAa,AAAb,EAAc,gBAAgB,GAAG;QACtC,aAAa,gBAAgB,WAAkB;QAC/C,WAAW,CAAA,GAAA,gKAAA,CAAA,gBAAa,AAAb,EAAc,gBAAgB,SAAS;QAClD,OAAO,CAAA,GAAA,gKAAA,CAAA,gBAAa,AAAb,EAAc,gBAAgB,KAAK;QAC1C,eAAe,gBAAgB,aAAa,GACxC,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAV,EAAW,gBAAgB,aAAa,IACxC;;IAGN,OAAO;AACT"}},
    {"offset": {"line": 2751, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2756, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/requestBodyToContext.ts"],"sourcesContent":["import type { Context as Context_hono, Input } from 'hono'\nimport type { FrogConstructorParameters } from '../frog-base.js'\nimport type { Context } from '../types/context.js'\nimport type { Env } from '../types/env.js'\nimport type { Hub } from '../types/hub.js'\nimport { deserializeJson } from './deserializeJson.js'\nimport { fromQuery } from './fromQuery.js'\nimport { getRequestUrl } from './getRequestUrl.js'\nimport * as jws from './jws.js'\nimport { verifyFrame } from './verifyFrame.js'\n\ntype RequestBodyToContextOptions = {\n  hub?: Hub | undefined\n  secret?: FrogConstructorParameters['secret']\n  verify?: FrogConstructorParameters['verify']\n}\n\ntype RequestBodyToContextReturnType<\n  env extends Env = Env,\n  path extends string = string,\n  input extends Input = {},\n  //\n  _state = env['State'],\n> = Context<env, path, input, _state>\n\nexport async function requestBodyToContext<\n  env extends Env,\n  path extends string,\n  input extends Input,\n  //\n  _state = env['State'],\n>(\n  c: Context_hono<env, path>,\n  { hub, secret, verify = true }: RequestBodyToContextOptions,\n): Promise<RequestBodyToContextReturnType<env, path, input, _state>> {\n  const { trustedData, untrustedData } =\n    (await c.req.json().catch(() => {})) || {}\n  const { initialPath, previousState, previousButtonValues } =\n    await (async () => {\n      if (untrustedData?.state) {\n        const state = deserializeJson(untrustedData.state) as any\n        if (secret && state.previousState)\n          state.previousState = JSON.parse(\n            await jws.verify(state.previousState, secret),\n          )\n        return state\n      }\n      if (c.req.query()) return fromQuery(c.req.query())\n      return {} as any\n    })()\n\n  const url = getRequestUrl(c.req)\n\n  const trustedFrameData = await (async () => {\n    if (verify === false) return null\n    if (!trustedData) return null\n    if (!hub) return null\n    try {\n      const { frameData } = await verifyFrame({\n        hub,\n        frameUrl: untrustedData.url,\n        trustedData,\n        url: url.href,\n      })\n      return { ...frameData, state: frameData.state || untrustedData.state }\n    } catch (err) {\n      if (verify === 'silent') return null\n      throw err\n    }\n  })()\n\n  return {\n    env: c.env,\n    initialPath: initialPath ? initialPath : url.pathname,\n    previousState,\n    previousButtonValues,\n    frameData: trustedFrameData || untrustedData,\n    req: c.req,\n    status: c.req.method === 'POST' ? 'response' : 'initial',\n    url: url.href,\n    var: c.var,\n    verified: Boolean(trustedFrameData),\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAyBO,eAAe,qBAOpB,CAA0B,EAC1B,EAAE,GAAG,EAAE,MAAM,EAAE,SAAS,IAAI,EAA+B;IAE3D,MAAM,EAAE,WAAW,EAAE,aAAa,EAAE,GAClC,AAAC,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,KAAO,MAAO,CAAA;IAC1C,MAAM,EAAE,WAAW,EAAE,aAAa,EAAE,oBAAoB,EAAE,GACxD,MAAM,CAAC;QACL,IAAI,eAAe,OAAO;YACxB,MAAM,QAAQ,CAAA,GAAA,0JAAA,CAAA,kBAAe,AAAf,EAAgB,cAAc,KAAK;YACjD,IAAI,UAAU,MAAM,aAAa,EAC/B,MAAM,aAAa,GAAG,KAAK,KAAK,CAC9B,MAAM,+IAAI,MAAM,CAAC,MAAM,aAAa,EAAE;YAE1C,OAAO;QACT;QACA,IAAI,EAAE,GAAG,CAAC,KAAK,IAAI,OAAO,CAAA,GAAA,oJAAA,CAAA,YAAS,AAAT,EAAU,EAAE,GAAG,CAAC,KAAK;QAC/C,OAAO,CAAA;IACT,CAAC;IAEH,MAAM,MAAM,CAAA,GAAA,wJAAA,CAAA,gBAAa,AAAb,EAAc,EAAE,GAAG;IAE/B,MAAM,mBAAmB,MAAM,CAAC;QAC9B,IAAI,WAAW,OAAO,OAAO;QAC7B,IAAI,CAAC,aAAa,OAAO;QACzB,IAAI,CAAC,KAAK,OAAO;QACjB,IAAI;YACF,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAA,GAAA,sJAAA,CAAA,cAAW,AAAX,EAAY;gBACtC;gBACA,UAAU,cAAc,GAAG;gBAC3B;gBACA,KAAK,IAAI,IAAI;;YAEf,OAAO;gBAAE,GAAG,SAAS;gBAAE,OAAO,UAAU,KAAK,IAAI,cAAc,KAAK;YAAA;QACtE,EAAE,OAAO,KAAK;YACZ,IAAI,WAAW,UAAU,OAAO;YAChC,MAAM;QACR;IACF,CAAC;IAED,OAAO;QACL,KAAK,EAAE,GAAG;QACV,aAAa,cAAc,cAAc,IAAI,QAAQ;QACrD;QACA;QACA,WAAW,oBAAoB;QAC/B,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,GAAG,CAAC,MAAM,KAAK,SAAS,aAAa;QAC/C,KAAK,IAAI,IAAI;QACb,KAAK,EAAE,GAAG;QACV,UAAU,QAAQ;;AAEtB"}},
    {"offset": {"line": 2815, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2820, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/serializeJson.ts"],"sourcesContent":["export function serializeJson(data: unknown = {}) {\n  return encodeURIComponent(JSON.stringify(data))\n}\n"],"names":[],"mappings":";;;AAAM,SAAU,cAAc,OAAgB,CAAA,CAAE;IAC9C,OAAO,mBAAmB,KAAK,SAAS,CAAC;AAC3C"}},
    {"offset": {"line": 2826, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2831, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/toSearchParams.ts"],"sourcesContent":["// If this changes, update in dev/components/Preview.tsx as well\n\nexport function toSearchParams(object: object) {\n  const params = new URLSearchParams()\n  for (const [key, value] of Object.entries(object)) {\n    const encoded = (() => {\n      if (typeof value === 'string') return encodeURIComponent(value)\n      if (typeof value === 'number') return value.toString()\n      if (typeof value === 'boolean') return value.toString()\n      if (typeof value === 'object' && value !== null) {\n        return encodeURIComponent(\n          Array.isArray(value)\n            ? `#A_${value.join(',')}`\n            : `#O_${JSON.stringify(value)}`,\n        )\n      }\n      return undefined\n    })()\n    if (encoded) params.set(key, encoded)\n  }\n  return params\n}\n"],"names":[],"mappings":"AAAA,gEAAgE;;;;AAE1D,SAAU,eAAe,MAAc;IAC3C,MAAM,SAAS,IAAI;IACnB,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,OAAO,CAAC,QAAS;QACjD,MAAM,UAAU,CAAC;YACf,IAAI,OAAO,UAAU,UAAU,OAAO,mBAAmB;YACzD,IAAI,OAAO,UAAU,UAAU,OAAO,MAAM,QAAQ;YACpD,IAAI,OAAO,UAAU,WAAW,OAAO,MAAM,QAAQ;YACrD,IAAI,OAAO,UAAU,YAAY,UAAU,MAAM;gBAC/C,OAAO,mBACL,MAAM,OAAO,CAAC,SACV,CAAA,GAAA,EAAM,MAAM,IAAI,CAAC,KAAI,CAAE,GACvB,CAAA,GAAA,EAAM,KAAK,SAAS,CAAC,OAAM,CAAE;YAErC;YACA,OAAO;QACT,CAAC;QACD,IAAI,SAAS,OAAO,GAAG,CAAC,KAAK;IAC/B;IACA,OAAO;AACT"}},
    {"offset": {"line": 2851, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2856, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/version.ts"],"sourcesContent":["export const version = '0.14.1'\n"],"names":[],"mappings":";;;AAAO,MAAM,UAAU"}},
    {"offset": {"line": 2860, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2866, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/frog-base.tsx"],"sourcesContent":["import { detect } from 'detect-browser'\nimport { type Context, Hono } from 'hono'\nimport { ImageResponse } from 'hono-og'\nimport { inspectRoutes } from 'hono/dev'\nimport type { HonoOptions } from 'hono/hono-base'\nimport { html } from 'hono/html'\nimport type { ParamIndexMap, Params } from 'hono/router'\nimport type { RouterRoute, Schema } from 'hono/types'\nimport lz from 'lz-string'\n// TODO: maybe write our own \"modern\" universal path (or resolve) module.\n// We are not using `node:path` to remain compatible with Edge runtimes.\nimport { default as p } from 'path-browserify'\n\nimport type { CastActionOptions } from './types/castAction.js'\nimport type { Env } from './types/env.js'\nimport type {\n  FrameImageAspectRatio,\n  FrameResponse,\n  ImageOptions,\n} from './types/frame.js'\nimport type { Hub } from './types/hub.js'\nimport type {\n  BlankInput,\n  CastActionHandler,\n  FrameHandler,\n  H,\n  HandlerInterface,\n  ImageHandler,\n  Input,\n  MiddlewareHandlerInterface,\n  SignatureHandler,\n  TransactionHandler,\n} from './types/routes.js'\nimport type { Vars } from './ui/vars.js'\nimport { fromQuery } from './utils/fromQuery.js'\nimport { getButtonValues } from './utils/getButtonValues.js'\nimport { getCastActionContext } from './utils/getCastActionContext.js'\nimport { getFrameContext } from './utils/getFrameContext.js'\nimport { getImageContext } from './utils/getImageContext.js'\nimport { getImagePaths } from './utils/getImagePaths.js'\nimport { getRequestUrl } from './utils/getRequestUrl.js'\nimport { getRouteParameters } from './utils/getRouteParameters.js'\nimport { getSignatureContext } from './utils/getSignatureContext.js'\nimport { getTransactionContext } from './utils/getTransactionContext.js'\nimport * as jws from './utils/jws.js'\nimport { parseBrowserLocation } from './utils/parseBrowserLocation.js'\nimport { parseFonts } from './utils/parseFonts.js'\nimport { parseHonoPath } from './utils/parseHonoPath.js'\nimport { parseImage } from './utils/parseImage.js'\nimport { parseIntents } from './utils/parseIntents.js'\nimport { parsePath } from './utils/parsePath.js'\nimport { requestBodyToContext } from './utils/requestBodyToContext.js'\nimport { serializeJson } from './utils/serializeJson.js'\nimport { toSearchParams } from './utils/toSearchParams.js'\nimport { version } from './version.js'\n\nexport type FrogConstructorParameters<\n  env extends Env = Env,\n  basePath extends string = '/',\n  //\n  _state = env['State'],\n> = Pick<FrameResponse, 'browserLocation'> &\n  Required<Pick<FrameResponse, 'title'>> & {\n    /**\n     * The base path for assets.\n     *\n     * @example '/' (commonly for Vercel Serverless Functions)\n     */\n    assetsPath?: basePath | string | undefined\n    /**\n     * The base path for the server instance.\n     *\n     * @example '/api' (commonly for Vercel Serverless Functions)\n     */\n    basePath?: basePath | string | undefined\n    /**\n     * @deprecated Use `devtools` from `'frog/dev'` instead.\n     *\n     * Options for built-in devtools.\n     */\n    dev?:\n      | {\n          /** @deprecated */\n          enabled?: boolean | undefined\n          /** @deprecated */\n          appFid?: number | undefined\n          /** @deprecated */\n          appMnemonic?: string | undefined\n        }\n      | undefined\n    /**\n     * HTTP response headers.\n     */\n    headers?: Record<string, string> | undefined\n    /**\n     * Options to forward to the `Hono` instance.\n     */\n    honoOptions?: HonoOptions<env> | undefined\n    /**\n     * @deprecated Use `hub` instead.\n     *\n     * Farcaster Hub API URL.\n     */\n    hubApiUrl?: string | undefined\n    /**\n     * Farcaster Hub API configuration.\n     */\n    hub?: Hub | undefined\n    /**\n     * Default image options.\n     *\n     * @see https://vercel.com/docs/functions/og-image-generation/og-image-api\n     * @see https://vercel.com/docs/functions/og-image-generation/og-image-examples#using-a-custom-font\n     *\n     * @example\n     * { width: 1200, height: 630 }\n     *\n     * @example\n     * async () => {\n     *   const fontData = await fetch(\n     *     new URL('./assets/inter.ttf', import.meta.url),\n     *   ).then((res) => res.arrayBuffer());\n     *\n     *   return { fonts: [{ name: 'Inter', data: fontData, style: 'normal'}] }\n     * }\n     */\n    imageOptions?: ImageOptions | (() => Promise<ImageOptions>) | undefined\n    /**\n     * Default image aspect ratio.\n     *\n     * @default '1.91:1'\n     */\n    imageAspectRatio?: FrameImageAspectRatio | undefined\n    /**\n     * Initial state for the frames.\n     *\n     * @example\n     * ```ts\n     * initialState: {\n     *   index: 0,\n     *   todos: [],\n     * }\n     * ```\n     */\n    initialState?: _state | undefined\n    /**\n     * Origin URL of the server instance.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/origin\n     */\n    origin?: string | undefined\n    /**\n     * Key used to sign secret data.\n     *\n     * It is used for:\n     *   - Signing frame state, and\n     *   - Signing auth session cookies in the devtools.\n     *\n     * It's strongly recommended to add a strong secret key before deploying to production.\n     *\n     * @example\n     * '1zN3Uvl5QQd7OprLfp83IU96W6ip6KNPQ+l0MECPIZh8FBLYKQ+mPXE1CTxfwXGz'\n     */\n    secret?: string | undefined\n    /**\n     * FrogUI configuration.\n     */\n    ui?: { vars: Vars | undefined } | undefined\n    /**\n     * Whether or not to verify frame data via the Farcaster Hub's `validateMessage` API.\n     *\n     * - When `true`, the frame will go through verification and throw an error if it fails.\n     * - When `\"silent\"`, the frame will go through verification, but not throw an error if it fails.\n     * Instead, the frame will receive `verified: false` in its context.\n     * - When `false`, the frame will not go through verification.\n     *\n     * @default true.\n     */\n    verify?: boolean | 'silent' | undefined\n\n    /**\n     * Additional meta tags for the instance.\n     */\n    unstable_metaTags?: { property: string; content: string }[] | undefined\n  }\n\nexport type RouteOptions<\n  method extends string = string,\n  E extends Env = any,\n  P extends string = any,\n  I extends Input = BlankInput,\n> = Pick<FrogConstructorParameters, 'verify'> &\n  (method extends 'frame' | 'image'\n    ? {\n        fonts?: ImageOptions['fonts'] | (() => Promise<ImageOptions['fonts']>)\n      }\n    : method extends 'castAction'\n      ?\n          | CastActionOptions\n          | {\n              /**\n               * Custom handler for Cast Action `GET` response.\n               * One can use that if something needs to be derived from the `Context`.\n               */\n              handler: (\n                c: Context<E, P, I>,\n              ) => Promise<CastActionOptions> | CastActionOptions\n            }\n      : {})\n\n/**\n * A Frog instance.\n *\n * @param parameters - {@link FrogConstructorParameters}\n * @returns instance. {@link Frog}\n *\n * @example\n * ```\n * import { Frog } from 'frog'\n *\n * const app = new Frog()\n *\n * app.frame('/', (c) => {\n *   const { buttonValue, inputText, status } = c\n *   const fruit = inputText || buttonValue\n *   return c.res({\n *     image: (\n *       <div style={{ fontSize: 60 }}>\n *         {fruit ? `You selected: ${fruit}` : 'Welcome!'}\n *       </div>\n *     ),\n *     intents: [\n *       <Button value=\"apples\">Apples</Button>,\n *       <Button value=\"oranges\">Oranges</Button>,\n *       <Button value=\"bananas\">Bananas</Button>,\n *     ]\n *   })\n * })\n * ```\n */\n\nexport class FrogBase<\n  env extends Env = Env,\n  schema extends Schema = {},\n  basePath extends string = '/',\n  //\n  _state = env['State'],\n> {\n  // Note: not using native `private` fields to avoid tslib being injected\n  // into bundled code.\n  _initialState: env['State'] = undefined as env['State']\n  /** Path for assets. */\n  assetsPath: string\n  /** Base path of the server instance. */\n  basePath: string\n  /** URL to redirect to when the user is coming to the page via a browser. */\n  browserLocation: string | undefined\n  dev: FrogConstructorParameters['dev'] | undefined\n  headers: FrogConstructorParameters['headers'] | undefined\n  /** Hono instance. */\n  hono: Hono<env, schema, basePath>\n  /** Farcaster Hub API URL. */\n  hubApiUrl: string | undefined\n  /** Farcaster Hub API config. */\n  hub: Hub | undefined\n  /** Image aspect ratio. */\n  imageAspectRatio: FrameImageAspectRatio = '1.91:1'\n  /** Image options. */\n  imageOptions: ImageOptions | (() => Promise<ImageOptions>) | undefined\n  /** Origin URL of the server instance. */\n  origin: string | undefined\n  fetch: Hono<env, schema, basePath>['fetch']\n  get: Hono<env, schema, basePath>['get']\n  post: Hono<env, schema, basePath>['post']\n  /** Key used to sign secret data. */\n  secret: FrogConstructorParameters['secret'] | undefined\n  /** Title of the frame to be set at `og:title` **/\n  title: FrogConstructorParameters['title']\n  /** FrogUI configuration. */\n  ui: { vars: Vars | undefined } | undefined\n  /** Whether or not frames should be verified. */\n  verify: FrogConstructorParameters['verify'] = true\n\n  metaTags: FrogConstructorParameters['unstable_metaTags'] | undefined\n\n  _dev: string | undefined\n  version = version\n\n  constructor(parameters: FrogConstructorParameters<env, basePath, _state>) {\n    const {\n      assetsPath,\n      basePath,\n      browserLocation,\n      dev,\n      headers,\n      honoOptions,\n      hubApiUrl,\n      hub,\n      imageAspectRatio,\n      imageOptions,\n      initialState,\n      origin,\n      secret,\n      title,\n      ui,\n      unstable_metaTags,\n      verify,\n    } = parameters\n\n    this.hono = new Hono<env, schema, basePath>(honoOptions)\n    if (basePath) this.hono = this.hono.basePath(basePath)\n    if (browserLocation) this.browserLocation = browserLocation\n    if (headers) this.headers = headers\n    if (hubApiUrl) this.hubApiUrl = hubApiUrl\n    if (hub) this.hub = hub\n    if (imageAspectRatio) this.imageAspectRatio = imageAspectRatio\n    if (imageOptions) this.imageOptions = imageOptions\n    if (unstable_metaTags) this.metaTags = unstable_metaTags\n    if (origin) this.origin = origin\n    if (secret) this.secret = secret\n    this.title = title\n    if (ui) this.ui = ui\n    if (typeof verify !== 'undefined') this.verify = verify\n\n    this.basePath = basePath ?? '/'\n    // @ts-ignore - private\n    this.initialBasePath = this.basePath\n    this.assetsPath = assetsPath ?? this.basePath\n    this.fetch = this.hono.fetch.bind(this.hono)\n    this.get = this.hono.get.bind(this.hono)\n    this.post = this.hono.post.bind(this.hono)\n\n    if (initialState) this._initialState = initialState\n\n    if (dev) this.dev = { enabled: true, ...(dev ?? {}) }\n    this._dev = undefined // this is set `true` by `devtools` helper\n\n    // allow devtools to work with dynamic params off base path\n    this.hono.all('*', async (c, next) => {\n      if (this._dev)\n        for (const { handler, path } of c.req.matchedRoutes)\n          if (path === this._dev) return handler(c, next)\n      await next()\n    })\n  }\n\n  castAction: HandlerInterface<env, 'castAction', schema, basePath> = (\n    ...parameters: any[]\n  ) => {\n    const [path, middlewares, handler, options] = getRouteParameters<\n      env,\n      CastActionHandler<env>,\n      'castAction'\n    >(...parameters)\n\n    const { verify = this.verify } = options\n\n    // Cast Action Route (implements GET).\n    if ('handler' in options) {\n      this.hono.get(parseHonoPath(path), ...middlewares, async (c) => {\n        const url = getRequestUrl(c.req)\n\n        const { aboutUrl, name, description, icon } = await options.handler(c)\n        return c.json({\n          aboutUrl,\n          action: {\n            type: 'post',\n          },\n          name,\n          description,\n          icon,\n          postUrl: url,\n        })\n      })\n    } else {\n      const { aboutUrl, name, description, icon } = options\n\n      this.hono.get(parseHonoPath(path), ...middlewares, async (c) => {\n        const url = getRequestUrl(c.req)\n        return c.json({\n          aboutUrl,\n          action: {\n            type: 'post',\n          },\n          name,\n          description,\n          icon,\n          postUrl: url,\n        })\n      })\n    }\n    // Cast Action Route (implements POST).\n    this.hono.post(parseHonoPath(path), ...middlewares, async (c) => {\n      const url = getRequestUrl(c.req)\n      const origin = this.origin ?? url.origin\n      const baseUrl = origin + parsePath(this.basePath)\n\n      const { context } = getCastActionContext<env, string>({\n        context: await requestBodyToContext(c, {\n          hub:\n            this.hub ||\n            (this.hubApiUrl ? { apiUrl: this.hubApiUrl } : undefined),\n          secret: this.secret,\n          verify,\n        }),\n      })\n\n      const response = await handler(context)\n      if (response instanceof Response) return response\n      if (response.status === 'error') {\n        c.status(response.error.statusCode ?? 400)\n        return c.json({ message: response.error.message })\n      }\n\n      if (response.data.type === 'frame') {\n        const framePath = response.data.path\n        return c.json({\n          frameUrl: framePath.startsWith('http')\n            ? framePath\n            : baseUrl + parsePath(framePath),\n          type: 'frame',\n        })\n      }\n\n      const { message, link } = response.data\n      return c.json({ message, link, type: 'message' })\n    })\n\n    return this\n  }\n\n  frame: HandlerInterface<env, 'frame', schema, basePath> = (\n    ...parameters: any[]\n  ) => {\n    const [path, middlewares, handler, options = {}] = getRouteParameters<\n      env,\n      FrameHandler<env>,\n      'frame'\n    >(...parameters)\n\n    const { verify = this.verify } = options\n\n    // OG Image Route\n    const imagePaths = getImagePaths(parseHonoPath(path))\n    for (const imagePath of imagePaths) {\n      this.hono.get(imagePath, async (c) => {\n        const defaultImageOptions = await (async () => {\n          if (typeof this.imageOptions === 'function')\n            return await this.imageOptions()\n          return this.imageOptions\n        })()\n\n        const fonts = await (async () => {\n          if (this.ui?.vars?.fonts)\n            return Object.values(this.ui?.vars.fonts).flat()\n          if (typeof options?.fonts === 'function') return await options.fonts()\n          if (options?.fonts) return options.fonts\n          return defaultImageOptions?.fonts\n        })()\n\n        const {\n          headers = this.headers,\n          image,\n          imageOptions = defaultImageOptions,\n        } = fromQuery<any>(c.req.query())\n        const image_ = JSON.parse(lz.decompressFromEncodedURIComponent(image))\n        return new ImageResponse(image_, {\n          width: 1200,\n          height: 630,\n          ...imageOptions,\n          format: imageOptions?.format ?? 'png',\n          fonts: await parseFonts(fonts),\n          headers: imageOptions?.headers ?? headers,\n        })\n      })\n    }\n\n    // Frame Route (implements GET & POST).\n    this.hono.use(parseHonoPath(path), ...middlewares, async (c) => {\n      const url = getRequestUrl(c.req)\n      const origin = this.origin ?? url.origin\n      const assetsUrl = origin + parsePath(this.assetsPath)\n      const baseUrl = origin + parsePath(this.basePath)\n      const initialBaseUrl =\n        origin +\n        parsePath(\n          // @ts-ignore - private\n          this.initialBasePath,\n        )\n\n      const { context, getState } = getFrameContext<env, string>({\n        context: await requestBodyToContext(c, {\n          hub:\n            this.hub ||\n            (this.hubApiUrl ? { apiUrl: this.hubApiUrl } : undefined),\n          secret: this.secret,\n          verify,\n        }),\n        initialState: this._initialState,\n        origin,\n      })\n\n      if (context.url !== parsePath(url.href)) return c.redirect(context.url)\n\n      const response = await handler(context)\n      if (response instanceof Response) return response\n      if (response.status === 'error') {\n        c.status(response.error.statusCode ?? 400)\n        return c.json({ message: response.error.message })\n      }\n\n      const {\n        action,\n        browserLocation = this.browserLocation,\n        headers = this.headers,\n        imageAspectRatio = this.imageAspectRatio,\n        image,\n        imageOptions: imageOptions_ = this.imageOptions,\n        intents,\n        ogImage,\n        title = this.title,\n      } = response.data\n\n      const buttonValues = getButtonValues(\n        parseIntents(intents, {\n          baseUrl,\n          initialBaseUrl,\n        }),\n      )\n\n      if (context.status === 'redirect' && context.buttonIndex) {\n        const buttonValue = buttonValues[context.buttonIndex - 1]\n        const location = buttonValue?.replace(/^_r:/, '')\n        if (!location) throw new Error('location required to redirect')\n        return c.redirect(location, 302)\n      }\n\n      const renderAsHTML =\n        c.req.header('Accept') === 'text/html' ||\n        c.req.query('accept') === 'text/html'\n\n      // If the user is coming from a browser, and a `browserLocation` is set,\n      // then we will redirect the user to that location.\n      const browser = detect(c.req.header('user-agent'))\n\n      const browserLocation_ = parseBrowserLocation(c, browserLocation, {\n        basePath: this.basePath,\n        path,\n      })\n      if (!renderAsHTML && browser?.name && browserLocation_)\n        return c.redirect(\n          browserLocation_.startsWith('http')\n            ? browserLocation_\n            : `${origin + p.resolve(this.basePath, browserLocation_)}`,\n          302,\n        )\n\n      // Derive the previous state, and sign it if a secret is provided.\n      const previousState = await (async () => {\n        const state = await context.deriveState()\n        if (!this.secret) return state\n        if (!state) return state\n        return jws.sign(JSON.stringify(state), this.secret)\n      })()\n\n      // We need to pass some context to the next frame to derive button values, state, etc.\n      // Here, we are deriving two sets of \"next frame state\".\n      // 1. For the INITIAL FRAME, we need to pass through the state as a search parameter\n      //    due to Farcaster's constraints with the `fc:frame:state` tag. It must be empty\n      //    for the initial frame.\n      // 2. For SUBSEQUENT FRAMES, we can pass through the state as a serialized JSON object\n      //    to the next frame via the `fc:frame:state` tag.\n      const nextFrameStateSearch = toSearchParams({\n        initialPath: context.initialPath,\n        previousButtonValues: buttonValues,\n      })\n      const nextFrameStateMeta = serializeJson({\n        initialPath: context.initialPath,\n        previousButtonValues: buttonValues,\n        previousState,\n      })\n\n      const imageOptions = await (async () => {\n        if (typeof imageOptions_ === 'function') return await imageOptions_()\n        return imageOptions_\n      })()\n\n      const imageUrl = await (async () => {\n        if (typeof image !== 'string') {\n          const compressedImage = lz.compressToEncodedURIComponent(\n            JSON.stringify(\n              await parseImage(\n                <div\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    height: '100%',\n                    width: '100%',\n                  }}\n                >\n                  {await image}\n                </div>,\n                {\n                  assetsUrl,\n                  ui: {\n                    ...this.ui,\n                    vars: {\n                      ...this.ui?.vars,\n                      frame: {\n                        height: imageOptions?.height!,\n                        width: imageOptions?.width!,\n                      },\n                    },\n                  },\n                },\n              ),\n            ),\n          )\n          const imageParams = toSearchParams({\n            image: compressedImage,\n            imageOptions,\n            headers,\n          })\n          return `${parsePath(context.url)}/image?${imageParams}`\n        }\n        if (image.startsWith('http') || image.startsWith('data')) return image\n\n        const isHandlerPresentOnImagePath = (() => {\n          const routes = inspectRoutes(this.hono)\n          const matchesWithoutParamsStash = this.hono.router\n            .match(\n              'GET',\n              // `this.initialBasePath` and `this.basePath` are equal only when this handler is triggered at\n              // the top `Frog` instance.\n              //\n              // However, such are not equal when an instance of `Frog` is routed to another one via `.route`,\n              // and since we not expect one to set `basePath` to the instance which is being routed to, we can\n              // safely assume it's only set at the top level, as doing otherwise is irrational.\n              //\n              // Since `this.basePath` is set at the top instance, we have to account for that while looking for a match.\n              //\n              // @ts-ignore - accessing a private field\n              this.initialBasePath === this.basePath\n                ? this.basePath + parsePath(image)\n                : parsePath(image),\n            )\n            .filter(\n              (routeOrParams) => typeof routeOrParams[0] !== 'string',\n            ) as unknown as (\n            | [[H, RouterRoute], Params][]\n            | [[H, RouterRoute], ParamIndexMap][]\n          )[]\n\n          const matchedRoutes = matchesWithoutParamsStash\n            .flat(1)\n            .map((matchedRouteWithoutParams) => matchedRouteWithoutParams[0][1])\n\n          const nonMiddlewareMatchedRoutes = matchedRoutes.filter(\n            (matchedRoute) => {\n              const routeWithAdditionalInfo = routes.find(\n                (route) =>\n                  route.path === matchedRoute.path &&\n                  route.method === matchedRoute.method,\n              )\n              if (!routeWithAdditionalInfo)\n                throw new Error(\n                  'Unexpected error: Matched a route that is not in the list of all routes.',\n                )\n              return !routeWithAdditionalInfo.isMiddleware\n            },\n          )\n          return nonMiddlewareMatchedRoutes.length !== 0\n        })()\n\n        if (isHandlerPresentOnImagePath) return `${baseUrl + parsePath(image)}`\n        return `${assetsUrl + parsePath(image)}`\n      })()\n\n      const ogImageUrl = (() => {\n        if (!ogImage) return undefined\n        if (ogImage.startsWith('http')) return ogImage\n        return baseUrl + parsePath(ogImage)\n      })()\n\n      const postUrl = (() => {\n        if (!action) return context.url\n        if (action.startsWith('http')) return action\n        if (action.startsWith('~'))\n          return initialBaseUrl + parsePath(action.slice(1))\n\n        return baseUrl + parsePath(action)\n      })()\n\n      const parsedIntents = parseIntents(intents, {\n        initialBaseUrl,\n        baseUrl,\n        search:\n          context.status === 'initial'\n            ? nextFrameStateSearch.toString()\n            : undefined,\n      })\n\n      // Set response headers provided by consumer.\n      for (const [key, value] of Object.entries(headers ?? {}))\n        c.header(key, value)\n\n      if (renderAsHTML) {\n        const height = imageOptions?.height ?? 630\n        const width = imageOptions?.width ?? 1200\n\n        // Convert `tw` to `class`\n        const __html = image.toString().replace(/tw=/g, 'class=')\n\n        const fonts = await (async () => {\n          if (this.ui?.vars?.fonts)\n            return Object.values(this.ui.vars.fonts).flat()\n          if (typeof options?.fonts === 'function') return await options.fonts()\n          if (options?.fonts) return options.fonts\n          return (imageOptions as ImageOptions | undefined)?.fonts\n        })()\n        const groupedFonts = new Map<string, NonNullable<typeof fonts>>()\n        if (fonts)\n          for (const font of fonts) {\n            const key = `${font.source ? `${font.source}:` : ''}${font.name}`\n            if (groupedFonts.has(key)) groupedFonts.get(key)?.push(font)\n            else groupedFonts.set(key, [font])\n          }\n        const googleFonts = []\n        for (const item of groupedFonts) {\n          const [, fonts] = item\n          const font = fonts[0]\n          if (font?.source === 'google') {\n            const name = font.name.replace(' ', '+')\n            const hasItalic = fonts.some((x) => x.style === 'italic')\n            const attributeKeys = hasItalic ? 'ital,wght' : 'wght'\n            const attributeValues = fonts\n              .map((x) => {\n                if (hasItalic) {\n                  if (x.style === 'italic') return `1,${x.weight}`\n                  return `0,${x.weight}`\n                }\n                return x.weight\n              })\n              .join(';')\n            const url = `https://fonts.googleapis.com/css2?family=${name}${\n              attributeValues ? `:${attributeKeys}@${attributeValues}` : ''\n            }&display=swap`\n            googleFonts.push(url)\n          }\n        }\n\n        return c.html(\n          <>\n            <script src=\"https://cdn.tailwindcss.com\" />\n            <script>\n              {html`\n                tailwind.config = {\n                  plugins: [{\n                    handler({ addBase }) {\n                      addBase({ 'html': { 'line-height': 1.2 } })\n                    },\n                  }],\n                }\n              `}\n            </script>\n            <style\n              // biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>\n              dangerouslySetInnerHTML={{\n                __html: `@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&family=Material+Icons');body{display:flex;height:100%;margin:0;tab-size:8;font-family:Inter,sans-serif;overflow:hidden}body>div,body>div *{box-sizing:border-box;display:flex}body{background:#1A1A19;}link,script,style{position: absolute;width: 1px;height: 1px;padding: 0;margin: -1px;overflow: hidden;clip: rect(0, 0, 0, 0);white-space: nowrap;border-width: 0;}`,\n              }}\n            />\n\n            {Boolean(googleFonts.length) && (\n              <>\n                <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n                <link\n                  rel=\"preconnect\"\n                  href=\"https://fonts.gstatic.com\"\n                  crossOrigin\n                />\n                {googleFonts.map((url) => (\n                  <link href={url} rel=\"stylesheet\" />\n                ))}\n              </>\n            )}\n\n            <div\n              className=\"bg-black\"\n              // biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>\n              dangerouslySetInnerHTML={{ __html }}\n              style={{ height, width }}\n            />\n          </>,\n        )\n      }\n\n      const metaTagsMap = new Map<string, string>()\n      for (const tag of [\n        ...(response.data.unstable_metaTags ?? []),\n        ...(this.metaTags ?? []),\n      ]) {\n        if (metaTagsMap.has(tag.property)) continue\n        metaTagsMap.set(tag.property, tag.content)\n      }\n      const metaTags =\n        metaTagsMap.size === 0\n          ? []\n          : Array.from(metaTagsMap).map((x) => ({\n              property: x[0],\n              content: x[1],\n            }))\n\n      return c.render(\n        <>\n          {html`<!DOCTYPE html>`}\n          <html lang=\"en\">\n            <head>\n              <meta property=\"fc:frame\" content=\"vNext\" />\n              <meta\n                property=\"fc:frame:image:aspect_ratio\"\n                content={imageAspectRatio}\n              />\n              <meta property=\"fc:frame:image\" content={imageUrl} />\n              <meta property=\"og:image\" content={ogImageUrl ?? imageUrl} />\n              <meta property=\"og:title\" content={title} />\n              <meta\n                property=\"fc:frame:post_url\"\n                content={\n                  context.status === 'initial'\n                    ? `${postUrl}?${nextFrameStateSearch.toString()}`\n                    : postUrl\n                }\n              />\n              {context.status !== 'initial' && (\n                <meta property=\"fc:frame:state\" content={nextFrameStateMeta} />\n              )}\n              {parsedIntents}\n\n              <meta property=\"frog:version\" content={version} />\n              {/* The devtools needs a serialized context. */}\n              {c.req.header('x-frog-dev') !== undefined && (\n                <meta\n                  property=\"frog:context\"\n                  content={serializeJson({\n                    ...context,\n                    // note: unserializable entities are undefined.\n                    env: context.env\n                      ? Object.assign(context.env, {\n                          incoming: undefined,\n                          outgoing: undefined,\n                        })\n                      : undefined,\n                    req: undefined,\n                    state: getState(),\n                  })}\n                />\n              )}\n\n              {metaTags.map((tag) => (\n                <meta property={tag.property} content={tag.content} />\n              ))}\n            </head>\n            <body />\n          </html>\n        </>,\n      )\n    })\n\n    return this\n  }\n\n  image: HandlerInterface<env, 'image', schema, basePath> = (\n    ...parameters: any[]\n  ) => {\n    const [path, middlewares, handler, options = {}] = getRouteParameters<\n      env,\n      ImageHandler<env>,\n      'image'\n    >(...parameters)\n\n    if (path.endsWith('/image'))\n      throw new Error(\n        'Image handler path cannot end with `/image` as it might conflict with internal frame image handler path that also ends with `/image`.',\n      )\n\n    this.hono.get(path, ...middlewares, async (c) => {\n      const url = getRequestUrl(c.req)\n      const origin = this.origin ?? url.origin\n      const assetsUrl = origin + parsePath(this.assetsPath)\n\n      const { context } = getImageContext<env, string>({\n        context: c,\n      })\n\n      const response = await handler(context)\n\n      if (response.status !== 'success')\n        throw new Error(\n          `Unexepcted Error: Image response must always have value 'success'.`,\n        )\n\n      const defaultImageOptions = await (async () => {\n        if (typeof this.imageOptions === 'function')\n          return await this.imageOptions()\n        return this.imageOptions\n      })()\n\n      const fonts = await (async () => {\n        if (this.ui?.vars?.fonts)\n          return Object.values(this.ui?.vars.fonts).flat()\n        if (typeof options?.fonts === 'function') return await options.fonts()\n        if (options?.fonts) return options.fonts\n        return defaultImageOptions?.fonts\n      })()\n\n      const {\n        headers = this.headers,\n        image,\n        imageOptions = defaultImageOptions,\n      } = response.data\n      return new ImageResponse(\n        (await parseImage(\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              height: '100%',\n              width: '100%',\n            }}\n          >\n            {await image}\n          </div>,\n          {\n            assetsUrl,\n            ui: {\n              ...this.ui,\n              vars: {\n                ...this.ui?.vars,\n                frame: {\n                  height: imageOptions?.height!,\n                  width: imageOptions?.width!,\n                },\n              },\n            },\n          },\n        )) as any,\n        {\n          width: 1200,\n          height: 630,\n          ...imageOptions,\n          format: imageOptions?.format ?? 'png',\n          fonts: await parseFonts(fonts),\n          headers: imageOptions?.headers ?? headers,\n        },\n      )\n    })\n\n    return this\n  }\n\n  route<\n    subPath extends string,\n    subSchema extends Schema,\n    subBasePath extends string,\n  >(path: subPath, frog: FrogBase<any, subSchema, subBasePath>) {\n    if (frog.assetsPath === '/') frog.assetsPath = this.assetsPath\n    if (frog.basePath === '/') {\n      // @ts-ignore - private\n      frog.initialBasePath = this.initialBasePath ?? parsePath(this.basePath)\n      frog.basePath = parsePath(this.basePath) + parsePath(path)\n    }\n    if (!frog.browserLocation) frog.browserLocation = this.browserLocation\n    if (!frog.dev) frog.dev = this.dev\n    if (!frog.headers) frog.headers = this.headers\n    if (!frog.hubApiUrl) frog.hubApiUrl = this.hubApiUrl\n    if (!frog.hub) frog.hub = this.hub\n    if (!frog.imageOptions) frog.imageOptions = this.imageOptions\n    if (!frog.origin) frog.origin = this.origin\n    if (!frog.secret) frog.secret = this.secret\n    if (!frog.ui) frog.ui = this.ui\n    if (!frog.verify) frog.verify = this.verify\n\n    this.hono.route(path, frog.hono)\n\n    return this\n  }\n\n  transaction: HandlerInterface<env, 'transaction', schema, basePath> = (\n    ...parameters: any[]\n  ) => {\n    const [path, middlewares, handler, options = {}] = getRouteParameters<\n      env,\n      TransactionHandler<env>,\n      'transaction'\n    >(...parameters)\n\n    const { verify = this.verify } = options\n\n    this.hono.post(parseHonoPath(path), ...middlewares, async (c) => {\n      const { context } = getTransactionContext<env, string, {}, _state>({\n        context: await requestBodyToContext(c, {\n          hub:\n            this.hub ||\n            (this.hubApiUrl ? { apiUrl: this.hubApiUrl } : undefined),\n          secret: this.secret,\n          verify,\n        }),\n        req: c.req,\n      })\n      const response = await handler(context)\n      if (response instanceof Response) return response\n      if (response.status === 'error') {\n        c.status(response.error.statusCode ?? 400)\n        return c.json({ message: response.error.message })\n      }\n\n      return c.json(response.data)\n    })\n\n    return this\n  }\n\n  signature: HandlerInterface<env, 'signature', schema, basePath> = (\n    ...parameters: any[]\n  ) => {\n    const [path, middlewares, handler, options = {}] = getRouteParameters<\n      env,\n      SignatureHandler<env>,\n      'signature'\n    >(...parameters)\n\n    const { verify = this.verify } = options\n\n    this.hono.post(parseHonoPath(path), ...middlewares, async (c) => {\n      const { context } = getSignatureContext<env, string, {}, _state>({\n        context: await requestBodyToContext(c, {\n          hub:\n            this.hub ||\n            (this.hubApiUrl ? { apiUrl: this.hubApiUrl } : undefined),\n          secret: this.secret,\n          verify,\n        }),\n        req: c.req,\n      })\n      const response = await handler(context)\n      if (response instanceof Response) return response\n      if (response.status === 'error') {\n        c.status(response.error.statusCode ?? 400)\n        return c.json({ message: response.error.message })\n      }\n\n      return c.text(\n        JSON.stringify(response.data, (_, value) =>\n          typeof value === 'bigint' ? value.toString() : value,\n        ),\n        200,\n        { 'Content-Type': 'application/json' },\n      )\n    })\n\n    return this\n  }\n\n  use: MiddlewareHandlerInterface<env, schema, basePath> = (...args: any[]) => {\n    this.hono.use(...args)\n    return this as any\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3692, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3699, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/frog.tsx"],"sourcesContent":["import type { Schema } from 'hono'\n\nimport { FrogBase, type FrogConstructorParameters } from './frog-base.js'\nimport type { Env } from './types/env.js'\n\n/**\n * A Frog instance.\n *\n * @param parameters - {@link FrogConstructorParameters}\n * @returns instance. {@link FrogBase}\n *\n * @example\n * ```\n * import { Frog } from 'frog'\n *\n * const app = new Frog()\n *\n * app.frame('/', (c) => {\n *   const { buttonValue, inputText, status } = c\n *   const fruit = inputText || buttonValue\n *   return c.res({\n *     image: (\n *       <div style={{ fontSize: 60 }}>\n *         {fruit ? `You selected: ${fruit}` : 'Welcome!'}\n *       </div>\n *     ),\n *     intents: [\n *       <Button value=\"apples\">Apples</Button>,\n *       <Button value=\"oranges\">Oranges</Button>,\n *       <Button value=\"bananas\">Bananas</Button>,\n *     ]\n *   })\n * })\n * ```\n */\nexport class Frog<\n  env extends Env = Env,\n  schema extends Schema = {},\n  basePath extends string = '/',\n  //\n  _state = env['State'],\n> extends FrogBase<env, schema, basePath, _state> {\n  constructor(params: FrogConstructorParameters) {\n    super(params as any)\n\n    const frame = this.frame\n\n    this.frame = (path: string, ...args: any[]) => {\n      ;(frame as any)(path, ...args)\n      return this\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAmCM,MAAO,aAMH,8IAAA,CAAA,WAAuC;IAC/C,YAAY,MAAiC,CAAA;QAC3C,KAAK,CAAC;QAEN,MAAM,QAAQ,IAAI,CAAC,KAAK;QAExB,IAAI,CAAC,KAAK,GAAG,CAAC,MAAc,GAAG;;YAC3B,MAAc,SAAS;YACzB,OAAO,IAAI;QACb;IACF"}},
    {"offset": {"line": 3720, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3726, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/vercel/handle.ts"],"sourcesContent":["import type { Schema } from 'hono'\nimport { handle as handle_hono } from 'hono/vercel'\n\nimport type { Frog } from '../frog.js'\nimport type { Env } from '../types/env.js'\n\nexport function handle<\n  env extends Env,\n  schema extends Schema,\n  basePath extends string,\n  //\n  _state = env['State'],\n>(app: Frog<env, schema, basePath, _state>) {\n  return handle_hono(app.hono).bind(app.hono)\n}\n"],"names":[],"mappings":";;;;;;;AAMM,SAAU,OAMd,GAAwC;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,SAAW,AAAX,EAAY,IAAI,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI;AAC5C"}},
    {"offset": {"line": 3736, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3741, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/constants.ts"],"sourcesContent":["import type { CookieOptions } from 'hono/utils/cookie'\n\nexport const defaultHeaders = {\n  'x-frog-dev': 'true',\n} satisfies HeadersInit\n\nexport const defaultFid = 1\n\nexport const defaultCastId = {\n  fid: defaultFid,\n  hash: '0x0000000000000000000000000000000000000000',\n}\n\nexport const defaultCookieOptions = {\n  maxAge: 30 * 86_400,\n  sameSite: 'Strict',\n  secure: true,\n} as CookieOptions\n\nexport const uiDistDir = '.frog'\n"],"names":[],"mappings":";;;;;;;AAEO,MAAM,iBAAiB;IAC5B,cAAc;;AAGT,MAAM,aAAa;AAEnB,MAAM,gBAAgB;IAC3B,KAAK;IACL,MAAM;;AAGD,MAAM,uBAAuB;IAClC,QAAQ,KAAK;IACb,UAAU;IACV,QAAQ;;AAGH,MAAM,YAAY"}},
    {"offset": {"line": 3762, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3767, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/schemas.ts"],"sourcesContent":["import {\n  integer,\n  maxValue,\n  minValue,\n  number,\n  object,\n  optional,\n  pipe,\n  string,\n  undefined_,\n  union,\n} from 'valibot'\n\nimport { defaultCastId } from './constants.js'\n\n// TODO: Add additional validations\nexport const postSchema = object({\n  buttonIndex: pipe(number(), integer(), minValue(1), maxValue(4)),\n  castId: optional(\n    object({\n      fid: pipe(number(), integer(), minValue(1)),\n      hash: string(),\n    }),\n    defaultCastId,\n  ),\n  fid: pipe(number(), integer(), minValue(1)),\n  fromAddress: union([undefined_(), string()]),\n  inputText: union([undefined_(), string()]),\n  state: union([undefined_(), string()]),\n  transactionId: union([undefined_(), string()]),\n  sourceFrameId: string(),\n} as const)\n"],"names":[],"mappings":";;;;;;;;AAgBO,MAAM,aAAa,CAAA,GAAA,0IAAA,CAAA,SAAM,AAAN,EAAO;IAC/B,aAAa,CAAA,GAAA,0IAAA,CAAA,OAAI,AAAJ,EAAK,CAAA,GAAA,0IAAA,CAAA,SAAM,AAAN,KAAU,CAAA,GAAA,0IAAA,CAAA,UAAO,AAAP,KAAW,CAAA,GAAA,0IAAA,CAAA,WAAQ,AAAR,EAAS,IAAI,CAAA,GAAA,0IAAA,CAAA,WAAQ,AAAR,EAAS;IAC7D,QAAQ,CAAA,GAAA,0IAAA,CAAA,WAAQ,AAAR,EACN,CAAA,GAAA,0IAAA,CAAA,SAAM,AAAN,EAAO;QACL,KAAK,CAAA,GAAA,0IAAA,CAAA,OAAI,AAAJ,EAAK,CAAA,GAAA,0IAAA,CAAA,SAAM,AAAN,KAAU,CAAA,GAAA,0IAAA,CAAA,UAAO,AAAP,KAAW,CAAA,GAAA,0IAAA,CAAA,WAAQ,AAAR,EAAS;QACxC,MAAM,CAAA,GAAA,0IAAA,CAAA,SAAM,AAAN;QAER,kJAAA,CAAA,gBAAa;IAEf,KAAK,CAAA,GAAA,0IAAA,CAAA,OAAI,AAAJ,EAAK,CAAA,GAAA,0IAAA,CAAA,SAAM,AAAN,KAAU,CAAA,GAAA,0IAAA,CAAA,UAAO,AAAP,KAAW,CAAA,GAAA,0IAAA,CAAA,WAAQ,AAAR,EAAS;IACxC,aAAa,CAAA,GAAA,0IAAA,CAAA,QAAK,AAAL,EAAM;QAAC,CAAA,GAAA,0IAAA,CAAA,aAAU,AAAV;QAAc,CAAA,GAAA,0IAAA,CAAA,SAAM,AAAN;KAAS;IAC3C,WAAW,CAAA,GAAA,0IAAA,CAAA,QAAK,AAAL,EAAM;QAAC,CAAA,GAAA,0IAAA,CAAA,aAAU,AAAV;QAAc,CAAA,GAAA,0IAAA,CAAA,SAAM,AAAN;KAAS;IACzC,OAAO,CAAA,GAAA,0IAAA,CAAA,QAAK,AAAL,EAAM;QAAC,CAAA,GAAA,0IAAA,CAAA,aAAU,AAAV;QAAc,CAAA,GAAA,0IAAA,CAAA,SAAM,AAAN;KAAS;IACrC,eAAe,CAAA,GAAA,0IAAA,CAAA,QAAK,AAAL,EAAM;QAAC,CAAA,GAAA,0IAAA,CAAA,aAAU,AAAV;QAAc,CAAA,GAAA,0IAAA,CAAA,SAAM,AAAN;KAAS;IAC7C,eAAe,CAAA,GAAA,0IAAA,CAAA,SAAM,AAAN"}},
    {"offset": {"line": 3800, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3805, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/utils/fetchFrame.ts"],"sourcesContent":["import { bytesToHex, hexToBytes } from '@noble/curves/abstract/utils'\nimport { ed25519 } from '@noble/curves/ed25519'\nimport { blake3 } from '@noble/hashes/blake3'\nimport { toBytes } from '@noble/hashes/utils'\n\nimport {\n  FarcasterNetwork,\n  FrameActionBody,\n  HashScheme,\n  Message,\n  MessageData,\n  MessageType,\n  SignatureScheme,\n} from '../../protobufs/generated/message_pb.js'\nimport { defaultHeaders } from '../constants.js'\n\nexport type FetchFrameParameters = {\n  body: {\n    buttonIndex: number\n    castId: {\n      fid: number\n      hash: string\n    }\n    fid: number\n    fromAddress: string | undefined\n    inputText: string | undefined\n    state: string | undefined\n    transactionId: string | undefined\n  }\n  headers?: HeadersInit | undefined\n  privateKey: string | undefined\n  url: string\n}\n\nexport async function fetchFrame(parameters: FetchFrameParameters) {\n  const { body, headers, privateKey, url } = parameters\n  const { buttonIndex, castId, fid, fromAddress, state, transactionId } = body\n  const inputText = body.inputText ? body.inputText : undefined\n\n  const network = FarcasterNetwork.MAINNET\n  const epoch = 1_609_459_200_000 // January 1, 2021 UTC\n  const timestamp = Math.round((Date.now() - epoch) / 1000)\n\n  // TODO: Add additional validation\n  // https://github.com/farcasterxyz/hub-monorepo/blob/main/packages/core/src/validations.ts#L777\n  if (timestamp > 2 ** 32 - 1) throw new Error('time too far in future')\n  if (typeof fid !== 'number' || fid <= 0 || !Number.isInteger(fid))\n    throw new Error('Invalid fid')\n  if (!Object.values(FarcasterNetwork).includes(network))\n    throw new Error('Invalid network')\n\n  const frameActionBody = new FrameActionBody({\n    address: fromAddress ? hexToBytes(fromAddress.slice(2)) : undefined,\n    buttonIndex,\n    castId: {\n      fid: BigInt(castId.fid),\n      hash: hexToBytes(castId.hash.slice(2)),\n    },\n    inputText: inputText ? toBytes(inputText) : undefined,\n    state: state ? toBytes(state) : undefined,\n    url: toBytes(url),\n    transactionId: transactionId\n      ? hexToBytes(transactionId.slice(2))\n      : undefined,\n  })\n\n  const messageData = new MessageData({\n    body: { case: 'frameActionBody', value: frameActionBody },\n    fid: BigInt(fid),\n    network,\n    timestamp,\n    type: MessageType.FRAME_ACTION,\n  })\n\n  const dataBytes = messageData.toBinary()\n  const hash = blake3(dataBytes, { dkLen: 20 })\n  const privateKeyBytes = privateKey\n    ? hexToBytes(privateKey.slice(2))\n    : ed25519.utils.randomPrivateKey()\n  const message = new Message({\n    data: messageData,\n    hash,\n    hashScheme: HashScheme.BLAKE3,\n    signature: ed25519.sign(hash, privateKeyBytes),\n    signatureScheme: SignatureScheme.ED25519,\n    signer: ed25519.getPublicKey(privateKeyBytes),\n  })\n  const messageBytes = bytesToHex(message.toBinary())\n\n  const t0 = performance.now()\n  let response: Response | undefined\n  let error: Error | undefined\n  try {\n    response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...defaultHeaders,\n        ...headers,\n      },\n      body: JSON.stringify({\n        untrustedData: {\n          address: fromAddress,\n          buttonIndex,\n          castId,\n          fid,\n          inputText,\n          state,\n          transactionId,\n\n          messageHash: `0x${bytesToHex(message.hash)}`,\n          network,\n          timestamp: message.data?.timestamp,\n          url,\n        },\n        trustedData: {\n          messageBytes,\n        },\n      }),\n    })\n  } catch (err) {\n    error = err as Error\n  }\n\n  const t1 = performance.now()\n  const speed = t1 - t0\n  return { error, response, speed }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3910, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3915, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/utils/getHtmlSize.ts"],"sourcesContent":["export async function getHtmlSize(response: Response) {\n  const blob = await response.blob()\n  return blob.size\n}\n"],"names":[],"mappings":";;;AAAO,eAAe,YAAY,QAAkB;IAClD,MAAM,OAAO,MAAM,SAAS,IAAI;IAChC,OAAO,KAAK,IAAI;AAClB"}},
    {"offset": {"line": 3922, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3927, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/utils/getImageSize.ts"],"sourcesContent":["export async function getImageSize(url: string) {\n  const response = await fetch(url)\n  const blob = await response.blob()\n  return blob.size\n}\n"],"names":[],"mappings":";;;AAAO,eAAe,aAAa,GAAW;IAC5C,MAAM,WAAW,MAAM,MAAM;IAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;IAChC,OAAO,KAAK,IAAI;AAClB"}},
    {"offset": {"line": 3935, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3940, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/utils/getFrameMetadata.ts"],"sourcesContent":["import { parseFromString } from 'dom-parser'\n\nexport type FrameMetadata = {\n  property: FrameMetaTagPropertyName | FrogMetaTagPropertyName\n  content: string\n}[]\n\ntype FrameMetaTagPropertyName =\n  | 'fc:frame'\n  | 'fc:frame:image'\n  | 'fc:frame:image:aspect_ratio'\n  | 'fc:frame:input:text'\n  | 'fc:frame:post_url'\n  | 'fc:frame:state'\n  | 'og:image'\n  | 'og:title'\n  | `fc:frame:button:${1 | 2 | 3 | 4}`\n  | `fc:frame:button:${1 | 2 | 3 | 4}:${'action' | 'target'}`\n\ntype FrogMetaTagPropertyName =\n  | 'frog:context'\n  | 'frog:image'\n  | 'frog:prev_context'\n  | 'frog:version'\n\nexport const metaTagPropertyRegex = /^(fc|frog|og:image|og:title)/\n\n/**\n * Extracts frame metadata from a given URL.\n *\n * @example\n * import { getFrameMetadata } from 'frog'\n * const frameMetadata = await getFrameMetadata(`https://myframe.com/api`)\n */\nexport async function getFrameMetadata(url: string): Promise<FrameMetadata> {\n  try {\n    const text = await fetch(url).then((r) => r.text())\n\n    const dom = parseFromString(text.replace(/<!doctype html>/i, ''))\n    const nodes = dom.getElementsByTagName('meta')\n\n    const metaTags: FrameMetadata = []\n    for (const node of nodes) {\n      const property = node.getAttribute('property')\n      const content = node.getAttribute('content')\n\n      if (!property.match(metaTagPropertyRegex)) continue\n      metaTags.push({\n        property: property as FrameMetadata[number]['property'],\n        content,\n      })\n    }\n\n    return metaTags\n  } catch (error) {\n    throw new Error(\n      [\n        `Failed to extract frame meta tags from \"${url}\".`,\n        '',\n        `Error: ${error}`,\n      ].join('\\n'),\n    )\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAyBO,MAAM,uBAAuB;AAS7B,eAAe,iBAAiB,GAAW;IAChD,IAAI;QACF,MAAM,OAAO,MAAM,MAAM,KAAK,IAAI,CAAC,CAAC,IAAM,EAAE,IAAI;QAEhD,MAAM,MAAM,CAAA,GAAA,gJAAA,CAAA,kBAAe,AAAf,EAAgB,KAAK,OAAO,CAAC,oBAAoB;QAC7D,MAAM,QAAQ,IAAI,oBAAoB,CAAC;QAEvC,MAAM,WAA0B,EAAE;QAClC,KAAK,MAAM,QAAQ,MAAO;YACxB,MAAM,WAAW,KAAK,YAAY,CAAC;YACnC,MAAM,UAAU,KAAK,YAAY,CAAC;YAElC,IAAI,CAAC,SAAS,KAAK,CAAC,uBAAuB;YAC3C,SAAS,IAAI,CAAC;gBACZ,UAAU;gBACV;;QAEJ;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MACR;YACE,CAAA,wCAAA,EAA2C,IAAG,EAAA,CAAI;YAClD;YACA,CAAA,OAAA,EAAU,MAAK,CAAE;SAClB,CAAC,IAAI,CAAC;IAEX;AACF"}},
    {"offset": {"line": 3972, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3977, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/utils/parseButtons.ts"],"sourcesContent":["import type { FrameMetadata } from '../../utils/getFrameMetadata.js'\nimport type { FrameButton } from '../types.js'\n\n// https://regexr.com/7rlm0\nconst buttonRegex = /fc:frame:button:(1|2|3|4)(?::(action|post_url|target))?$/\n\nexport function parseButtons(metadata: FrameMetadata) {\n  let currentButtonIndex = 0\n  let buttonsAreMissing = false\n  let buttonsAreOutOfOrder = false\n\n  const buttonMap = new Map<\n    number,\n    Omit<FrameButton, 'postUrl' | 'target' | 'type'>\n  >()\n  const buttonActionMap = new Map<number, FrameButton['type']>()\n  const buttonPostUrlMap = new Map<number, FrameButton['postUrl']>()\n  const buttonTargetMap = new Map<number, FrameButton['target']>()\n  const invalidButtons: FrameButton['index'][] = []\n\n  for (const meta of metadata) {\n    const { property } = meta\n    if (!buttonRegex.test(property)) continue\n    const matchArray = property.match(buttonRegex) as [\n      string,\n      string,\n      string | undefined,\n    ]\n    const index = Number.parseInt(matchArray[1], 10) as FrameButton['index']\n    const type = matchArray[2]\n\n    const content = meta.content ?? ''\n    if (type === 'action')\n      buttonActionMap.set(index, content as FrameButton['type'])\n    else if (type === 'post_url') buttonPostUrlMap.set(index, content)\n    else if (type === 'target') buttonTargetMap.set(index, content)\n    else {\n      if (currentButtonIndex >= index) buttonsAreOutOfOrder = true\n      if (currentButtonIndex + 1 === index) currentButtonIndex = index\n      else buttonsAreMissing = true\n\n      if (buttonsAreOutOfOrder || buttonsAreMissing) invalidButtons.push(index)\n\n      const title = content ?? index\n      buttonMap.set(index, { index, title })\n    }\n  }\n\n  const buttons: FrameButton[] = []\n  for (const [index, button] of buttonMap) {\n    const postUrl = buttonPostUrlMap.get(index)\n    const type = buttonActionMap.get(index) ?? 'post'\n    const target = buttonTargetMap.get(index) as FrameButton['target']\n    buttons.push({\n      ...button,\n      postUrl,\n      target,\n      type,\n    } as FrameButton)\n  }\n\n  // Using `sort` over `toSorted` for Node.js < 20 compatibility (ie. Vercel default).\n  buttons.sort((a, b) => a.index - b.index)\n\n  return buttons\n}\n"],"names":[],"mappings":"AAGA,2BAA2B;;;;AAC3B,MAAM,cAAc;AAEd,SAAU,aAAa,QAAuB;IAClD,IAAI,qBAAqB;IACzB,IAAI,oBAAoB;IACxB,IAAI,uBAAuB;IAE3B,MAAM,YAAY,IAAI;IAItB,MAAM,kBAAkB,IAAI;IAC5B,MAAM,mBAAmB,IAAI;IAC7B,MAAM,kBAAkB,IAAI;IAC5B,MAAM,iBAAyC,EAAE;IAEjD,KAAK,MAAM,QAAQ,SAAU;QAC3B,MAAM,EAAE,QAAQ,EAAE,GAAG;QACrB,IAAI,CAAC,YAAY,IAAI,CAAC,WAAW;QACjC,MAAM,aAAa,SAAS,KAAK,CAAC;QAKlC,MAAM,QAAQ,OAAO,QAAQ,CAAC,UAAU,CAAC,EAAE,EAAE;QAC7C,MAAM,OAAO,UAAU,CAAC,EAAE;QAE1B,MAAM,UAAU,KAAK,OAAO,IAAI;QAChC,IAAI,SAAS,UACX,gBAAgB,GAAG,CAAC,OAAO;aACxB,IAAI,SAAS,YAAY,iBAAiB,GAAG,CAAC,OAAO;aACrD,IAAI,SAAS,UAAU,gBAAgB,GAAG,CAAC,OAAO;aAClD;YACH,IAAI,sBAAsB,OAAO,uBAAuB;YACxD,IAAI,qBAAqB,MAAM,OAAO,qBAAqB;iBACtD,oBAAoB;YAEzB,IAAI,wBAAwB,mBAAmB,eAAe,IAAI,CAAC;YAEnE,MAAM,QAAQ,WAAW;YACzB,UAAU,GAAG,CAAC,OAAO;gBAAE;gBAAO;YAAK;QACrC;IACF;IAEA,MAAM,UAAyB,EAAE;IACjC,KAAK,MAAM,CAAC,OAAO,OAAO,IAAI,UAAW;QACvC,MAAM,UAAU,iBAAiB,GAAG,CAAC;QACrC,MAAM,OAAO,gBAAgB,GAAG,CAAC,UAAU;QAC3C,MAAM,SAAS,gBAAgB,GAAG,CAAC;QACnC,QAAQ,IAAI,CAAC;YACX,GAAG,MAAM;YACT;YACA;YACA;;IAEJ;IAEA,oFAAoF;IACpF,QAAQ,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,KAAK,GAAG,EAAE,KAAK;IAExC,OAAO;AACT"}},
    {"offset": {"line": 4029, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4034, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/utils/htmlToMetadata.ts"],"sourcesContent":["import { parseFromString } from 'dom-parser'\n\nimport type { FrameContext } from '../../types/context.js'\nimport type { FrameImageAspectRatio, FrameVersion } from '../../types/frame.js'\nimport { deserializeJson } from '../../utils/deserializeJson.js'\nimport {\n  type FrameMetadata,\n  metaTagPropertyRegex,\n} from '../../utils/getFrameMetadata.js'\nimport type { Frame } from '../types.js'\nimport { parseButtons } from './parseButtons.js'\n\nexport function htmlToMetadata(html: string) {\n  const dom = parseFromString(\n    html\n      .replace(/<!doctype html>/i, '')\n      // @TODO: consider using `lodash.unescape`\n      .replaceAll(/&amp;/gm, '&')\n      .replaceAll(/&lt;/gm, '<')\n      .replaceAll(/&gt;/gm, '>')\n      .replaceAll(/&quot;/gm, '\"')\n      .replaceAll(/&#39;/gm, \"'\")\n      .replaceAll(/&#96;/gm, '`'),\n  )\n  const nodes = dom.getElementsByTagName('meta')\n\n  const metadata: FrameMetadata = []\n  const htmlTags = []\n  const properties = {} as Record<FrameMetadata[number]['property'], string>\n  for (const node of nodes) {\n    const property = (node.getAttribute('property') ??\n      node.getAttribute('name')) as\n      | FrameMetadata[number]['property']\n      | undefined\n    const content = node.getAttribute('content')\n\n    if (!property) continue\n    if (!property.match(metaTagPropertyRegex)) continue\n    metadata.push({ property, content })\n    properties[property] = content\n\n    // filter these properties out and add back on the client to save url space\n    // tip: search for `_frog_${property}` to see where it's added back\n    const excludeProperties = [\n      'fc:frame:image',\n      'fc:frame:post_url',\n      'fc:frame:state',\n      'og:image',\n    ]\n    let text = node.outerHTML\n    if (excludeProperties.includes(property ?? ''))\n      text = text.replace(/content=\".*?\"/, `content=\"_frog_${property}\"`)\n    htmlTags.push(text)\n  }\n\n  const buttons = parseButtons(metadata)\n\n  return {\n    context: properties['frog:context']\n      ? deserializeJson<FrameContext>(properties['frog:context'])\n      : undefined,\n    frame: {\n      buttons,\n      image: properties['og:image'],\n      imageAspectRatio:\n        (properties['fc:frame:image:aspect_ratio'] as FrameImageAspectRatio) ??\n        '1.91:1',\n      imageUrl: properties['fc:frame:image'],\n      input: properties['fc:frame:input:text']\n        ? { text: properties['fc:frame:input:text'] }\n        : undefined,\n      postUrl: properties['fc:frame:post_url'] as string | undefined,\n      state: properties['fc:frame:state'],\n      title: properties['og:title'],\n      version: (properties['fc:frame'] as FrameVersion) ?? 'vNext',\n\n      debug: {\n        htmlTags,\n      },\n    } satisfies Frame,\n    properties: metadata,\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAYM,SAAU,eAAe,IAAY;IACzC,MAAM,MAAM,CAAA,GAAA,gJAAA,CAAA,kBAAe,AAAf,EACV,KACG,OAAO,CAAC,oBAAoB,GAC7B,0CAA0C;KACzC,UAAU,CAAC,WAAW,KACtB,UAAU,CAAC,UAAU,KACrB,UAAU,CAAC,UAAU,KACrB,UAAU,CAAC,YAAY,KACvB,UAAU,CAAC,WAAW,KACtB,UAAU,CAAC,WAAW;IAE3B,MAAM,QAAQ,IAAI,oBAAoB,CAAC;IAEvC,MAAM,WAA0B,EAAE;IAClC,MAAM,WAAW,EAAE;IACnB,MAAM,aAAa,CAAA;IACnB,KAAK,MAAM,QAAQ,MAAO;QACxB,MAAM,WAAY,KAAK,YAAY,CAAC,eAClC,KAAK,YAAY,CAAC;QAGpB,MAAM,UAAU,KAAK,YAAY,CAAC;QAElC,IAAI,CAAC,UAAU;QACf,IAAI,CAAC,SAAS,KAAK,CAAC,2JAAA,CAAA,uBAAoB,GAAG;QAC3C,SAAS,IAAI,CAAC;YAAE;YAAU;QAAO;QACjC,UAAU,CAAC,SAAS,GAAG;QAEvB,2EAA2E;QAC3E,mEAAmE;QACnE,MAAM,oBAAoB;YACxB;YACA;YACA;YACA;SACD;QACD,IAAI,OAAO,KAAK,SAAS;QACzB,IAAI,kBAAkB,QAAQ,CAAC,YAAY,KACzC,OAAO,KAAK,OAAO,CAAC,iBAAiB,CAAA,eAAA,EAAkB,SAAQ,CAAA,CAAG;QACpE,SAAS,IAAI,CAAC;IAChB;IAEA,MAAM,UAAU,CAAA,GAAA,8JAAA,CAAA,eAAY,AAAZ,EAAa;IAE7B,OAAO;QACL,SAAS,UAAU,CAAC,eAAe,GAC/B,CAAA,GAAA,0JAAA,CAAA,kBAAe,AAAf,EAA8B,UAAU,CAAC,eAAe,IACxD;QACJ,OAAO;YACL;YACA,OAAO,UAAU,CAAC,WAAW;YAC7B,kBACG,UAAU,CAAC,8BAAwD,IACpE;YACF,UAAU,UAAU,CAAC,iBAAiB;YACtC,OAAO,UAAU,CAAC,sBAAsB,GACpC;gBAAE,MAAM,UAAU,CAAC,sBAAsB;YAAA,IACzC;YACJ,SAAS,UAAU,CAAC,oBAA0C;YAC9D,OAAO,UAAU,CAAC,iBAAiB;YACnC,OAAO,UAAU,CAAC,WAAW;YAC7B,SAAU,UAAU,CAAC,WAA4B,IAAI;YAErD,OAAO;gBACL;;;QAGJ,YAAY;;AAEhB"}},
    {"offset": {"line": 4097, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4102, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/utils/responseToBaseErrorMessage.ts"],"sourcesContent":["import type { BaseError } from '../../types/response.js'\n\nexport async function responseToBaseErrorMessage(\n  response: Response,\n): Promise<string> {\n  const { message }: Pick<BaseError, 'message'> = await response.json()\n  return message\n}\n"],"names":[],"mappings":";;;AAEO,eAAe,2BACpB,QAAkB;IAElB,MAAM,EAAE,OAAO,EAAE,GAA+B,MAAM,SAAS,IAAI;IACnE,OAAO;AACT"}},
    {"offset": {"line": 4109, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4114, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/utils/uid.ts"],"sourcesContent":["const size = 256\nlet index = size\nlet buffer: string\n\nexport function uid(length = 11) {\n  if (!buffer || index + length > size * 2) {\n    buffer = ''\n    index = 0\n    for (let i = 0; i < size; i++) {\n      buffer += ((256 + Math.random() * 256) | 0).toString(16).substring(1)\n    }\n  }\n  return buffer.substring(index, index++ + length)\n}\n"],"names":[],"mappings":";;;AAAA,MAAM,OAAO;AACb,IAAI,QAAQ;AACZ,IAAI;AAEE,SAAU,IAAI,SAAS,EAAE;IAC7B,IAAI,CAAC,UAAU,QAAQ,SAAS,OAAO,GAAG;QACxC,SAAS;QACT,QAAQ;QACR,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,IAAK;YAC7B,UAAU,CAAC,AAAC,MAAM,KAAK,MAAM,KAAK,MAAO,CAAC,EAAE,QAAQ,CAAC,IAAI,SAAS,CAAC;QACrE;IACF;IACA,OAAO,OAAO,SAAS,CAAC,OAAO,UAAU;AAC3C"}},
    {"offset": {"line": 4130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4135, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/utils/warpcast.ts"],"sourcesContent":["import { mnemonicToAccount } from 'viem/accounts'\n\nimport type { Hub } from '../../types/hub.js'\n\nexport async function getSignedKeyRequest(data: {\n  appFid: number | undefined\n  appMnemonic: string | undefined\n  publicKey: `0x${string}`\n}) {\n  const { appFid, appMnemonic, publicKey } = data\n  if (appFid && appMnemonic) {\n    const account = mnemonicToAccount(appMnemonic)\n\n    const deadline = Math.floor(Date.now() / 1000) + 60 * 60 // now + hour\n    const requestFid = appFid\n    const signature = await account.signTypedData({\n      domain: {\n        name: 'Farcaster SignedKeyRequestValidator',\n        version: '1',\n        chainId: 10,\n        verifyingContract: '0x00000000FC700472606ED4fA22623Acf62c60553',\n      },\n      types: {\n        SignedKeyRequest: [\n          { name: 'requestFid', type: 'uint256' },\n          { name: 'key', type: 'bytes' },\n          { name: 'deadline', type: 'uint256' },\n        ],\n      },\n      primaryType: 'SignedKeyRequest',\n      message: {\n        requestFid: BigInt(appFid),\n        key: publicKey,\n        deadline: BigInt(deadline),\n      },\n    })\n\n    return { deadline, requestFid, signature }\n  }\n\n  return (await fetch(\n    `https://auth.frog.fm/api/signed-key-requests/${publicKey}`,\n    {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    },\n  ).then((response) => response.json())) as {\n    deadline: number\n    requestFid: number\n    signature: string\n  }\n}\n\nexport async function postSignedKeyRequest(body: {\n  deadline: number\n  publicKey: string\n  requestFid: number\n  signature: string\n}) {\n  return (await fetch('https://api.warpcast.com/v2/signed-key-requests', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      ...body,\n      key: body.publicKey,\n    }),\n  }).then((response) => response.json())) as SignedKeyRequestResponse\n}\n\nexport async function getSignedKeyRequestForToken(token: string) {\n  return (await fetch(\n    `https://api.warpcast.com/v2/signed-key-request?token=${token}`,\n    {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    },\n  ).then((response) => response.json())) as SignedKeyRequestResponse\n}\n\ntype SignedKeyRequestResponse = {\n  result: { signedKeyRequest: SignedKeyRequest }\n}\n\ntype SignedKeyRequest = {\n  token: string\n  deeplinkUrl: string\n  key: string\n  requestFid: number\n  isSponsored: boolean\n} & (\n  | {\n      state: 'pending'\n      signerUser: {\n        fid: number\n        username: string\n        displayName: string\n        pfp: { url: string; verified: false }\n        profile: {\n          bio: {\n            text: string\n            mentions: string[]\n            channelMentions: string[]\n          }\n          location: { placeId: string; description: string }\n        }\n        followerCount: number\n        followingCount: number\n        activeOnFcNetwork: boolean\n        viewerContext: { following: boolean; followedBy: boolean }\n      }\n      signerUserMetadata: {\n        createdAt: number\n        usersCount: number\n        viewerContext: { existingKeysCountForViewer: number }\n      }\n      userFid: undefined\n    }\n  | {\n      state: 'approved' | 'completed'\n      signerUser: undefined\n      signerUserMetadata: undefined\n      userFid: number\n    }\n)\n\nexport async function getUserDataByFid(hub: Hub, userFid: number) {\n  const response = (await fetch(\n    `${hub.apiUrl}/v1/userDataByFid?fid=${userFid}`,\n    {\n      ...hub.fetchOptions,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        ...hub.fetchOptions?.headers,\n      },\n    },\n  ).then((response) => response.json())) as {\n    messages: {\n      data: {\n        type: 'MESSAGE_TYPE_USER_DATA_ADD'\n        userDataBody: {\n          type:\n            | 'USER_DATA_TYPE_PFP'\n            | 'USER_DATA_TYPE_USERNAME'\n            | 'USER_DATA_TYPE_DISPLAY'\n          value: string\n        }\n      }\n    }[]\n  }\n\n  let displayName = undefined\n  let pfp = undefined\n  let username = undefined\n\n  for (const message of response.messages) {\n    if (message.data.type !== 'MESSAGE_TYPE_USER_DATA_ADD') continue\n\n    const type = message.data.userDataBody.type\n    const value = message.data.userDataBody.value\n    if (type === 'USER_DATA_TYPE_PFP') pfp = value\n    if (type === 'USER_DATA_TYPE_USERNAME') username = value\n    if (type === 'USER_DATA_TYPE_DISPLAY') displayName = value\n  }\n\n  return { displayName, pfp, userFid, username }\n}\n"],"names":[],"mappings":";;;;;;;;;AAIO,eAAe,oBAAoB,IAIzC;IACC,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG;IAC3C,IAAI,UAAU,aAAa;QACzB,MAAM,UAAU,CAAA,GAAA,+JAAA,CAAA,oBAAiB,AAAjB,EAAkB;QAElC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,GAAG,KAAK,QAAQ,KAAK,IAAG,aAAa;QACtE,MAAM,aAAa;QACnB,MAAM,YAAY,MAAM,QAAQ,aAAa,CAAC;YAC5C,QAAQ;gBACN,MAAM;gBACN,SAAS;gBACT,SAAS;gBACT,mBAAmB;;YAErB,OAAO;gBACL,kBAAkB;oBAChB;wBAAE,MAAM;wBAAc,MAAM;oBAAS;oBACrC;wBAAE,MAAM;wBAAO,MAAM;oBAAO;oBAC5B;wBAAE,MAAM;wBAAY,MAAM;oBAAS;iBACpC;;YAEH,aAAa;YACb,SAAS;gBACP,YAAY,OAAO;gBACnB,KAAK;gBACL,UAAU,OAAO;;;QAIrB,OAAO;YAAE;YAAU;YAAY;QAAS;IAC1C;IAEA,OAAQ,MAAM,MACZ,CAAA,6CAAA,EAAgD,UAAS,CAAE,EAC3D;QACE,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAkB;OAE/C,IAAI,CAAC,CAAC,WAAa,SAAS,IAAI;AAKpC;AAEO,eAAe,qBAAqB,IAK1C;IACC,OAAQ,MAAM,MAAM,mDAAmD;QACrE,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAkB;QAC7C,MAAM,KAAK,SAAS,CAAC;YACnB,GAAG,IAAI;YACP,KAAK,KAAK,SAAS;;OAEpB,IAAI,CAAC,CAAC,WAAa,SAAS,IAAI;AACrC;AAEO,eAAe,4BAA4B,KAAa;IAC7D,OAAQ,MAAM,MACZ,CAAA,qDAAA,EAAwD,MAAK,CAAE,EAC/D;QACE,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAkB;OAE/C,IAAI,CAAC,CAAC,WAAa,SAAS,IAAI;AACpC;AAgDO,eAAe,iBAAiB,GAAQ,EAAE,OAAe;IAC9D,MAAM,WAAY,MAAM,MACtB,CAAA,EAAG,IAAI,MAAM,CAAA,sBAAA,EAAyB,QAAO,CAAE,EAC/C;QACE,GAAG,IAAI,YAAY;QACnB,QAAQ;QACR,SAAS;YACP,gBAAgB;YAChB,GAAG,IAAI,YAAY,EAAE,OAAO;;OAGhC,IAAI,CAAC,CAAC,WAAa,SAAS,IAAI;IAelC,IAAI,cAAc;IAClB,IAAI,MAAM;IACV,IAAI,WAAW;IAEf,KAAK,MAAM,WAAW,SAAS,QAAQ,CAAE;QACvC,IAAI,QAAQ,IAAI,CAAC,IAAI,KAAK,8BAA8B;QAExD,MAAM,OAAO,QAAQ,IAAI,CAAC,YAAY,CAAC,IAAI;QAC3C,MAAM,QAAQ,QAAQ,IAAI,CAAC,YAAY,CAAC,KAAK;QAC7C,IAAI,SAAS,sBAAsB,MAAM;QACzC,IAAI,SAAS,2BAA2B,WAAW;QACnD,IAAI,SAAS,0BAA0B,cAAc;IACvD;IAEA,OAAO;QAAE;QAAa;QAAK;QAAS;IAAQ;AAC9C"}},
    {"offset": {"line": 4240, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4245, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/api.ts"],"sourcesContent":["import { vValidator as validator } from '@hono/valibot-validator'\nimport { bytesToHex } from '@noble/curves/abstract/utils'\nimport { ed25519 } from '@noble/curves/ed25519'\nimport { Hono } from 'hono'\nimport type { InferResponseType, hc } from 'hono/client'\nimport {\n  deleteCookie,\n  getCookie,\n  getSignedCookie,\n  setCookie,\n  setSignedCookie,\n} from 'hono/cookie'\nimport type { inspectRoutes } from 'hono/dev'\nimport { HTTPException } from 'hono/http-exception'\n\nimport { object, parse, union } from 'valibot'\nimport type { Hub } from '../types/hub.js'\nimport type { TransactionResponse } from '../types/transaction.js'\nimport {\n  defaultCookieOptions,\n  defaultFid,\n  defaultHeaders,\n} from './constants.js'\nimport { postSchema } from './schemas.js'\nimport { fetchFrame } from './utils/fetchFrame.js'\nimport { getHtmlSize } from './utils/getHtmlSize.js'\nimport { getImageSize } from './utils/getImageSize.js'\nimport { htmlToMetadata } from './utils/htmlToMetadata.js'\nimport { responseToBaseErrorMessage } from './utils/responseToBaseErrorMessage.js'\nimport { uid } from './utils/uid.js'\nimport {\n  getSignedKeyRequest,\n  getSignedKeyRequestForToken,\n  getUserDataByFid,\n  postSignedKeyRequest,\n} from './utils/warpcast.js'\n\nexport type ApiRoutesOptions = {\n  /** Custom app fid to auth with. */\n  appFid?: number | undefined\n  /** Custom app mnemonic to auth with. */\n  appMnemonic?: string | undefined\n}\n\nexport type RouteData = ReturnType<typeof inspectRoutes>[number]\n\nexport type User = {\n  displayName?: string | undefined\n  pfp?: string | undefined\n  state: 'completed'\n  token: string\n  userFid: number\n  username?: string | undefined\n}\n\nexport function apiRoutes(\n  options: ApiRoutesOptions & {\n    hub: Hub | undefined\n    routes: RouteData[]\n    secret: string | undefined\n  },\n) {\n  const { appFid, appMnemonic, hub, routes, secret } = options\n\n  return new Hono<{\n    Variables: {\n      fid: number | undefined\n      keypair: { publicKey: string; privateKey: string } | undefined\n    }\n  }>()\n    .use('*', async (c, next) => {\n      try {\n        const userCookie = getCookie(c, 'frog_user') ?? getCookie(c, 'user')\n        const fid = userCookie ? JSON.parse(userCookie).userFid : undefined\n        c.set('fid', fid)\n      } catch {}\n\n      try {\n        const sessionCookie = secret\n          ? (await getSignedCookie(c, secret, 'frog_session')) ??\n            (await getSignedCookie(c, secret, 'session'))\n          : getCookie(c, 'frog_session') ?? getCookie(c, 'session')\n        const keypair = sessionCookie ? JSON.parse(sessionCookie) : undefined\n        c.set('keypair', keypair)\n      } catch {}\n\n      await next()\n    })\n    .get('/frames', (c) => {\n      const url = new URL(c.req.url)\n      const frameUrls = getFrameUrls(url.origin, routes)\n      return c.json(frameUrls)\n    })\n    .get('/frames/:url', async (c) => {\n      const url = decodeURIComponent(c.req.param('url'))\n      const initialData = await getInitialData(url)\n      return c.json(initialData)\n    })\n    .post('/frames/:url/action', validator('json', postSchema), async (c) => {\n      const url = decodeURIComponent(c.req.param('url'))\n\n      const json = c.req.valid('json')\n      const fid = json.fid ?? c.var.fid ?? defaultFid\n      const body = { ...json, fid }\n      const { response, speed } = await fetchFrame({\n        body,\n        privateKey: c.var.keypair?.privateKey,\n        url,\n      })\n      if (!response) throw new Error('Failed to fetch frame')\n\n      const cloned = response.clone()\n\n      if (!response.ok) {\n        const message = await responseToBaseErrorMessage(cloned)\n        return c.json({\n          id: uid(),\n          timestamp: Date.now(),\n          type: 'error',\n          method: 'post',\n          body,\n          metrics: {\n            speed,\n          },\n          response: {\n            success: false,\n            error: message,\n            status: response.status,\n            statusText: response.statusText,\n          },\n          url,\n        } as const)\n      }\n\n      const text = await response.text()\n      const metadata = htmlToMetadata(text)\n      const { context, frame } = metadata\n\n      const sizes = await Promise.all([\n        getHtmlSize(cloned),\n        getImageSize(frame.imageUrl),\n      ])\n\n      return c.json({\n        id: uid(),\n        timestamp: Date.now(),\n        type: 'action',\n        method: 'post',\n        body,\n        context,\n        frame,\n        metrics: {\n          htmlSize: sizes[0],\n          imageSize: sizes[1],\n          speed: speed,\n        },\n        response: {\n          success: true,\n          error: undefined,\n          status: response.status,\n          statusText: response.statusText,\n        },\n        url,\n      } as const)\n    })\n    .post('/frames/:url/redirect', validator('json', postSchema), async (c) => {\n      const url = decodeURIComponent(c.req.param('url'))\n\n      const json = c.req.valid('json')\n      const fid = json.fid ?? c.var.fid ?? defaultFid\n      const body = { ...json, fid }\n\n      const { error, response, speed } = await fetchFrame({\n        body,\n        privateKey: c.var.keypair?.privateKey,\n        url,\n      })\n\n      return c.json({\n        id: uid(),\n        timestamp: Date.now(),\n        type: 'redirect',\n        method: 'post',\n        body,\n        metrics: {\n          speed,\n        },\n        response: response?.redirected\n          ? {\n              success: true,\n              location: response.url,\n              error: undefined,\n              status: 302,\n              statusText: 'Found',\n            }\n          : {\n              success: false,\n              error: error?.cause\n                ? `${error.cause}`.replace('Error: ', '')\n                : error?.message,\n              status: response?.status ?? 500,\n              statusText: response?.statusText ?? 'Internal Server Error',\n            },\n        sourceFrameId: json.sourceFrameId,\n        url,\n      } as const)\n    })\n    .post('/frames/:url/tx', validator('json', postSchema), async (c) => {\n      const url = decodeURIComponent(c.req.param('url'))\n\n      const json = c.req.valid('json')\n      const fid = json.fid ?? c.var.fid ?? defaultFid\n      const body = { ...json, fid }\n\n      const { response, speed } = await fetchFrame({\n        body,\n        privateKey: c.var.keypair?.privateKey,\n        url,\n      })\n      // TODO: Handle errors\n      if (!response) throw new Error('Failed to fetch frame')\n\n      const cloned = response.clone()\n\n      if (!response.ok) {\n        const message = await responseToBaseErrorMessage(cloned)\n        return c.json({\n          id: uid(),\n          timestamp: Date.now(),\n          type: 'error',\n          method: 'post',\n          body,\n          metrics: {\n            speed,\n          },\n          response: {\n            success: false,\n            error: message,\n            status: response.status,\n            statusText: response.statusText,\n          },\n          url,\n        } as const)\n      }\n\n      const data = (await response.json()) as TransactionResponse\n\n      return c.json({\n        id: uid(),\n        timestamp: Date.now(),\n        type: 'tx',\n        method: 'post',\n        body,\n        metrics: {\n          speed,\n        },\n        response: {\n          success: true,\n          data,\n          error: undefined,\n          status: response.status,\n          statusText: response.statusText,\n        },\n        sourceFrameId: json.sourceFrameId,\n        url,\n      } as const)\n    })\n    .get('/auth/code', async (c) => {\n      // 1. Create keypair\n      const privateKeyBytes = ed25519.utils.randomPrivateKey()\n      const publicKeyBytes = ed25519.getPublicKey(privateKeyBytes)\n      const privateKey = `0x${bytesToHex(privateKeyBytes)}`\n      const publicKey = `0x${bytesToHex(publicKeyBytes)}` as const\n\n      // 2. Sign key request. By default, use hosted service.\n      const { deadline, requestFid, signature } = await getSignedKeyRequest({\n        appFid,\n        appMnemonic,\n        publicKey,\n      })\n\n      // 3. Create key request to register public key\n      const response = await postSignedKeyRequest({\n        deadline,\n        publicKey,\n        requestFid,\n        signature,\n      })\n      const { token, deeplinkUrl: url } = response.result.signedKeyRequest\n\n      // 4. Save keypair in cookie\n      const value = JSON.stringify({ privateKey, publicKey })\n      if (secret)\n        await setSignedCookie(\n          c,\n          'frog_session',\n          value,\n          secret,\n          defaultCookieOptions,\n        )\n      else\n        setCookie(c, 'frog_session', value, {\n          ...defaultCookieOptions,\n          httpOnly: true,\n        })\n\n      return c.json({ token, url })\n    })\n    .get('/auth/status/:token', async (c) => {\n      const token = c.req.param('token')\n      const response = await getSignedKeyRequestForToken(token)\n      const { state = 'pending', userFid } =\n        response.result?.signedKeyRequest ?? {}\n\n      if (state === 'completed') {\n        let user: User = { state, token, userFid: userFid as number }\n        if (hub && userFid) {\n          const data = await getUserDataByFid(hub, userFid)\n          user = { ...user, ...data }\n        }\n\n        setCookie(\n          c,\n          'frog_user',\n          JSON.stringify({ token, userFid }),\n          defaultCookieOptions,\n        )\n        return c.json(user)\n      }\n\n      return c.json({ state })\n    })\n    .post('/auth/logout', async (c) => {\n      deleteCookie(c, 'frog_session')\n      deleteCookie(c, 'frog_user')\n      return c.json({ success: true })\n    })\n    .post(\n      '/debug/image/:url',\n      validator('json', union([object({}), postSchema])),\n      async (c) => {\n        const url = decodeURIComponent(c.req.param('url'))\n\n        let text: string | undefined\n        const body = await c.req.json()\n        const hasBody = Object.keys(body).length > 0\n        const headers = {\n          ...defaultHeaders,\n          Accept: 'text/html',\n        }\n        if (hasBody) {\n          const json = parse(postSchema, body)\n          const params = {\n            body: { ...json, fid: json.fid ?? c.var.fid ?? defaultFid },\n            headers,\n            privateKey: c.var.keypair?.privateKey,\n            url,\n          }\n          text = await fetchFrame(params)\n            .then((result) => result.response)\n            .then((response) => response?.text())\n        } else\n          text = await fetch(url, { headers }).then((response) =>\n            response.text(),\n          )\n\n        if (!text) throw new HTTPException(500, { message: 'Failed to fetch' })\n        return c.html(text)\n      },\n    )\n}\n\nexport type ApiRoutes = ReturnType<typeof apiRoutes>\n\ntype Client = ReturnType<typeof hc<ApiRoutes>>\n\nexport type Data =\n  | InferResponseType<Client['frames'][':url']['$get']>\n  | Extract<\n      InferResponseType<Client['frames'][':url']['action']['$post']>,\n      { type: 'action' }\n    >\n  | (InferResponseType<Client['frames'][':url']['redirect']['$post']> &\n      BaseData)\n  | (Extract<\n      InferResponseType<Client['frames'][':url']['tx']['$post']>,\n      { type: 'tx' }\n    > &\n      BaseData)\n\ntype BaseData = Pick<\n  InferResponseType<Client['frames'][':url']['$get']>,\n  'context' | 'frame'\n>\n\nexport type Bootstrap = {\n  data: Data | undefined\n  frameUrls: string[]\n  user: User | undefined\n}\n\nexport function getFrameUrls(origin: string, routes: RouteData[]) {\n  const frameUrls: string[] = []\n  for (const route of routes) {\n    if (route.isMiddleware) continue\n    if (route.method !== 'ALL') continue\n    frameUrls.push(`${origin}${route.path}`)\n  }\n  return frameUrls\n}\n\nexport async function getInitialData(frameUrl: string) {\n  const t0 = performance.now()\n  const response = await fetch(frameUrl, { headers: defaultHeaders })\n  const t1 = performance.now()\n  const speed = t1 - t0\n\n  const cloned = response.clone()\n  const text = await response.text()\n\n  // Vercel requires authentication by default for preview deployments\n  if (text.includes('Authentication Required') && text.includes('vercel'))\n    throw new HTTPException(401, {\n      message:\n        'Vercel Authentication blocked Frog Devtools\\nLearn more: https://vercel.com/docs/security/deployment-protection',\n    })\n\n  const metadata = htmlToMetadata(text)\n  const { context, frame } = metadata\n\n  const sizes = await Promise.all([\n    getHtmlSize(cloned),\n    getImageSize(frame.imageUrl),\n  ])\n\n  return {\n    id: uid(),\n    timestamp: Date.now(),\n    type: 'initial',\n    method: 'get',\n    context,\n    frame,\n    metrics: {\n      htmlSize: sizes[0],\n      imageSize: sizes[1],\n      speed,\n    },\n    response: {\n      success: true,\n      error: undefined,\n      status: response.status,\n      statusText: response.statusText,\n    },\n    url: frameUrl,\n  } as const\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4610, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4615, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/devtools.tsx"],"sourcesContent":["import type { serveStatic as n_serveStatic } from '@hono/node-server/serve-static'\nimport { Hono, type Schema } from 'hono'\nimport type { serveStatic as b_serveStatic } from 'hono/bun'\nimport type { serveStatic as c_serveStatic } from 'hono/cloudflare-workers'\nimport { getCookie } from 'hono/cookie'\nimport { inspectRoutes } from 'hono/dev'\nimport { html } from 'hono/html'\nimport { HTTPException } from 'hono/http-exception'\n\nimport type { FrogBase } from '../frog-base.js'\nimport type { Env } from '../types/env.js'\nimport type { Hub } from '../types/hub.js'\nimport type { Pretty } from '../types/utils.js'\nimport { getRequestUrl } from '../utils/getRequestUrl.js'\nimport {\n  type ApiRoutesOptions,\n  type Bootstrap,\n  type RouteData,\n  type User,\n  apiRoutes,\n  getFrameUrls,\n  getInitialData,\n} from './api.js'\nimport { uiDistDir } from './constants.js'\nimport { getUserDataByFid } from './utils/warpcast.js'\n\nexport type ServeStatic =\n  | typeof n_serveStatic\n  | typeof c_serveStatic\n  | typeof b_serveStatic\n\nexport type DevtoolsOptions<serveStatic extends ServeStatic = ServeStatic> =\n  RoutesOptions<serveStatic>\n\nexport function devtools<\n  env extends Env,\n  schema extends Schema,\n  basePath extends string,\n  serveStatic extends ServeStatic,\n  ///\n  state = env['State'],\n>(\n  frog: FrogBase<env, schema, basePath, state>,\n  options?:\n    | (DevtoolsOptions<serveStatic> & { root?: string | undefined })\n    | undefined,\n) {\n  if (!(frog.dev?.enabled ?? true)) return\n\n  const {\n    appFid = frog.dev?.appFid,\n    appMnemonic = frog.dev?.appMnemonic,\n    assetsPath,\n    basePath = '/dev',\n    root,\n    serveStatic,\n    serveStaticOptions,\n  } = options ?? {}\n\n  let publicPath = ''\n  if (assetsPath) publicPath = assetsPath === '/' ? '' : assetsPath\n  else if (serveStatic) publicPath = `.${basePath}`\n  else if (frog.assetsPath)\n    publicPath = frog.assetsPath === '/' ? '' : frog.assetsPath\n  else publicPath = `/${uiDistDir}`\n\n  const rootBasePath = frog.basePath === '/' ? '' : frog.basePath\n  const devBasePath = `${rootBasePath}${basePath}`\n\n  const app = routes({\n    appFid,\n    appMnemonic,\n    basePath: devBasePath,\n    hub: frog.hub || (frog.hubApiUrl ? { apiUrl: frog.hubApiUrl } : undefined),\n    publicPath,\n    root,\n    routes: inspectRoutes(frog.hono),\n    secret: frog.secret,\n    serveStatic,\n    serveStaticOptions,\n  })\n\n  frog.hono.route(basePath, app)\n  frog._dev = devBasePath\n}\n\ntype RoutesOptions<serveStatic extends ServeStatic = ServeStatic> = Pretty<\n  Pretty<ApiRoutesOptions> & {\n    /**\n     * The base path for devtools assets.\n     */\n    assetsPath?: string\n    /**\n     * The base path for the devtools instance off the Frog instances `basePath`.\n     *\n     * @default '/dev'\n     */\n    basePath?: string | undefined\n    /**\n     * Platform-dependent function to serve devtools' static files.\n     *\n     * @example\n     * import { serveStatic } from 'frog/serve-static'\n     * import { serveStatic } from 'hono/bun'\n     * import { serveStatic } from 'hono/cloudflare-workers'\n     * import { serveStatic } from '@hono/node-server/serve-static'\n     */\n    serveStatic?: serveStatic | ServeStatic | undefined\n    /**\n     * Parameters to pass to the {@link serveStatic} function.\n     */\n    serveStaticOptions?: Parameters<serveStatic>[0] | undefined\n  }\n>\n\nexport function routes(\n  options: RoutesOptions & {\n    basePath: string\n    hub: Hub | undefined\n    publicPath: string\n    root: string | undefined\n    routes: RouteData[]\n    secret: string | undefined\n  },\n) {\n  const {\n    appFid,\n    appMnemonic,\n    basePath,\n    hub,\n    publicPath,\n    root,\n    routes,\n    secret,\n    serveStatic,\n    serveStaticOptions,\n  } = options\n\n  const app = new Hono()\n  const assetsPath = publicPath.endsWith('/')\n    ? publicPath.replace(/\\/$/, '')\n    : publicPath\n\n  app\n    .get('/', async (c) => {\n      const { origin } = getRequestUrl(c.req)\n      const baseUrl = `${origin}${basePath}`\n\n      let frameUrls: string[] = []\n      let initialData: Bootstrap['data'] = undefined\n      const url = c.req.query('url')\n      if (url || routes.length) {\n        frameUrls = getFrameUrls(origin, routes)\n\n        let frameUrl = frameUrls[0]\n        if (url) {\n          const tmpUrl = `${origin}${url}`\n          if (url.startsWith('/')) frameUrl = tmpUrl\n          else frameUrl = url\n        }\n\n        try {\n          if (frameUrl)\n            initialData = (await getInitialData(frameUrl)) as Bootstrap['data']\n        } catch (error) {\n          if (error instanceof HTTPException) throw error\n        }\n      }\n\n      let user: User | undefined = undefined\n      const cookie = getCookie(c, 'frog_user') ?? getCookie(c, 'user')\n      if (cookie)\n        try {\n          const parsed = JSON.parse(cookie)\n          if (parsed && hub) {\n            const data = await getUserDataByFid(hub, parsed.userFid)\n            user = { state: 'completed', ...parsed, ...data }\n          }\n        } catch {}\n\n      const bootstrap = JSON.stringify({\n        data: initialData,\n        frameUrls,\n        user,\n      } satisfies Bootstrap)\n\n      const title = initialData\n        ? `frame: ${new URL(initialData.url).pathname}`\n        : 'Frog Devtools'\n\n      return c.html(\n        <>\n          {html`<!doctype html>`}\n          <html lang=\"en\">\n            <head>\n              <meta charset=\"UTF-8\" />\n              <meta\n                name=\"viewport\"\n                content=\"width=device-width, initial-scale=1.0\"\n              />\n              <title>{title}</title>\n\n              <script type=\"module\">\n                {html`globalThis.__FROG_BASE_URL__ = '${baseUrl}'`}\n              </script>\n\n              <script\n                type=\"module\"\n                crossorigin=\"\"\n                src={`${assetsPath}/main.js`}\n              />\n              <link\n                rel=\"stylesheet\"\n                crossorigin=\"\"\n                href={`${assetsPath}/assets/main.css`}\n              />\n\n              <link\n                rel=\"alternate icon\"\n                type=\"image/png\"\n                href={`${assetsPath}/assets/icon.png`}\n              />\n\n              {/* Prevent background flash */}\n              <style id=\"__SSR_STYLE__\">\n                {html`\n                  @media (prefers-color-scheme: dark) {\n                    html {\n                      background-color: #000;\n                    }\n                  }\n                `}\n              </style>\n            </head>\n            <body>\n              <div id=\"root\" />\n              <script\n                id=\"__FROG_DATA__\"\n                type=\"application/json\"\n                // biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>\n                dangerouslySetInnerHTML={{ __html: bootstrap }}\n              />\n            </body>\n          </html>\n        </>,\n      )\n    })\n    .route(\n      '/api',\n      apiRoutes({\n        appFid,\n        appMnemonic,\n        hub,\n        routes,\n        secret,\n      }),\n    )\n\n  if (serveStatic)\n    app.get(\n      '/*',\n      serveStatic({\n        manifest: '',\n        rewriteRequestPath(path) {\n          return path.replace(basePath, uiDistDir)\n        },\n        root,\n        ...serveStaticOptions,\n      }),\n    )\n\n  return app\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4799, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4804, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/utils/env.ts"],"sourcesContent":["export function isCloudflareWorkers() {\n  return (\n    // @ts-ignore\n    typeof WebSocketPair !== 'undefined' ||\n    // @ts-ignore\n    (typeof navigator !== 'undefined' &&\n      navigator.userAgent === 'Cloudflare-Workers') ||\n    // @ts-ignore\n    (typeof EdgeRuntime !== 'undefined' && EdgeRuntime === 'vercel')\n  )\n}\n"],"names":[],"mappings":";;;AAAM,SAAU;IACd,OACE,aAAa;IACb,OAAO,kBAAkB,eAExB,OAAO,cAAc,eACpB,UAAU,SAAS,KAAK,wBAEzB,OAAO,gBAAgB,eAAe,gBAAgB;AAE3D"}},
    {"offset": {"line": 4811, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4816, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/utils/getUiRoot.ts"],"sourcesContent":["import { isCloudflareWorkers } from './env.js'\n\nexport async function getUiRoot(): Promise<string | undefined> {\n  if (!isCloudflareWorkers()) {\n    const { dirname, relative, resolve } = await import('node:path')\n    const { fileURLToPath } = await import('node:url')\n    return relative(\n      './',\n      resolve(dirname(fileURLToPath(import.meta.url)), '../../ui'),\n    )\n  }\n\n  return\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAEO,eAAe;IACpB,IAAI,CAAC,CAAA,GAAA,qJAAA,CAAA,sBAAmB,AAAnB,KAAuB;QAC1B,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,gEAAa;QACpD,MAAM,EAAE,aAAa,EAAE,GAAG,gEAAa;QACvC,OAAO,SACL,MACA,QAAQ,QAAQ,cAAc,8BAAY,GAAG,IAAI;IAErD;IAEA;AACF"}},
    {"offset": {"line": 4835, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4841, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/frog/dev/index.ts"],"sourcesContent":["import type { Schema } from 'hono'\n\nimport type { FrogBase } from '../frog-base.js'\nimport type { Env } from '../types/env.js'\nimport {\n  type DevtoolsOptions,\n  type ServeStatic,\n  devtools as devtools_base,\n} from './devtools.js'\nimport { getUiRoot } from './utils/getUiRoot.js'\n\nconst root = await getUiRoot()\n\n/**\n * Built-in devtools with live preview, hot reload, time-travel debugging, and more.\n *\n * @see https://frog.fm/dev/devtools\n */\nexport function devtools<\n  env extends Env,\n  schema extends Schema,\n  basePath extends string,\n  serveStatic extends ServeStatic,\n  ///\n  state = env['State'],\n>(\n  frog: FrogBase<env, schema, basePath, state>,\n  options?: DevtoolsOptions<serveStatic> | undefined,\n) {\n  devtools_base(frog, { ...options, root })\n}\n"],"names":[],"mappings":";;;;;;;;AAWA,MAAM,OAAO,MAAM,CAAA,GAAA,2JAAA,CAAA,YAAS,AAAT;AAOb,SAAU,SAQd,IAA4C,EAC5C,OAAkD;IAElD,CAAA,GAAA,iJAAA,CAAA,WAAa,AAAb,EAAc,MAAM;QAAE,GAAG,OAAO;QAAE;IAAI;AACxC"}},
    {"offset": {"line": 4856, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}